
state_recorder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a534  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d8  0800a6d0  0800a6d0  0001a6d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a8a8  0800a8a8  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a8a8  0800a8a8  0001a8a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a8b0  0800a8b0  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a8b0  0800a8b0  0001a8b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a8b4  0800a8b4  0001a8b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800a8b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003c24  2000007c  0800a934  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003ca0  0800a934  00023ca0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016df6  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000318e  00000000  00000000  00036ea2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001270  00000000  00000000  0003a030  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010e8  00000000  00000000  0003b2a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a458  00000000  00000000  0003c388  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000103b0  00000000  00000000  000567e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00098185  00000000  00000000  00066b90  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fed15  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051cc  00000000  00000000  000fed90  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000007c 	.word	0x2000007c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800a6b4 	.word	0x0800a6b4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000080 	.word	0x20000080
 80001d4:	0800a6b4 	.word	0x0800a6b4

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_drsub>:
 80001e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001ec:	e002      	b.n	80001f4 <__adddf3>
 80001ee:	bf00      	nop

080001f0 <__aeabi_dsub>:
 80001f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f4 <__adddf3>:
 80001f4:	b530      	push	{r4, r5, lr}
 80001f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001fe:	ea94 0f05 	teq	r4, r5
 8000202:	bf08      	it	eq
 8000204:	ea90 0f02 	teqeq	r0, r2
 8000208:	bf1f      	itttt	ne
 800020a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800020e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000212:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000216:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021a:	f000 80e2 	beq.w	80003e2 <__adddf3+0x1ee>
 800021e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000222:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000226:	bfb8      	it	lt
 8000228:	426d      	neglt	r5, r5
 800022a:	dd0c      	ble.n	8000246 <__adddf3+0x52>
 800022c:	442c      	add	r4, r5
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	ea82 0000 	eor.w	r0, r2, r0
 800023a:	ea83 0101 	eor.w	r1, r3, r1
 800023e:	ea80 0202 	eor.w	r2, r0, r2
 8000242:	ea81 0303 	eor.w	r3, r1, r3
 8000246:	2d36      	cmp	r5, #54	; 0x36
 8000248:	bf88      	it	hi
 800024a:	bd30      	pophi	{r4, r5, pc}
 800024c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000250:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000254:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000258:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x70>
 800025e:	4240      	negs	r0, r0
 8000260:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000264:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000268:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800026c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000270:	d002      	beq.n	8000278 <__adddf3+0x84>
 8000272:	4252      	negs	r2, r2
 8000274:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000278:	ea94 0f05 	teq	r4, r5
 800027c:	f000 80a7 	beq.w	80003ce <__adddf3+0x1da>
 8000280:	f1a4 0401 	sub.w	r4, r4, #1
 8000284:	f1d5 0e20 	rsbs	lr, r5, #32
 8000288:	db0d      	blt.n	80002a6 <__adddf3+0xb2>
 800028a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800028e:	fa22 f205 	lsr.w	r2, r2, r5
 8000292:	1880      	adds	r0, r0, r2
 8000294:	f141 0100 	adc.w	r1, r1, #0
 8000298:	fa03 f20e 	lsl.w	r2, r3, lr
 800029c:	1880      	adds	r0, r0, r2
 800029e:	fa43 f305 	asr.w	r3, r3, r5
 80002a2:	4159      	adcs	r1, r3
 80002a4:	e00e      	b.n	80002c4 <__adddf3+0xd0>
 80002a6:	f1a5 0520 	sub.w	r5, r5, #32
 80002aa:	f10e 0e20 	add.w	lr, lr, #32
 80002ae:	2a01      	cmp	r2, #1
 80002b0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b4:	bf28      	it	cs
 80002b6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	18c0      	adds	r0, r0, r3
 80002c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c8:	d507      	bpl.n	80002da <__adddf3+0xe6>
 80002ca:	f04f 0e00 	mov.w	lr, #0
 80002ce:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002d6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002de:	d31b      	bcc.n	8000318 <__adddf3+0x124>
 80002e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e4:	d30c      	bcc.n	8000300 <__adddf3+0x10c>
 80002e6:	0849      	lsrs	r1, r1, #1
 80002e8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f0:	f104 0401 	add.w	r4, r4, #1
 80002f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002fc:	f080 809a 	bcs.w	8000434 <__adddf3+0x240>
 8000300:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000304:	bf08      	it	eq
 8000306:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030a:	f150 0000 	adcs.w	r0, r0, #0
 800030e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000312:	ea41 0105 	orr.w	r1, r1, r5
 8000316:	bd30      	pop	{r4, r5, pc}
 8000318:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800031c:	4140      	adcs	r0, r0
 800031e:	eb41 0101 	adc.w	r1, r1, r1
 8000322:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000326:	f1a4 0401 	sub.w	r4, r4, #1
 800032a:	d1e9      	bne.n	8000300 <__adddf3+0x10c>
 800032c:	f091 0f00 	teq	r1, #0
 8000330:	bf04      	itt	eq
 8000332:	4601      	moveq	r1, r0
 8000334:	2000      	moveq	r0, #0
 8000336:	fab1 f381 	clz	r3, r1
 800033a:	bf08      	it	eq
 800033c:	3320      	addeq	r3, #32
 800033e:	f1a3 030b 	sub.w	r3, r3, #11
 8000342:	f1b3 0220 	subs.w	r2, r3, #32
 8000346:	da0c      	bge.n	8000362 <__adddf3+0x16e>
 8000348:	320c      	adds	r2, #12
 800034a:	dd08      	ble.n	800035e <__adddf3+0x16a>
 800034c:	f102 0c14 	add.w	ip, r2, #20
 8000350:	f1c2 020c 	rsb	r2, r2, #12
 8000354:	fa01 f00c 	lsl.w	r0, r1, ip
 8000358:	fa21 f102 	lsr.w	r1, r1, r2
 800035c:	e00c      	b.n	8000378 <__adddf3+0x184>
 800035e:	f102 0214 	add.w	r2, r2, #20
 8000362:	bfd8      	it	le
 8000364:	f1c2 0c20 	rsble	ip, r2, #32
 8000368:	fa01 f102 	lsl.w	r1, r1, r2
 800036c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000370:	bfdc      	itt	le
 8000372:	ea41 010c 	orrle.w	r1, r1, ip
 8000376:	4090      	lslle	r0, r2
 8000378:	1ae4      	subs	r4, r4, r3
 800037a:	bfa2      	ittt	ge
 800037c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000380:	4329      	orrge	r1, r5
 8000382:	bd30      	popge	{r4, r5, pc}
 8000384:	ea6f 0404 	mvn.w	r4, r4
 8000388:	3c1f      	subs	r4, #31
 800038a:	da1c      	bge.n	80003c6 <__adddf3+0x1d2>
 800038c:	340c      	adds	r4, #12
 800038e:	dc0e      	bgt.n	80003ae <__adddf3+0x1ba>
 8000390:	f104 0414 	add.w	r4, r4, #20
 8000394:	f1c4 0220 	rsb	r2, r4, #32
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f302 	lsl.w	r3, r1, r2
 80003a0:	ea40 0003 	orr.w	r0, r0, r3
 80003a4:	fa21 f304 	lsr.w	r3, r1, r4
 80003a8:	ea45 0103 	orr.w	r1, r5, r3
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f1c4 040c 	rsb	r4, r4, #12
 80003b2:	f1c4 0220 	rsb	r2, r4, #32
 80003b6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ba:	fa01 f304 	lsl.w	r3, r1, r4
 80003be:	ea40 0003 	orr.w	r0, r0, r3
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f094 0f00 	teq	r4, #0
 80003d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003d6:	bf06      	itte	eq
 80003d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003dc:	3401      	addeq	r4, #1
 80003de:	3d01      	subne	r5, #1
 80003e0:	e74e      	b.n	8000280 <__adddf3+0x8c>
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf18      	it	ne
 80003e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003ec:	d029      	beq.n	8000442 <__adddf3+0x24e>
 80003ee:	ea94 0f05 	teq	r4, r5
 80003f2:	bf08      	it	eq
 80003f4:	ea90 0f02 	teqeq	r0, r2
 80003f8:	d005      	beq.n	8000406 <__adddf3+0x212>
 80003fa:	ea54 0c00 	orrs.w	ip, r4, r0
 80003fe:	bf04      	itt	eq
 8000400:	4619      	moveq	r1, r3
 8000402:	4610      	moveq	r0, r2
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	ea91 0f03 	teq	r1, r3
 800040a:	bf1e      	ittt	ne
 800040c:	2100      	movne	r1, #0
 800040e:	2000      	movne	r0, #0
 8000410:	bd30      	popne	{r4, r5, pc}
 8000412:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000416:	d105      	bne.n	8000424 <__adddf3+0x230>
 8000418:	0040      	lsls	r0, r0, #1
 800041a:	4149      	adcs	r1, r1
 800041c:	bf28      	it	cs
 800041e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000422:	bd30      	pop	{r4, r5, pc}
 8000424:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000428:	bf3c      	itt	cc
 800042a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800042e:	bd30      	popcc	{r4, r5, pc}
 8000430:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000434:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000438:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800043c:	f04f 0000 	mov.w	r0, #0
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000446:	bf1a      	itte	ne
 8000448:	4619      	movne	r1, r3
 800044a:	4610      	movne	r0, r2
 800044c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000450:	bf1c      	itt	ne
 8000452:	460b      	movne	r3, r1
 8000454:	4602      	movne	r2, r0
 8000456:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045a:	bf06      	itte	eq
 800045c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000460:	ea91 0f03 	teqeq	r1, r3
 8000464:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	bf00      	nop

0800046c <__aeabi_ui2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f04f 0500 	mov.w	r5, #0
 8000484:	f04f 0100 	mov.w	r1, #0
 8000488:	e750      	b.n	800032c <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_i2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a4:	bf48      	it	mi
 80004a6:	4240      	negmi	r0, r0
 80004a8:	f04f 0100 	mov.w	r1, #0
 80004ac:	e73e      	b.n	800032c <__adddf3+0x138>
 80004ae:	bf00      	nop

080004b0 <__aeabi_f2d>:
 80004b0:	0042      	lsls	r2, r0, #1
 80004b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004be:	bf1f      	itttt	ne
 80004c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004cc:	4770      	bxne	lr
 80004ce:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004d2:	bf08      	it	eq
 80004d4:	4770      	bxeq	lr
 80004d6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004da:	bf04      	itt	eq
 80004dc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f0:	e71c      	b.n	800032c <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_ul2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f04f 0500 	mov.w	r5, #0
 8000502:	e00a      	b.n	800051a <__aeabi_l2d+0x16>

08000504 <__aeabi_l2d>:
 8000504:	ea50 0201 	orrs.w	r2, r0, r1
 8000508:	bf08      	it	eq
 800050a:	4770      	bxeq	lr
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000512:	d502      	bpl.n	800051a <__aeabi_l2d+0x16>
 8000514:	4240      	negs	r0, r0
 8000516:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000522:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000526:	f43f aed8 	beq.w	80002da <__adddf3+0xe6>
 800052a:	f04f 0203 	mov.w	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000542:	f1c2 0320 	rsb	r3, r2, #32
 8000546:	fa00 fc03 	lsl.w	ip, r0, r3
 800054a:	fa20 f002 	lsr.w	r0, r0, r2
 800054e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000552:	ea40 000e 	orr.w	r0, r0, lr
 8000556:	fa21 f102 	lsr.w	r1, r1, r2
 800055a:	4414      	add	r4, r2
 800055c:	e6bd      	b.n	80002da <__adddf3+0xe6>
 800055e:	bf00      	nop

08000560 <__aeabi_dmul>:
 8000560:	b570      	push	{r4, r5, r6, lr}
 8000562:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000566:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800056a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056e:	bf1d      	ittte	ne
 8000570:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000574:	ea94 0f0c 	teqne	r4, ip
 8000578:	ea95 0f0c 	teqne	r5, ip
 800057c:	f000 f8de 	bleq	800073c <__aeabi_dmul+0x1dc>
 8000580:	442c      	add	r4, r5
 8000582:	ea81 0603 	eor.w	r6, r1, r3
 8000586:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000592:	bf18      	it	ne
 8000594:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a0:	d038      	beq.n	8000614 <__aeabi_dmul+0xb4>
 80005a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b6:	f04f 0600 	mov.w	r6, #0
 80005ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005be:	f09c 0f00 	teq	ip, #0
 80005c2:	bf18      	it	ne
 80005c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d4:	d204      	bcs.n	80005e0 <__aeabi_dmul+0x80>
 80005d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005da:	416d      	adcs	r5, r5
 80005dc:	eb46 0606 	adc.w	r6, r6, r6
 80005e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f8:	bf88      	it	hi
 80005fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005fe:	d81e      	bhi.n	800063e <__aeabi_dmul+0xde>
 8000600:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000604:	bf08      	it	eq
 8000606:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060a:	f150 0000 	adcs.w	r0, r0, #0
 800060e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000612:	bd70      	pop	{r4, r5, r6, pc}
 8000614:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000618:	ea46 0101 	orr.w	r1, r6, r1
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	ea81 0103 	eor.w	r1, r1, r3
 8000624:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000628:	bfc2      	ittt	gt
 800062a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000632:	bd70      	popgt	{r4, r5, r6, pc}
 8000634:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000638:	f04f 0e00 	mov.w	lr, #0
 800063c:	3c01      	subs	r4, #1
 800063e:	f300 80ab 	bgt.w	8000798 <__aeabi_dmul+0x238>
 8000642:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000646:	bfde      	ittt	le
 8000648:	2000      	movle	r0, #0
 800064a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800064e:	bd70      	pople	{r4, r5, r6, pc}
 8000650:	f1c4 0400 	rsb	r4, r4, #0
 8000654:	3c20      	subs	r4, #32
 8000656:	da35      	bge.n	80006c4 <__aeabi_dmul+0x164>
 8000658:	340c      	adds	r4, #12
 800065a:	dc1b      	bgt.n	8000694 <__aeabi_dmul+0x134>
 800065c:	f104 0414 	add.w	r4, r4, #20
 8000660:	f1c4 0520 	rsb	r5, r4, #32
 8000664:	fa00 f305 	lsl.w	r3, r0, r5
 8000668:	fa20 f004 	lsr.w	r0, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea40 0002 	orr.w	r0, r0, r2
 8000674:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000678:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800067c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000680:	fa21 f604 	lsr.w	r6, r1, r4
 8000684:	eb42 0106 	adc.w	r1, r2, r6
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f1c4 040c 	rsb	r4, r4, #12
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f304 	lsl.w	r3, r0, r4
 80006a0:	fa20 f005 	lsr.w	r0, r0, r5
 80006a4:	fa01 f204 	lsl.w	r2, r1, r4
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b4:	f141 0100 	adc.w	r1, r1, #0
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f205 	lsl.w	r2, r0, r5
 80006cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d0:	fa20 f304 	lsr.w	r3, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea43 0302 	orr.w	r3, r3, r2
 80006dc:	fa21 f004 	lsr.w	r0, r1, r4
 80006e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	fa21 f204 	lsr.w	r2, r1, r4
 80006e8:	ea20 0002 	bic.w	r0, r0, r2
 80006ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f094 0f00 	teq	r4, #0
 8000700:	d10f      	bne.n	8000722 <__aeabi_dmul+0x1c2>
 8000702:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000706:	0040      	lsls	r0, r0, #1
 8000708:	eb41 0101 	adc.w	r1, r1, r1
 800070c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3c01      	subeq	r4, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1a6>
 8000716:	ea41 0106 	orr.w	r1, r1, r6
 800071a:	f095 0f00 	teq	r5, #0
 800071e:	bf18      	it	ne
 8000720:	4770      	bxne	lr
 8000722:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000726:	0052      	lsls	r2, r2, #1
 8000728:	eb43 0303 	adc.w	r3, r3, r3
 800072c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3d01      	subeq	r5, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1c6>
 8000736:	ea43 0306 	orr.w	r3, r3, r6
 800073a:	4770      	bx	lr
 800073c:	ea94 0f0c 	teq	r4, ip
 8000740:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000744:	bf18      	it	ne
 8000746:	ea95 0f0c 	teqne	r5, ip
 800074a:	d00c      	beq.n	8000766 <__aeabi_dmul+0x206>
 800074c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000750:	bf18      	it	ne
 8000752:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000756:	d1d1      	bne.n	80006fc <__aeabi_dmul+0x19c>
 8000758:	ea81 0103 	eor.w	r1, r1, r3
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076a:	bf06      	itte	eq
 800076c:	4610      	moveq	r0, r2
 800076e:	4619      	moveq	r1, r3
 8000770:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000774:	d019      	beq.n	80007aa <__aeabi_dmul+0x24a>
 8000776:	ea94 0f0c 	teq	r4, ip
 800077a:	d102      	bne.n	8000782 <__aeabi_dmul+0x222>
 800077c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000780:	d113      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000782:	ea95 0f0c 	teq	r5, ip
 8000786:	d105      	bne.n	8000794 <__aeabi_dmul+0x234>
 8000788:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800078c:	bf1c      	itt	ne
 800078e:	4610      	movne	r0, r2
 8000790:	4619      	movne	r1, r3
 8000792:	d10a      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000794:	ea81 0103 	eor.w	r1, r1, r3
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a4:	f04f 0000 	mov.w	r0, #0
 80007a8:	bd70      	pop	{r4, r5, r6, pc}
 80007aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007b2:	bd70      	pop	{r4, r5, r6, pc}

080007b4 <__aeabi_ddiv>:
 80007b4:	b570      	push	{r4, r5, r6, lr}
 80007b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c2:	bf1d      	ittte	ne
 80007c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c8:	ea94 0f0c 	teqne	r4, ip
 80007cc:	ea95 0f0c 	teqne	r5, ip
 80007d0:	f000 f8a7 	bleq	8000922 <__aeabi_ddiv+0x16e>
 80007d4:	eba4 0405 	sub.w	r4, r4, r5
 80007d8:	ea81 0e03 	eor.w	lr, r1, r3
 80007dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e4:	f000 8088 	beq.w	80008f8 <__aeabi_ddiv+0x144>
 80007e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007ec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000800:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000804:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000808:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800080c:	429d      	cmp	r5, r3
 800080e:	bf08      	it	eq
 8000810:	4296      	cmpeq	r6, r2
 8000812:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000816:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800081a:	d202      	bcs.n	8000822 <__aeabi_ddiv+0x6e>
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	1ab6      	subs	r6, r6, r2
 8000824:	eb65 0503 	sbc.w	r5, r5, r3
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000832:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 000c 	orrcs.w	r0, r0, ip
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000890:	ea55 0e06 	orrs.w	lr, r5, r6
 8000894:	d018      	beq.n	80008c8 <__aeabi_ddiv+0x114>
 8000896:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b2:	d1c0      	bne.n	8000836 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b8:	d10b      	bne.n	80008d2 <__aeabi_ddiv+0x11e>
 80008ba:	ea41 0100 	orr.w	r1, r1, r0
 80008be:	f04f 0000 	mov.w	r0, #0
 80008c2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008c6:	e7b6      	b.n	8000836 <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008cc:	bf04      	itt	eq
 80008ce:	4301      	orreq	r1, r0
 80008d0:	2000      	moveq	r0, #0
 80008d2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008d6:	bf88      	it	hi
 80008d8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008dc:	f63f aeaf 	bhi.w	800063e <__aeabi_dmul+0xde>
 80008e0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e4:	bf04      	itt	eq
 80008e6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ee:	f150 0000 	adcs.w	r0, r0, #0
 80008f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	pop	{r4, r5, r6, pc}
 80008f8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000900:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000904:	bfc2      	ittt	gt
 8000906:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090e:	bd70      	popgt	{r4, r5, r6, pc}
 8000910:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000914:	f04f 0e00 	mov.w	lr, #0
 8000918:	3c01      	subs	r4, #1
 800091a:	e690      	b.n	800063e <__aeabi_dmul+0xde>
 800091c:	ea45 0e06 	orr.w	lr, r5, r6
 8000920:	e68d      	b.n	800063e <__aeabi_dmul+0xde>
 8000922:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000926:	ea94 0f0c 	teq	r4, ip
 800092a:	bf08      	it	eq
 800092c:	ea95 0f0c 	teqeq	r5, ip
 8000930:	f43f af3b 	beq.w	80007aa <__aeabi_dmul+0x24a>
 8000934:	ea94 0f0c 	teq	r4, ip
 8000938:	d10a      	bne.n	8000950 <__aeabi_ddiv+0x19c>
 800093a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093e:	f47f af34 	bne.w	80007aa <__aeabi_dmul+0x24a>
 8000942:	ea95 0f0c 	teq	r5, ip
 8000946:	f47f af25 	bne.w	8000794 <__aeabi_dmul+0x234>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e72c      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000950:	ea95 0f0c 	teq	r5, ip
 8000954:	d106      	bne.n	8000964 <__aeabi_ddiv+0x1b0>
 8000956:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095a:	f43f aefd 	beq.w	8000758 <__aeabi_dmul+0x1f8>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e722      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000964:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000968:	bf18      	it	ne
 800096a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096e:	f47f aec5 	bne.w	80006fc <__aeabi_dmul+0x19c>
 8000972:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000976:	f47f af0d 	bne.w	8000794 <__aeabi_dmul+0x234>
 800097a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097e:	f47f aeeb 	bne.w	8000758 <__aeabi_dmul+0x1f8>
 8000982:	e712      	b.n	80007aa <__aeabi_dmul+0x24a>

08000984 <__gedf2>:
 8000984:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000988:	e006      	b.n	8000998 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__ledf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	e002      	b.n	8000998 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__cmpdf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	f84d cd04 	str.w	ip, [sp, #-4]!
 800099c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ae:	d01b      	beq.n	80009e8 <__cmpdf2+0x54>
 80009b0:	b001      	add	sp, #4
 80009b2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009b6:	bf0c      	ite	eq
 80009b8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009bc:	ea91 0f03 	teqne	r1, r3
 80009c0:	bf02      	ittt	eq
 80009c2:	ea90 0f02 	teqeq	r0, r2
 80009c6:	2000      	moveq	r0, #0
 80009c8:	4770      	bxeq	lr
 80009ca:	f110 0f00 	cmn.w	r0, #0
 80009ce:	ea91 0f03 	teq	r1, r3
 80009d2:	bf58      	it	pl
 80009d4:	4299      	cmppl	r1, r3
 80009d6:	bf08      	it	eq
 80009d8:	4290      	cmpeq	r0, r2
 80009da:	bf2c      	ite	cs
 80009dc:	17d8      	asrcs	r0, r3, #31
 80009de:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009e2:	f040 0001 	orr.w	r0, r0, #1
 80009e6:	4770      	bx	lr
 80009e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d102      	bne.n	80009f8 <__cmpdf2+0x64>
 80009f2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009f6:	d107      	bne.n	8000a08 <__cmpdf2+0x74>
 80009f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a00:	d1d6      	bne.n	80009b0 <__cmpdf2+0x1c>
 8000a02:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a06:	d0d3      	beq.n	80009b0 <__cmpdf2+0x1c>
 8000a08:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdrcmple>:
 8000a10:	4684      	mov	ip, r0
 8000a12:	4610      	mov	r0, r2
 8000a14:	4662      	mov	r2, ip
 8000a16:	468c      	mov	ip, r1
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4663      	mov	r3, ip
 8000a1c:	e000      	b.n	8000a20 <__aeabi_cdcmpeq>
 8000a1e:	bf00      	nop

08000a20 <__aeabi_cdcmpeq>:
 8000a20:	b501      	push	{r0, lr}
 8000a22:	f7ff ffb7 	bl	8000994 <__cmpdf2>
 8000a26:	2800      	cmp	r0, #0
 8000a28:	bf48      	it	mi
 8000a2a:	f110 0f00 	cmnmi.w	r0, #0
 8000a2e:	bd01      	pop	{r0, pc}

08000a30 <__aeabi_dcmpeq>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff fff4 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a38:	bf0c      	ite	eq
 8000a3a:	2001      	moveq	r0, #1
 8000a3c:	2000      	movne	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_dcmplt>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffea 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a4c:	bf34      	ite	cc
 8000a4e:	2001      	movcc	r0, #1
 8000a50:	2000      	movcs	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmple>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffe0 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a60:	bf94      	ite	ls
 8000a62:	2001      	movls	r0, #1
 8000a64:	2000      	movhi	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmpge>:
 8000a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a70:	f7ff ffce 	bl	8000a10 <__aeabi_cdrcmple>
 8000a74:	bf94      	ite	ls
 8000a76:	2001      	movls	r0, #1
 8000a78:	2000      	movhi	r0, #0
 8000a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7e:	bf00      	nop

08000a80 <__aeabi_dcmpgt>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff ffc4 	bl	8000a10 <__aeabi_cdrcmple>
 8000a88:	bf34      	ite	cc
 8000a8a:	2001      	movcc	r0, #1
 8000a8c:	2000      	movcs	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmpun>:
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x10>
 8000a9e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa2:	d10a      	bne.n	8000aba <__aeabi_dcmpun+0x26>
 8000aa4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	d102      	bne.n	8000ab4 <__aeabi_dcmpun+0x20>
 8000aae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab2:	d102      	bne.n	8000aba <__aeabi_dcmpun+0x26>
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	f04f 0001 	mov.w	r0, #1
 8000abe:	4770      	bx	lr

08000ac0 <__aeabi_uldivmod>:
 8000ac0:	b953      	cbnz	r3, 8000ad8 <__aeabi_uldivmod+0x18>
 8000ac2:	b94a      	cbnz	r2, 8000ad8 <__aeabi_uldivmod+0x18>
 8000ac4:	2900      	cmp	r1, #0
 8000ac6:	bf08      	it	eq
 8000ac8:	2800      	cmpeq	r0, #0
 8000aca:	bf1c      	itt	ne
 8000acc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ad0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ad4:	f000 b972 	b.w	8000dbc <__aeabi_idiv0>
 8000ad8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000adc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ae0:	f000 f806 	bl	8000af0 <__udivmoddi4>
 8000ae4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aec:	b004      	add	sp, #16
 8000aee:	4770      	bx	lr

08000af0 <__udivmoddi4>:
 8000af0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af4:	9e08      	ldr	r6, [sp, #32]
 8000af6:	4604      	mov	r4, r0
 8000af8:	4688      	mov	r8, r1
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d14b      	bne.n	8000b96 <__udivmoddi4+0xa6>
 8000afe:	428a      	cmp	r2, r1
 8000b00:	4615      	mov	r5, r2
 8000b02:	d967      	bls.n	8000bd4 <__udivmoddi4+0xe4>
 8000b04:	fab2 f282 	clz	r2, r2
 8000b08:	b14a      	cbz	r2, 8000b1e <__udivmoddi4+0x2e>
 8000b0a:	f1c2 0720 	rsb	r7, r2, #32
 8000b0e:	fa01 f302 	lsl.w	r3, r1, r2
 8000b12:	fa20 f707 	lsr.w	r7, r0, r7
 8000b16:	4095      	lsls	r5, r2
 8000b18:	ea47 0803 	orr.w	r8, r7, r3
 8000b1c:	4094      	lsls	r4, r2
 8000b1e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b22:	0c23      	lsrs	r3, r4, #16
 8000b24:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b28:	fa1f fc85 	uxth.w	ip, r5
 8000b2c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b30:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b34:	fb07 f10c 	mul.w	r1, r7, ip
 8000b38:	4299      	cmp	r1, r3
 8000b3a:	d909      	bls.n	8000b50 <__udivmoddi4+0x60>
 8000b3c:	18eb      	adds	r3, r5, r3
 8000b3e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000b42:	f080 811b 	bcs.w	8000d7c <__udivmoddi4+0x28c>
 8000b46:	4299      	cmp	r1, r3
 8000b48:	f240 8118 	bls.w	8000d7c <__udivmoddi4+0x28c>
 8000b4c:	3f02      	subs	r7, #2
 8000b4e:	442b      	add	r3, r5
 8000b50:	1a5b      	subs	r3, r3, r1
 8000b52:	b2a4      	uxth	r4, r4
 8000b54:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b58:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b5c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b60:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b64:	45a4      	cmp	ip, r4
 8000b66:	d909      	bls.n	8000b7c <__udivmoddi4+0x8c>
 8000b68:	192c      	adds	r4, r5, r4
 8000b6a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b6e:	f080 8107 	bcs.w	8000d80 <__udivmoddi4+0x290>
 8000b72:	45a4      	cmp	ip, r4
 8000b74:	f240 8104 	bls.w	8000d80 <__udivmoddi4+0x290>
 8000b78:	3802      	subs	r0, #2
 8000b7a:	442c      	add	r4, r5
 8000b7c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b80:	eba4 040c 	sub.w	r4, r4, ip
 8000b84:	2700      	movs	r7, #0
 8000b86:	b11e      	cbz	r6, 8000b90 <__udivmoddi4+0xa0>
 8000b88:	40d4      	lsrs	r4, r2
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	e9c6 4300 	strd	r4, r3, [r6]
 8000b90:	4639      	mov	r1, r7
 8000b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b96:	428b      	cmp	r3, r1
 8000b98:	d909      	bls.n	8000bae <__udivmoddi4+0xbe>
 8000b9a:	2e00      	cmp	r6, #0
 8000b9c:	f000 80eb 	beq.w	8000d76 <__udivmoddi4+0x286>
 8000ba0:	2700      	movs	r7, #0
 8000ba2:	e9c6 0100 	strd	r0, r1, [r6]
 8000ba6:	4638      	mov	r0, r7
 8000ba8:	4639      	mov	r1, r7
 8000baa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bae:	fab3 f783 	clz	r7, r3
 8000bb2:	2f00      	cmp	r7, #0
 8000bb4:	d147      	bne.n	8000c46 <__udivmoddi4+0x156>
 8000bb6:	428b      	cmp	r3, r1
 8000bb8:	d302      	bcc.n	8000bc0 <__udivmoddi4+0xd0>
 8000bba:	4282      	cmp	r2, r0
 8000bbc:	f200 80fa 	bhi.w	8000db4 <__udivmoddi4+0x2c4>
 8000bc0:	1a84      	subs	r4, r0, r2
 8000bc2:	eb61 0303 	sbc.w	r3, r1, r3
 8000bc6:	2001      	movs	r0, #1
 8000bc8:	4698      	mov	r8, r3
 8000bca:	2e00      	cmp	r6, #0
 8000bcc:	d0e0      	beq.n	8000b90 <__udivmoddi4+0xa0>
 8000bce:	e9c6 4800 	strd	r4, r8, [r6]
 8000bd2:	e7dd      	b.n	8000b90 <__udivmoddi4+0xa0>
 8000bd4:	b902      	cbnz	r2, 8000bd8 <__udivmoddi4+0xe8>
 8000bd6:	deff      	udf	#255	; 0xff
 8000bd8:	fab2 f282 	clz	r2, r2
 8000bdc:	2a00      	cmp	r2, #0
 8000bde:	f040 808f 	bne.w	8000d00 <__udivmoddi4+0x210>
 8000be2:	1b49      	subs	r1, r1, r5
 8000be4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000be8:	fa1f f885 	uxth.w	r8, r5
 8000bec:	2701      	movs	r7, #1
 8000bee:	fbb1 fcfe 	udiv	ip, r1, lr
 8000bf2:	0c23      	lsrs	r3, r4, #16
 8000bf4:	fb0e 111c 	mls	r1, lr, ip, r1
 8000bf8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bfc:	fb08 f10c 	mul.w	r1, r8, ip
 8000c00:	4299      	cmp	r1, r3
 8000c02:	d907      	bls.n	8000c14 <__udivmoddi4+0x124>
 8000c04:	18eb      	adds	r3, r5, r3
 8000c06:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c0a:	d202      	bcs.n	8000c12 <__udivmoddi4+0x122>
 8000c0c:	4299      	cmp	r1, r3
 8000c0e:	f200 80cd 	bhi.w	8000dac <__udivmoddi4+0x2bc>
 8000c12:	4684      	mov	ip, r0
 8000c14:	1a59      	subs	r1, r3, r1
 8000c16:	b2a3      	uxth	r3, r4
 8000c18:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c1c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c20:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c24:	fb08 f800 	mul.w	r8, r8, r0
 8000c28:	45a0      	cmp	r8, r4
 8000c2a:	d907      	bls.n	8000c3c <__udivmoddi4+0x14c>
 8000c2c:	192c      	adds	r4, r5, r4
 8000c2e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c32:	d202      	bcs.n	8000c3a <__udivmoddi4+0x14a>
 8000c34:	45a0      	cmp	r8, r4
 8000c36:	f200 80b6 	bhi.w	8000da6 <__udivmoddi4+0x2b6>
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	eba4 0408 	sub.w	r4, r4, r8
 8000c40:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c44:	e79f      	b.n	8000b86 <__udivmoddi4+0x96>
 8000c46:	f1c7 0c20 	rsb	ip, r7, #32
 8000c4a:	40bb      	lsls	r3, r7
 8000c4c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c50:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c54:	fa01 f407 	lsl.w	r4, r1, r7
 8000c58:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c5c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c60:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c64:	4325      	orrs	r5, r4
 8000c66:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c6a:	0c2c      	lsrs	r4, r5, #16
 8000c6c:	fb08 3319 	mls	r3, r8, r9, r3
 8000c70:	fa1f fa8e 	uxth.w	sl, lr
 8000c74:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c78:	fb09 f40a 	mul.w	r4, r9, sl
 8000c7c:	429c      	cmp	r4, r3
 8000c7e:	fa02 f207 	lsl.w	r2, r2, r7
 8000c82:	fa00 f107 	lsl.w	r1, r0, r7
 8000c86:	d90b      	bls.n	8000ca0 <__udivmoddi4+0x1b0>
 8000c88:	eb1e 0303 	adds.w	r3, lr, r3
 8000c8c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000c90:	f080 8087 	bcs.w	8000da2 <__udivmoddi4+0x2b2>
 8000c94:	429c      	cmp	r4, r3
 8000c96:	f240 8084 	bls.w	8000da2 <__udivmoddi4+0x2b2>
 8000c9a:	f1a9 0902 	sub.w	r9, r9, #2
 8000c9e:	4473      	add	r3, lr
 8000ca0:	1b1b      	subs	r3, r3, r4
 8000ca2:	b2ad      	uxth	r5, r5
 8000ca4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ca8:	fb08 3310 	mls	r3, r8, r0, r3
 8000cac:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cb0:	fb00 fa0a 	mul.w	sl, r0, sl
 8000cb4:	45a2      	cmp	sl, r4
 8000cb6:	d908      	bls.n	8000cca <__udivmoddi4+0x1da>
 8000cb8:	eb1e 0404 	adds.w	r4, lr, r4
 8000cbc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cc0:	d26b      	bcs.n	8000d9a <__udivmoddi4+0x2aa>
 8000cc2:	45a2      	cmp	sl, r4
 8000cc4:	d969      	bls.n	8000d9a <__udivmoddi4+0x2aa>
 8000cc6:	3802      	subs	r0, #2
 8000cc8:	4474      	add	r4, lr
 8000cca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cce:	fba0 8902 	umull	r8, r9, r0, r2
 8000cd2:	eba4 040a 	sub.w	r4, r4, sl
 8000cd6:	454c      	cmp	r4, r9
 8000cd8:	46c2      	mov	sl, r8
 8000cda:	464b      	mov	r3, r9
 8000cdc:	d354      	bcc.n	8000d88 <__udivmoddi4+0x298>
 8000cde:	d051      	beq.n	8000d84 <__udivmoddi4+0x294>
 8000ce0:	2e00      	cmp	r6, #0
 8000ce2:	d069      	beq.n	8000db8 <__udivmoddi4+0x2c8>
 8000ce4:	ebb1 050a 	subs.w	r5, r1, sl
 8000ce8:	eb64 0403 	sbc.w	r4, r4, r3
 8000cec:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000cf0:	40fd      	lsrs	r5, r7
 8000cf2:	40fc      	lsrs	r4, r7
 8000cf4:	ea4c 0505 	orr.w	r5, ip, r5
 8000cf8:	e9c6 5400 	strd	r5, r4, [r6]
 8000cfc:	2700      	movs	r7, #0
 8000cfe:	e747      	b.n	8000b90 <__udivmoddi4+0xa0>
 8000d00:	f1c2 0320 	rsb	r3, r2, #32
 8000d04:	fa20 f703 	lsr.w	r7, r0, r3
 8000d08:	4095      	lsls	r5, r2
 8000d0a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d0e:	fa21 f303 	lsr.w	r3, r1, r3
 8000d12:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d16:	4338      	orrs	r0, r7
 8000d18:	0c01      	lsrs	r1, r0, #16
 8000d1a:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d1e:	fa1f f885 	uxth.w	r8, r5
 8000d22:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d26:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d2a:	fb07 f308 	mul.w	r3, r7, r8
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	fa04 f402 	lsl.w	r4, r4, r2
 8000d34:	d907      	bls.n	8000d46 <__udivmoddi4+0x256>
 8000d36:	1869      	adds	r1, r5, r1
 8000d38:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000d3c:	d22f      	bcs.n	8000d9e <__udivmoddi4+0x2ae>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d92d      	bls.n	8000d9e <__udivmoddi4+0x2ae>
 8000d42:	3f02      	subs	r7, #2
 8000d44:	4429      	add	r1, r5
 8000d46:	1acb      	subs	r3, r1, r3
 8000d48:	b281      	uxth	r1, r0
 8000d4a:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d4e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d52:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d56:	fb00 f308 	mul.w	r3, r0, r8
 8000d5a:	428b      	cmp	r3, r1
 8000d5c:	d907      	bls.n	8000d6e <__udivmoddi4+0x27e>
 8000d5e:	1869      	adds	r1, r5, r1
 8000d60:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000d64:	d217      	bcs.n	8000d96 <__udivmoddi4+0x2a6>
 8000d66:	428b      	cmp	r3, r1
 8000d68:	d915      	bls.n	8000d96 <__udivmoddi4+0x2a6>
 8000d6a:	3802      	subs	r0, #2
 8000d6c:	4429      	add	r1, r5
 8000d6e:	1ac9      	subs	r1, r1, r3
 8000d70:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d74:	e73b      	b.n	8000bee <__udivmoddi4+0xfe>
 8000d76:	4637      	mov	r7, r6
 8000d78:	4630      	mov	r0, r6
 8000d7a:	e709      	b.n	8000b90 <__udivmoddi4+0xa0>
 8000d7c:	4607      	mov	r7, r0
 8000d7e:	e6e7      	b.n	8000b50 <__udivmoddi4+0x60>
 8000d80:	4618      	mov	r0, r3
 8000d82:	e6fb      	b.n	8000b7c <__udivmoddi4+0x8c>
 8000d84:	4541      	cmp	r1, r8
 8000d86:	d2ab      	bcs.n	8000ce0 <__udivmoddi4+0x1f0>
 8000d88:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d8c:	eb69 020e 	sbc.w	r2, r9, lr
 8000d90:	3801      	subs	r0, #1
 8000d92:	4613      	mov	r3, r2
 8000d94:	e7a4      	b.n	8000ce0 <__udivmoddi4+0x1f0>
 8000d96:	4660      	mov	r0, ip
 8000d98:	e7e9      	b.n	8000d6e <__udivmoddi4+0x27e>
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	e795      	b.n	8000cca <__udivmoddi4+0x1da>
 8000d9e:	4667      	mov	r7, ip
 8000da0:	e7d1      	b.n	8000d46 <__udivmoddi4+0x256>
 8000da2:	4681      	mov	r9, r0
 8000da4:	e77c      	b.n	8000ca0 <__udivmoddi4+0x1b0>
 8000da6:	3802      	subs	r0, #2
 8000da8:	442c      	add	r4, r5
 8000daa:	e747      	b.n	8000c3c <__udivmoddi4+0x14c>
 8000dac:	f1ac 0c02 	sub.w	ip, ip, #2
 8000db0:	442b      	add	r3, r5
 8000db2:	e72f      	b.n	8000c14 <__udivmoddi4+0x124>
 8000db4:	4638      	mov	r0, r7
 8000db6:	e708      	b.n	8000bca <__udivmoddi4+0xda>
 8000db8:	4637      	mov	r7, r6
 8000dba:	e6e9      	b.n	8000b90 <__udivmoddi4+0xa0>

08000dbc <__aeabi_idiv0>:
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop

08000dc0 <initSDcard>:

static const char* file_name = "data.csv";
static const uint32_t WsPerkWh = 3600000;
static uint32_t row_index = 0;

static void initSDcard() {
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
	BYTE opt = 1;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	73fb      	strb	r3, [r7, #15]
	int status = f_mount(&SDFatFS, SDPath, opt);
 8000dca:	7bfb      	ldrb	r3, [r7, #15]
 8000dcc:	461a      	mov	r2, r3
 8000dce:	4912      	ldr	r1, [pc, #72]	; (8000e18 <initSDcard+0x58>)
 8000dd0:	4812      	ldr	r0, [pc, #72]	; (8000e1c <initSDcard+0x5c>)
 8000dd2:	f007 fe57 	bl	8008a84 <f_mount>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	60bb      	str	r3, [r7, #8]
	status = f_open(&SDFile, file_name, FA_WRITE | FA_CREATE_NEW);
 8000dda:	4b11      	ldr	r3, [pc, #68]	; (8000e20 <initSDcard+0x60>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	2206      	movs	r2, #6
 8000de0:	4619      	mov	r1, r3
 8000de2:	4810      	ldr	r0, [pc, #64]	; (8000e24 <initSDcard+0x64>)
 8000de4:	f007 fe94 	bl	8008b10 <f_open>
 8000de8:	4603      	mov	r3, r0
 8000dea:	60bb      	str	r3, [r7, #8]
	if (FR_OK == status) {
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d10d      	bne.n	8000e0e <initSDcard+0x4e>
		unsigned int wbytes;
		const char* init_row = "Index, nazwa, czas zdarzenia, czas trwania, avr. I [A], Energia [kWh]\n";
 8000df2:	4b0d      	ldr	r3, [pc, #52]	; (8000e28 <initSDcard+0x68>)
 8000df4:	607b      	str	r3, [r7, #4]
		f_write(&SDFile, init_row, strlen(init_row), &wbytes);
 8000df6:	6878      	ldr	r0, [r7, #4]
 8000df8:	f7ff f9ee 	bl	80001d8 <strlen>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	463b      	mov	r3, r7
 8000e00:	6879      	ldr	r1, [r7, #4]
 8000e02:	4808      	ldr	r0, [pc, #32]	; (8000e24 <initSDcard+0x64>)
 8000e04:	f008 f850 	bl	8008ea8 <f_write>
		f_close(&SDFile);
 8000e08:	4806      	ldr	r0, [pc, #24]	; (8000e24 <initSDcard+0x64>)
 8000e0a:	f008 fa5f 	bl	80092cc <f_close>
	}
}
 8000e0e:	bf00      	nop
 8000e10:	3710      	adds	r7, #16
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	20001c34 	.word	0x20001c34
 8000e1c:	20002c68 	.word	0x20002c68
 8000e20:	20000000 	.word	0x20000000
 8000e24:	20001c38 	.word	0x20001c38
 8000e28:	0800a6dc 	.word	0x0800a6dc
 8000e2c:	00000000 	.word	0x00000000

08000e30 <itoFractional>:

static void itoFractional(uint32_t num, uint32_t precision_positions, char* buf) {
 8000e30:	b5b0      	push	{r4, r5, r7, lr}
 8000e32:	b088      	sub	sp, #32
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	60f8      	str	r0, [r7, #12]
 8000e38:	60b9      	str	r1, [r7, #8]
 8000e3a:	607a      	str	r2, [r7, #4]
	if (num < pow(10, precision_positions)) {
 8000e3c:	68f8      	ldr	r0, [r7, #12]
 8000e3e:	f7ff fb15 	bl	800046c <__aeabi_ui2d>
 8000e42:	4604      	mov	r4, r0
 8000e44:	460d      	mov	r5, r1
 8000e46:	68b8      	ldr	r0, [r7, #8]
 8000e48:	f7ff fb10 	bl	800046c <__aeabi_ui2d>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	460b      	mov	r3, r1
 8000e50:	ec43 2b11 	vmov	d1, r2, r3
 8000e54:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8000ee0 <itoFractional+0xb0>
 8000e58:	f008 fbd4 	bl	8009604 <pow>
 8000e5c:	ec53 2b10 	vmov	r2, r3, d0
 8000e60:	4620      	mov	r0, r4
 8000e62:	4629      	mov	r1, r5
 8000e64:	f7ff fdee 	bl	8000a44 <__aeabi_dcmplt>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d100      	bne.n	8000e70 <itoFractional+0x40>
		for (uint32_t i=0; i<refill; i++ ){
			strcat(buf, "0");
		}
		strcat(buf, numBuf);
	}
}
 8000e6e:	e033      	b.n	8000ed8 <itoFractional+0xa8>
		char* numBuf = alloca(precision_positions+1);
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	3301      	adds	r3, #1
 8000e74:	3307      	adds	r3, #7
 8000e76:	3307      	adds	r3, #7
 8000e78:	08db      	lsrs	r3, r3, #3
 8000e7a:	00db      	lsls	r3, r3, #3
 8000e7c:	ebad 0d03 	sub.w	sp, sp, r3
 8000e80:	466b      	mov	r3, sp
 8000e82:	3307      	adds	r3, #7
 8000e84:	08db      	lsrs	r3, r3, #3
 8000e86:	00db      	lsls	r3, r3, #3
 8000e88:	61bb      	str	r3, [r7, #24]
		itoa(num, numBuf, 10);
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	220a      	movs	r2, #10
 8000e8e:	69b9      	ldr	r1, [r7, #24]
 8000e90:	4618      	mov	r0, r3
 8000e92:	f008 fae3 	bl	800945c <itoa>
		uint32_t refill = precision_positions - strlen(numBuf);
 8000e96:	69b8      	ldr	r0, [r7, #24]
 8000e98:	f7ff f99e 	bl	80001d8 <strlen>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	1a9b      	subs	r3, r3, r2
 8000ea2:	617b      	str	r3, [r7, #20]
		for (uint32_t i=0; i<refill; i++ ){
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	61fb      	str	r3, [r7, #28]
 8000ea8:	e00e      	b.n	8000ec8 <itoFractional+0x98>
			strcat(buf, "0");
 8000eaa:	6878      	ldr	r0, [r7, #4]
 8000eac:	f7ff f994 	bl	80001d8 <strlen>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	490b      	ldr	r1, [pc, #44]	; (8000ee8 <itoFractional+0xb8>)
 8000eba:	461a      	mov	r2, r3
 8000ebc:	460b      	mov	r3, r1
 8000ebe:	881b      	ldrh	r3, [r3, #0]
 8000ec0:	8013      	strh	r3, [r2, #0]
		for (uint32_t i=0; i<refill; i++ ){
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	61fb      	str	r3, [r7, #28]
 8000ec8:	69fa      	ldr	r2, [r7, #28]
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	d3ec      	bcc.n	8000eaa <itoFractional+0x7a>
		strcat(buf, numBuf);
 8000ed0:	69b9      	ldr	r1, [r7, #24]
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f008 fb3e 	bl	8009554 <strcat>
}
 8000ed8:	bf00      	nop
 8000eda:	3720      	adds	r7, #32
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bdb0      	pop	{r4, r5, r7, pc}
 8000ee0:	00000000 	.word	0x00000000
 8000ee4:	40240000 	.word	0x40240000
 8000ee8:	0800a724 	.word	0x0800a724

08000eec <ftoa>:

static char* ftoa(float num, char* buf) {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b086      	sub	sp, #24
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	ed87 0a01 	vstr	s0, [r7, #4]
 8000ef6:	6038      	str	r0, [r7, #0]
	int numFicedPoint = num*1000;
 8000ef8:	edd7 7a01 	vldr	s15, [r7, #4]
 8000efc:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8000fd4 <ftoa+0xe8>
 8000f00:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f08:	ee17 3a90 	vmov	r3, s15
 8000f0c:	617b      	str	r3, [r7, #20]
	char numBuf[12] = {0};
 8000f0e:	f107 0308 	add.w	r3, r7, #8
 8000f12:	2200      	movs	r2, #0
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	605a      	str	r2, [r3, #4]
 8000f18:	609a      	str	r2, [r3, #8]
	itoa(numFicedPoint/1000, numBuf, 10);
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	4a2e      	ldr	r2, [pc, #184]	; (8000fd8 <ftoa+0xec>)
 8000f1e:	fb82 1203 	smull	r1, r2, r2, r3
 8000f22:	1192      	asrs	r2, r2, #6
 8000f24:	17db      	asrs	r3, r3, #31
 8000f26:	1ad3      	subs	r3, r2, r3
 8000f28:	f107 0108 	add.w	r1, r7, #8
 8000f2c:	220a      	movs	r2, #10
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f008 fa94 	bl	800945c <itoa>
	strcat(buf, "\"");
 8000f34:	6838      	ldr	r0, [r7, #0]
 8000f36:	f7ff f94f 	bl	80001d8 <strlen>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	4413      	add	r3, r2
 8000f42:	4926      	ldr	r1, [pc, #152]	; (8000fdc <ftoa+0xf0>)
 8000f44:	461a      	mov	r2, r3
 8000f46:	460b      	mov	r3, r1
 8000f48:	881b      	ldrh	r3, [r3, #0]
 8000f4a:	8013      	strh	r3, [r2, #0]
	strcat(buf, numBuf); strcat(buf, ",");
 8000f4c:	f107 0308 	add.w	r3, r7, #8
 8000f50:	4619      	mov	r1, r3
 8000f52:	6838      	ldr	r0, [r7, #0]
 8000f54:	f008 fafe 	bl	8009554 <strcat>
 8000f58:	6838      	ldr	r0, [r7, #0]
 8000f5a:	f7ff f93d 	bl	80001d8 <strlen>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	461a      	mov	r2, r3
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	4413      	add	r3, r2
 8000f66:	491e      	ldr	r1, [pc, #120]	; (8000fe0 <ftoa+0xf4>)
 8000f68:	461a      	mov	r2, r3
 8000f6a:	460b      	mov	r3, r1
 8000f6c:	881b      	ldrh	r3, [r3, #0]
 8000f6e:	8013      	strh	r3, [r2, #0]
	memset(numBuf, 0, sizeof(numBuf));
 8000f70:	f107 0308 	add.w	r3, r7, #8
 8000f74:	220c      	movs	r2, #12
 8000f76:	2100      	movs	r1, #0
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f008 fa79 	bl	8009470 <memset>
	itoFractional(numFicedPoint%1000, 3, numBuf);
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	4a15      	ldr	r2, [pc, #84]	; (8000fd8 <ftoa+0xec>)
 8000f82:	fb82 1203 	smull	r1, r2, r2, r3
 8000f86:	1191      	asrs	r1, r2, #6
 8000f88:	17da      	asrs	r2, r3, #31
 8000f8a:	1a8a      	subs	r2, r1, r2
 8000f8c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f90:	fb01 f202 	mul.w	r2, r1, r2
 8000f94:	1a9a      	subs	r2, r3, r2
 8000f96:	4610      	mov	r0, r2
 8000f98:	f107 0308 	add.w	r3, r7, #8
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	2103      	movs	r1, #3
 8000fa0:	f7ff ff46 	bl	8000e30 <itoFractional>
	strcat(buf, numBuf);
 8000fa4:	f107 0308 	add.w	r3, r7, #8
 8000fa8:	4619      	mov	r1, r3
 8000faa:	6838      	ldr	r0, [r7, #0]
 8000fac:	f008 fad2 	bl	8009554 <strcat>
	strcat(buf, "\"");
 8000fb0:	6838      	ldr	r0, [r7, #0]
 8000fb2:	f7ff f911 	bl	80001d8 <strlen>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	461a      	mov	r2, r3
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	4413      	add	r3, r2
 8000fbe:	4907      	ldr	r1, [pc, #28]	; (8000fdc <ftoa+0xf0>)
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	460b      	mov	r3, r1
 8000fc4:	881b      	ldrh	r3, [r3, #0]
 8000fc6:	8013      	strh	r3, [r2, #0]
	return buf;
 8000fc8:	683b      	ldr	r3, [r7, #0]
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3718      	adds	r7, #24
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	447a0000 	.word	0x447a0000
 8000fd8:	10624dd3 	.word	0x10624dd3
 8000fdc:	0800a728 	.word	0x0800a728
 8000fe0:	0800a72c 	.word	0x0800a72c

08000fe4 <convertTime>:

static char* convertTime(uint32_t time_ms, char* buf) {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b08a      	sub	sp, #40	; 0x28
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	6039      	str	r1, [r7, #0]
	uint32_t ms = time_ms%1000;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4a61      	ldr	r2, [pc, #388]	; (8001178 <convertTime+0x194>)
 8000ff2:	fba2 1203 	umull	r1, r2, r2, r3
 8000ff6:	0992      	lsrs	r2, r2, #6
 8000ff8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ffc:	fb01 f202 	mul.w	r2, r1, r2
 8001000:	1a9b      	subs	r3, r3, r2
 8001002:	627b      	str	r3, [r7, #36]	; 0x24
	time_ms /= 1000;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	4a5c      	ldr	r2, [pc, #368]	; (8001178 <convertTime+0x194>)
 8001008:	fba2 2303 	umull	r2, r3, r2, r3
 800100c:	099b      	lsrs	r3, r3, #6
 800100e:	607b      	str	r3, [r7, #4]
	uint32_t s = time_ms%60;
 8001010:	687a      	ldr	r2, [r7, #4]
 8001012:	4b5a      	ldr	r3, [pc, #360]	; (800117c <convertTime+0x198>)
 8001014:	fba3 1302 	umull	r1, r3, r3, r2
 8001018:	0959      	lsrs	r1, r3, #5
 800101a:	460b      	mov	r3, r1
 800101c:	011b      	lsls	r3, r3, #4
 800101e:	1a5b      	subs	r3, r3, r1
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	1ad3      	subs	r3, r2, r3
 8001024:	623b      	str	r3, [r7, #32]
	time_ms /= 60;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a54      	ldr	r2, [pc, #336]	; (800117c <convertTime+0x198>)
 800102a:	fba2 2303 	umull	r2, r3, r2, r3
 800102e:	095b      	lsrs	r3, r3, #5
 8001030:	607b      	str	r3, [r7, #4]
	uint32_t m = time_ms%60;
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	4b51      	ldr	r3, [pc, #324]	; (800117c <convertTime+0x198>)
 8001036:	fba3 1302 	umull	r1, r3, r3, r2
 800103a:	0959      	lsrs	r1, r3, #5
 800103c:	460b      	mov	r3, r1
 800103e:	011b      	lsls	r3, r3, #4
 8001040:	1a5b      	subs	r3, r3, r1
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	1ad3      	subs	r3, r2, r3
 8001046:	61fb      	str	r3, [r7, #28]
	time_ms /= 60;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	4a4c      	ldr	r2, [pc, #304]	; (800117c <convertTime+0x198>)
 800104c:	fba2 2303 	umull	r2, r3, r2, r3
 8001050:	095b      	lsrs	r3, r3, #5
 8001052:	607b      	str	r3, [r7, #4]
	uint32_t h = time_ms;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	61bb      	str	r3, [r7, #24]
	char numBuf[9] = {0};
 8001058:	f107 030c 	add.w	r3, r7, #12
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	721a      	strb	r2, [r3, #8]
	itoa(h, numBuf, 10);
 8001064:	69bb      	ldr	r3, [r7, #24]
 8001066:	f107 010c 	add.w	r1, r7, #12
 800106a:	220a      	movs	r2, #10
 800106c:	4618      	mov	r0, r3
 800106e:	f008 f9f5 	bl	800945c <itoa>
	strcat(buf, "\"");
 8001072:	6838      	ldr	r0, [r7, #0]
 8001074:	f7ff f8b0 	bl	80001d8 <strlen>
 8001078:	4603      	mov	r3, r0
 800107a:	461a      	mov	r2, r3
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	4413      	add	r3, r2
 8001080:	493f      	ldr	r1, [pc, #252]	; (8001180 <convertTime+0x19c>)
 8001082:	461a      	mov	r2, r3
 8001084:	460b      	mov	r3, r1
 8001086:	881b      	ldrh	r3, [r3, #0]
 8001088:	8013      	strh	r3, [r2, #0]
	strcat(buf, numBuf); strcat(buf, ":"); memset(numBuf, 0, sizeof(numBuf));
 800108a:	f107 030c 	add.w	r3, r7, #12
 800108e:	4619      	mov	r1, r3
 8001090:	6838      	ldr	r0, [r7, #0]
 8001092:	f008 fa5f 	bl	8009554 <strcat>
 8001096:	6838      	ldr	r0, [r7, #0]
 8001098:	f7ff f89e 	bl	80001d8 <strlen>
 800109c:	4603      	mov	r3, r0
 800109e:	461a      	mov	r2, r3
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	4413      	add	r3, r2
 80010a4:	4937      	ldr	r1, [pc, #220]	; (8001184 <convertTime+0x1a0>)
 80010a6:	461a      	mov	r2, r3
 80010a8:	460b      	mov	r3, r1
 80010aa:	881b      	ldrh	r3, [r3, #0]
 80010ac:	8013      	strh	r3, [r2, #0]
 80010ae:	f107 030c 	add.w	r3, r7, #12
 80010b2:	2209      	movs	r2, #9
 80010b4:	2100      	movs	r1, #0
 80010b6:	4618      	mov	r0, r3
 80010b8:	f008 f9da 	bl	8009470 <memset>
	itoa(m, numBuf, 10);
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	f107 010c 	add.w	r1, r7, #12
 80010c2:	220a      	movs	r2, #10
 80010c4:	4618      	mov	r0, r3
 80010c6:	f008 f9c9 	bl	800945c <itoa>
	strcat(buf, numBuf); strcat(buf, ":"); memset(numBuf, 0, sizeof(numBuf));
 80010ca:	f107 030c 	add.w	r3, r7, #12
 80010ce:	4619      	mov	r1, r3
 80010d0:	6838      	ldr	r0, [r7, #0]
 80010d2:	f008 fa3f 	bl	8009554 <strcat>
 80010d6:	6838      	ldr	r0, [r7, #0]
 80010d8:	f7ff f87e 	bl	80001d8 <strlen>
 80010dc:	4603      	mov	r3, r0
 80010de:	461a      	mov	r2, r3
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	4413      	add	r3, r2
 80010e4:	4927      	ldr	r1, [pc, #156]	; (8001184 <convertTime+0x1a0>)
 80010e6:	461a      	mov	r2, r3
 80010e8:	460b      	mov	r3, r1
 80010ea:	881b      	ldrh	r3, [r3, #0]
 80010ec:	8013      	strh	r3, [r2, #0]
 80010ee:	f107 030c 	add.w	r3, r7, #12
 80010f2:	2209      	movs	r2, #9
 80010f4:	2100      	movs	r1, #0
 80010f6:	4618      	mov	r0, r3
 80010f8:	f008 f9ba 	bl	8009470 <memset>
	itoa(s, numBuf, 10);
 80010fc:	6a3b      	ldr	r3, [r7, #32]
 80010fe:	f107 010c 	add.w	r1, r7, #12
 8001102:	220a      	movs	r2, #10
 8001104:	4618      	mov	r0, r3
 8001106:	f008 f9a9 	bl	800945c <itoa>
	strcat(buf, numBuf); strcat(buf, ","); memset(numBuf, 0, sizeof(numBuf));
 800110a:	f107 030c 	add.w	r3, r7, #12
 800110e:	4619      	mov	r1, r3
 8001110:	6838      	ldr	r0, [r7, #0]
 8001112:	f008 fa1f 	bl	8009554 <strcat>
 8001116:	6838      	ldr	r0, [r7, #0]
 8001118:	f7ff f85e 	bl	80001d8 <strlen>
 800111c:	4603      	mov	r3, r0
 800111e:	461a      	mov	r2, r3
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	4413      	add	r3, r2
 8001124:	4918      	ldr	r1, [pc, #96]	; (8001188 <convertTime+0x1a4>)
 8001126:	461a      	mov	r2, r3
 8001128:	460b      	mov	r3, r1
 800112a:	881b      	ldrh	r3, [r3, #0]
 800112c:	8013      	strh	r3, [r2, #0]
 800112e:	f107 030c 	add.w	r3, r7, #12
 8001132:	2209      	movs	r2, #9
 8001134:	2100      	movs	r1, #0
 8001136:	4618      	mov	r0, r3
 8001138:	f008 f99a 	bl	8009470 <memset>
	itoFractional(ms, 3, numBuf);
 800113c:	f107 030c 	add.w	r3, r7, #12
 8001140:	461a      	mov	r2, r3
 8001142:	2103      	movs	r1, #3
 8001144:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001146:	f7ff fe73 	bl	8000e30 <itoFractional>
	strcat(buf, numBuf);
 800114a:	f107 030c 	add.w	r3, r7, #12
 800114e:	4619      	mov	r1, r3
 8001150:	6838      	ldr	r0, [r7, #0]
 8001152:	f008 f9ff 	bl	8009554 <strcat>
	strcat(buf, "\"");
 8001156:	6838      	ldr	r0, [r7, #0]
 8001158:	f7ff f83e 	bl	80001d8 <strlen>
 800115c:	4603      	mov	r3, r0
 800115e:	461a      	mov	r2, r3
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	4413      	add	r3, r2
 8001164:	4906      	ldr	r1, [pc, #24]	; (8001180 <convertTime+0x19c>)
 8001166:	461a      	mov	r2, r3
 8001168:	460b      	mov	r3, r1
 800116a:	881b      	ldrh	r3, [r3, #0]
 800116c:	8013      	strh	r3, [r2, #0]
	return buf;
 800116e:	683b      	ldr	r3, [r7, #0]
}
 8001170:	4618      	mov	r0, r3
 8001172:	3728      	adds	r7, #40	; 0x28
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	10624dd3 	.word	0x10624dd3
 800117c:	88888889 	.word	0x88888889
 8001180:	0800a728 	.word	0x0800a728
 8001184:	0800a730 	.word	0x0800a730
 8001188:	0800a72c 	.word	0x0800a72c

0800118c <recordData>:

static void recordData(const char* name, uint32_t start_time, uint32_t duration, float averageCurrent, float energy) {
 800118c:	b580      	push	{r7, lr}
 800118e:	b0b0      	sub	sp, #192	; 0xc0
 8001190:	af00      	add	r7, sp, #0
 8001192:	6178      	str	r0, [r7, #20]
 8001194:	6139      	str	r1, [r7, #16]
 8001196:	60fa      	str	r2, [r7, #12]
 8001198:	ed87 0a02 	vstr	s0, [r7, #8]
 800119c:	edc7 0a01 	vstr	s1, [r7, #4]
	unsigned int wbytes;
	BYTE opt = 1;
 80011a0:	2301      	movs	r3, #1
 80011a2:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
	int status = f_mount(&SDFatFS, SDPath, opt);
 80011a6:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 80011aa:	461a      	mov	r2, r3
 80011ac:	4983      	ldr	r1, [pc, #524]	; (80013bc <recordData+0x230>)
 80011ae:	4884      	ldr	r0, [pc, #528]	; (80013c0 <recordData+0x234>)
 80011b0:	f007 fc68 	bl	8008a84 <f_mount>
 80011b4:	4603      	mov	r3, r0
 80011b6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	status = f_open(&SDFile, file_name, FA_WRITE | FA_OPEN_APPEND);
 80011ba:	4b82      	ldr	r3, [pc, #520]	; (80013c4 <recordData+0x238>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	2232      	movs	r2, #50	; 0x32
 80011c0:	4619      	mov	r1, r3
 80011c2:	4881      	ldr	r0, [pc, #516]	; (80013c8 <recordData+0x23c>)
 80011c4:	f007 fca4 	bl	8008b10 <f_open>
 80011c8:	4603      	mov	r3, r0
 80011ca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

	if (FR_OK == status) {
 80011ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	f040 80ee 	bne.w	80013b4 <recordData+0x228>
		char strBuf[128] = {0};
 80011d8:	f107 031c 	add.w	r3, r7, #28
 80011dc:	2280      	movs	r2, #128	; 0x80
 80011de:	2100      	movs	r1, #0
 80011e0:	4618      	mov	r0, r3
 80011e2:	f008 f945 	bl	8009470 <memset>
		char tempBuf[24] = {0};
 80011e6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011ea:	2200      	movs	r2, #0
 80011ec:	601a      	str	r2, [r3, #0]
 80011ee:	605a      	str	r2, [r3, #4]
 80011f0:	609a      	str	r2, [r3, #8]
 80011f2:	60da      	str	r2, [r3, #12]
 80011f4:	611a      	str	r2, [r3, #16]
 80011f6:	615a      	str	r2, [r3, #20]
		itoa(row_index++, tempBuf, 10);
 80011f8:	4b74      	ldr	r3, [pc, #464]	; (80013cc <recordData+0x240>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	1c5a      	adds	r2, r3, #1
 80011fe:	4973      	ldr	r1, [pc, #460]	; (80013cc <recordData+0x240>)
 8001200:	600a      	str	r2, [r1, #0]
 8001202:	4618      	mov	r0, r3
 8001204:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001208:	220a      	movs	r2, #10
 800120a:	4619      	mov	r1, r3
 800120c:	f008 f926 	bl	800945c <itoa>
		strcat(strBuf, tempBuf);
 8001210:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8001214:	f107 031c 	add.w	r3, r7, #28
 8001218:	4611      	mov	r1, r2
 800121a:	4618      	mov	r0, r3
 800121c:	f008 f99a 	bl	8009554 <strcat>
		strcat(strBuf, ", ");
 8001220:	f107 031c 	add.w	r3, r7, #28
 8001224:	4618      	mov	r0, r3
 8001226:	f7fe ffd7 	bl	80001d8 <strlen>
 800122a:	4603      	mov	r3, r0
 800122c:	461a      	mov	r2, r3
 800122e:	f107 031c 	add.w	r3, r7, #28
 8001232:	4413      	add	r3, r2
 8001234:	4a66      	ldr	r2, [pc, #408]	; (80013d0 <recordData+0x244>)
 8001236:	8811      	ldrh	r1, [r2, #0]
 8001238:	7892      	ldrb	r2, [r2, #2]
 800123a:	8019      	strh	r1, [r3, #0]
 800123c:	709a      	strb	r2, [r3, #2]
		strcat(strBuf, name);
 800123e:	f107 031c 	add.w	r3, r7, #28
 8001242:	6979      	ldr	r1, [r7, #20]
 8001244:	4618      	mov	r0, r3
 8001246:	f008 f985 	bl	8009554 <strcat>
		strcat(strBuf, ", ");
 800124a:	f107 031c 	add.w	r3, r7, #28
 800124e:	4618      	mov	r0, r3
 8001250:	f7fe ffc2 	bl	80001d8 <strlen>
 8001254:	4603      	mov	r3, r0
 8001256:	461a      	mov	r2, r3
 8001258:	f107 031c 	add.w	r3, r7, #28
 800125c:	4413      	add	r3, r2
 800125e:	4a5c      	ldr	r2, [pc, #368]	; (80013d0 <recordData+0x244>)
 8001260:	8811      	ldrh	r1, [r2, #0]
 8001262:	7892      	ldrb	r2, [r2, #2]
 8001264:	8019      	strh	r1, [r3, #0]
 8001266:	709a      	strb	r2, [r3, #2]
		memset(tempBuf, 0, sizeof(tempBuf));
 8001268:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800126c:	2218      	movs	r2, #24
 800126e:	2100      	movs	r1, #0
 8001270:	4618      	mov	r0, r3
 8001272:	f008 f8fd 	bl	8009470 <memset>
		strcat(strBuf, convertTime(start_time, tempBuf));
 8001276:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800127a:	4619      	mov	r1, r3
 800127c:	6938      	ldr	r0, [r7, #16]
 800127e:	f7ff feb1 	bl	8000fe4 <convertTime>
 8001282:	4602      	mov	r2, r0
 8001284:	f107 031c 	add.w	r3, r7, #28
 8001288:	4611      	mov	r1, r2
 800128a:	4618      	mov	r0, r3
 800128c:	f008 f962 	bl	8009554 <strcat>
		strcat(strBuf, ", ");
 8001290:	f107 031c 	add.w	r3, r7, #28
 8001294:	4618      	mov	r0, r3
 8001296:	f7fe ff9f 	bl	80001d8 <strlen>
 800129a:	4603      	mov	r3, r0
 800129c:	461a      	mov	r2, r3
 800129e:	f107 031c 	add.w	r3, r7, #28
 80012a2:	4413      	add	r3, r2
 80012a4:	4a4a      	ldr	r2, [pc, #296]	; (80013d0 <recordData+0x244>)
 80012a6:	8811      	ldrh	r1, [r2, #0]
 80012a8:	7892      	ldrb	r2, [r2, #2]
 80012aa:	8019      	strh	r1, [r3, #0]
 80012ac:	709a      	strb	r2, [r3, #2]
		memset(tempBuf, 0, sizeof(tempBuf));
 80012ae:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80012b2:	2218      	movs	r2, #24
 80012b4:	2100      	movs	r1, #0
 80012b6:	4618      	mov	r0, r3
 80012b8:	f008 f8da 	bl	8009470 <memset>
		strcat(strBuf, convertTime(duration, tempBuf));
 80012bc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80012c0:	4619      	mov	r1, r3
 80012c2:	68f8      	ldr	r0, [r7, #12]
 80012c4:	f7ff fe8e 	bl	8000fe4 <convertTime>
 80012c8:	4602      	mov	r2, r0
 80012ca:	f107 031c 	add.w	r3, r7, #28
 80012ce:	4611      	mov	r1, r2
 80012d0:	4618      	mov	r0, r3
 80012d2:	f008 f93f 	bl	8009554 <strcat>
		strcat(strBuf, ", ");
 80012d6:	f107 031c 	add.w	r3, r7, #28
 80012da:	4618      	mov	r0, r3
 80012dc:	f7fe ff7c 	bl	80001d8 <strlen>
 80012e0:	4603      	mov	r3, r0
 80012e2:	461a      	mov	r2, r3
 80012e4:	f107 031c 	add.w	r3, r7, #28
 80012e8:	4413      	add	r3, r2
 80012ea:	4a39      	ldr	r2, [pc, #228]	; (80013d0 <recordData+0x244>)
 80012ec:	8811      	ldrh	r1, [r2, #0]
 80012ee:	7892      	ldrb	r2, [r2, #2]
 80012f0:	8019      	strh	r1, [r3, #0]
 80012f2:	709a      	strb	r2, [r3, #2]
		memset(tempBuf, 0, sizeof(tempBuf));
 80012f4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80012f8:	2218      	movs	r2, #24
 80012fa:	2100      	movs	r1, #0
 80012fc:	4618      	mov	r0, r3
 80012fe:	f008 f8b7 	bl	8009470 <memset>
		strcat(strBuf, ftoa(averageCurrent, tempBuf));
 8001302:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001306:	4618      	mov	r0, r3
 8001308:	ed97 0a02 	vldr	s0, [r7, #8]
 800130c:	f7ff fdee 	bl	8000eec <ftoa>
 8001310:	4602      	mov	r2, r0
 8001312:	f107 031c 	add.w	r3, r7, #28
 8001316:	4611      	mov	r1, r2
 8001318:	4618      	mov	r0, r3
 800131a:	f008 f91b 	bl	8009554 <strcat>
		strcat(strBuf, ", ");
 800131e:	f107 031c 	add.w	r3, r7, #28
 8001322:	4618      	mov	r0, r3
 8001324:	f7fe ff58 	bl	80001d8 <strlen>
 8001328:	4603      	mov	r3, r0
 800132a:	461a      	mov	r2, r3
 800132c:	f107 031c 	add.w	r3, r7, #28
 8001330:	4413      	add	r3, r2
 8001332:	4a27      	ldr	r2, [pc, #156]	; (80013d0 <recordData+0x244>)
 8001334:	8811      	ldrh	r1, [r2, #0]
 8001336:	7892      	ldrb	r2, [r2, #2]
 8001338:	8019      	strh	r1, [r3, #0]
 800133a:	709a      	strb	r2, [r3, #2]
		memset(tempBuf, 0, sizeof(tempBuf));
 800133c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001340:	2218      	movs	r2, #24
 8001342:	2100      	movs	r1, #0
 8001344:	4618      	mov	r0, r3
 8001346:	f008 f893 	bl	8009470 <memset>
		strcat(strBuf, ftoa(energy/WsPerkWh, tempBuf));
 800134a:	eddf 7a22 	vldr	s15, [pc, #136]	; 80013d4 <recordData+0x248>
 800134e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001352:	ed97 7a01 	vldr	s14, [r7, #4]
 8001356:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800135a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800135e:	4618      	mov	r0, r3
 8001360:	eeb0 0a66 	vmov.f32	s0, s13
 8001364:	f7ff fdc2 	bl	8000eec <ftoa>
 8001368:	4602      	mov	r2, r0
 800136a:	f107 031c 	add.w	r3, r7, #28
 800136e:	4611      	mov	r1, r2
 8001370:	4618      	mov	r0, r3
 8001372:	f008 f8ef 	bl	8009554 <strcat>
		strcat(strBuf, "\n");
 8001376:	f107 031c 	add.w	r3, r7, #28
 800137a:	4618      	mov	r0, r3
 800137c:	f7fe ff2c 	bl	80001d8 <strlen>
 8001380:	4603      	mov	r3, r0
 8001382:	461a      	mov	r2, r3
 8001384:	f107 031c 	add.w	r3, r7, #28
 8001388:	4413      	add	r3, r2
 800138a:	4913      	ldr	r1, [pc, #76]	; (80013d8 <recordData+0x24c>)
 800138c:	461a      	mov	r2, r3
 800138e:	460b      	mov	r3, r1
 8001390:	881b      	ldrh	r3, [r3, #0]
 8001392:	8013      	strh	r3, [r2, #0]
		f_write(&SDFile, strBuf, strlen(strBuf), &wbytes);
 8001394:	f107 031c 	add.w	r3, r7, #28
 8001398:	4618      	mov	r0, r3
 800139a:	f7fe ff1d 	bl	80001d8 <strlen>
 800139e:	4602      	mov	r2, r0
 80013a0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80013a4:	f107 011c 	add.w	r1, r7, #28
 80013a8:	4807      	ldr	r0, [pc, #28]	; (80013c8 <recordData+0x23c>)
 80013aa:	f007 fd7d 	bl	8008ea8 <f_write>
		f_close(&SDFile);
 80013ae:	4806      	ldr	r0, [pc, #24]	; (80013c8 <recordData+0x23c>)
 80013b0:	f007 ff8c 	bl	80092cc <f_close>
	}
}
 80013b4:	bf00      	nop
 80013b6:	37c0      	adds	r7, #192	; 0xc0
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	20001c34 	.word	0x20001c34
 80013c0:	20002c68 	.word	0x20002c68
 80013c4:	20000000 	.word	0x20000000
 80013c8:	20001c38 	.word	0x20001c38
 80013cc:	20000098 	.word	0x20000098
 80013d0:	0800a734 	.word	0x0800a734
 80013d4:	0036ee80 	.word	0x0036ee80
 80013d8:	0800a738 	.word	0x0800a738

080013dc <initRecorder>:

void initRecorder(event_recorder* recorder, const char* name) {
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	6039      	str	r1, [r7, #0]
	recorder->name = (char*)malloc(strlen(name));
 80013e6:	6838      	ldr	r0, [r7, #0]
 80013e8:	f7fe fef6 	bl	80001d8 <strlen>
 80013ec:	4603      	mov	r3, r0
 80013ee:	4618      	mov	r0, r3
 80013f0:	f008 f836 	bl	8009460 <malloc>
 80013f4:	4603      	mov	r3, r0
 80013f6:	461a      	mov	r2, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	601a      	str	r2, [r3, #0]
	strcpy(recorder->name, name);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	6839      	ldr	r1, [r7, #0]
 8001402:	4618      	mov	r0, r3
 8001404:	f008 f8b5 	bl	8009572 <strcpy>
	initSDcard();
 8001408:	f7ff fcda 	bl	8000dc0 <initSDcard>
}
 800140c:	bf00      	nop
 800140e:	3708      	adds	r7, #8
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}

08001414 <startEvent>:
void deleteRecorder(event_recorder* recorder) {
	free(recorder->name);
	recorder->start_time = 0;
}

void startEvent(event_recorder* recorder) {
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
	recorder->start_time = HAL_GetTick();
 800141c:	f000 ff12 	bl	8002244 <HAL_GetTick>
 8001420:	4602      	mov	r2, r0
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	605a      	str	r2, [r3, #4]
}
 8001426:	bf00      	nop
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}

0800142e <endEvent>:

void endEvent(event_recorder* recorder, float averageCurrent, float energy) {
 800142e:	b580      	push	{r7, lr}
 8001430:	b086      	sub	sp, #24
 8001432:	af00      	add	r7, sp, #0
 8001434:	60f8      	str	r0, [r7, #12]
 8001436:	ed87 0a02 	vstr	s0, [r7, #8]
 800143a:	edc7 0a01 	vstr	s1, [r7, #4]
	uint32_t end_time = HAL_GetTick();
 800143e:	f000 ff01 	bl	8002244 <HAL_GetTick>
 8001442:	6178      	str	r0, [r7, #20]
	uint32_t duration = end_time - recorder->start_time;
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	697a      	ldr	r2, [r7, #20]
 800144a:	1ad3      	subs	r3, r2, r3
 800144c:	613b      	str	r3, [r7, #16]
	recordData(recorder->name, recorder->start_time, duration, averageCurrent, energy);
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	6818      	ldr	r0, [r3, #0]
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	edd7 0a01 	vldr	s1, [r7, #4]
 800145a:	ed97 0a02 	vldr	s0, [r7, #8]
 800145e:	693a      	ldr	r2, [r7, #16]
 8001460:	4619      	mov	r1, r3
 8001462:	f7ff fe93 	bl	800118c <recordData>
}
 8001466:	bf00      	nop
 8001468:	3718      	adds	r7, #24
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
	...

08001470 <calculateCurrent>:
 *      Author: rafal
 */

#include "input_monitor.h"

static inline float calculateCurrent(float pp_voltage) {
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	ed87 0a01 	vstr	s0, [r7, #4]
	return pp_voltage/(currentTransformerRatio*rootOfTwo*2);
 800147a:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80014a4 <calculateCurrent+0x34>
 800147e:	eddf 7a0a 	vldr	s15, [pc, #40]	; 80014a8 <calculateCurrent+0x38>
 8001482:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001486:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800148a:	ed97 7a01 	vldr	s14, [r7, #4]
 800148e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001492:	eef0 7a66 	vmov.f32	s15, s13
}
 8001496:	eeb0 0a67 	vmov.f32	s0, s15
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr
 80014a4:	3da68b1a 	.word	0x3da68b1a
 80014a8:	3fb504f3 	.word	0x3fb504f3

080014ac <clearMonitor>:

static inline void clearMonitor(input_monitor* input_monitor) {
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
	input_monitor->current_sum = 0;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	f04f 0200 	mov.w	r2, #0
 80014ba:	609a      	str	r2, [r3, #8]
	input_monitor->sample_counter = 0;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2200      	movs	r2, #0
 80014c0:	605a      	str	r2, [r3, #4]
	input_monitor->energy = 0;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	f04f 0200 	mov.w	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]
}
 80014ca:	bf00      	nop
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
	...

080014d8 <countInput>:


void countInput(input_monitor* input_monitor, float pp_voltage) {
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	ed87 0a00 	vstr	s0, [r7]
	float current = calculateCurrent(pp_voltage);
 80014e4:	ed97 0a00 	vldr	s0, [r7]
 80014e8:	f7ff ffc2 	bl	8001470 <calculateCurrent>
 80014ec:	ed87 0a03 	vstr	s0, [r7, #12]
	if (current > currentThreshold) {
 80014f0:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80015c4 <countInput+0xec>
 80014f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80014f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001500:	dd34      	ble.n	800156c <countInput+0x94>
		HAL_GPIO_WritePin(led_pin_GPIO_Port, led_pin_Pin, GPIO_PIN_RESET);
 8001502:	2200      	movs	r2, #0
 8001504:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001508:	482f      	ldr	r0, [pc, #188]	; (80015c8 <countInput+0xf0>)
 800150a:	f002 f9a7 	bl	800385c <HAL_GPIO_WritePin>
		input_monitor->current_sum += current;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	ed93 7a02 	vldr	s14, [r3, #8]
 8001514:	edd7 7a03 	vldr	s15, [r7, #12]
 8001518:	ee77 7a27 	vadd.f32	s15, s14, s15
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	edc3 7a02 	vstr	s15, [r3, #8]
		input_monitor->sample_counter++;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	1c5a      	adds	r2, r3, #1
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	605a      	str	r2, [r3, #4]
		input_monitor->energy += powerVoltage*current;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	ed93 7a00 	vldr	s14, [r3]
 8001532:	eddf 6a26 	vldr	s13, [pc, #152]	; 80015cc <countInput+0xf4>
 8001536:	edd7 7a03 	vldr	s15, [r7, #12]
 800153a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800153e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	edc3 7a00 	vstr	s15, [r3]
		if (input_monitor->sample_counter == 1 &&
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	2b01      	cmp	r3, #1
 800154e:	d135      	bne.n	80015bc <countInput+0xe4>
				input_monitor->on_detected_event) {
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	68db      	ldr	r3, [r3, #12]
		if (input_monitor->sample_counter == 1 &&
 8001554:	2b00      	cmp	r3, #0
 8001556:	d031      	beq.n	80015bc <countInput+0xe4>
			input_monitor->on_detected_event();
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	4798      	blx	r3
			HAL_GPIO_WritePin(led_pin_GPIO_Port, led_pin_Pin, GPIO_PIN_RESET);
 800155e:	2200      	movs	r2, #0
 8001560:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001564:	4818      	ldr	r0, [pc, #96]	; (80015c8 <countInput+0xf0>)
 8001566:	f002 f979 	bl	800385c <HAL_GPIO_WritePin>
			input_monitor->off_detected_event(avgCurrent, input_monitor->energy);
			clearMonitor(input_monitor);
			HAL_GPIO_WritePin(led_pin_GPIO_Port, led_pin_Pin, GPIO_PIN_SET);
		}
	}
}
 800156a:	e027      	b.n	80015bc <countInput+0xe4>
		if (input_monitor->sample_counter > 0 &&
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d023      	beq.n	80015bc <countInput+0xe4>
				input_monitor->off_detected_event) {
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	691b      	ldr	r3, [r3, #16]
		if (input_monitor->sample_counter > 0 &&
 8001578:	2b00      	cmp	r3, #0
 800157a:	d01f      	beq.n	80015bc <countInput+0xe4>
			float avgCurrent = input_monitor->current_sum/input_monitor->sample_counter;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	edd3 6a02 	vldr	s13, [r3, #8]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	ee07 3a90 	vmov	s15, r3
 800158a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800158e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001592:	edc7 7a02 	vstr	s15, [r7, #8]
			input_monitor->off_detected_event(avgCurrent, input_monitor->energy);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	691b      	ldr	r3, [r3, #16]
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	edd2 7a00 	vldr	s15, [r2]
 80015a0:	eef0 0a67 	vmov.f32	s1, s15
 80015a4:	ed97 0a02 	vldr	s0, [r7, #8]
 80015a8:	4798      	blx	r3
			clearMonitor(input_monitor);
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f7ff ff7e 	bl	80014ac <clearMonitor>
			HAL_GPIO_WritePin(led_pin_GPIO_Port, led_pin_Pin, GPIO_PIN_SET);
 80015b0:	2201      	movs	r2, #1
 80015b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015b6:	4804      	ldr	r0, [pc, #16]	; (80015c8 <countInput+0xf0>)
 80015b8:	f002 f950 	bl	800385c <HAL_GPIO_WritePin>
}
 80015bc:	bf00      	nop
 80015be:	3710      	adds	r7, #16
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	3f19999a 	.word	0x3f19999a
 80015c8:	40020800 	.word	0x40020800
 80015cc:	43660000 	.word	0x43660000

080015d0 <startEventWrapper>:
static void MX_DMA_Init(void);
static void MX_SDIO_SD_Init(void);
static void MX_ADC1_Init(void);
static void MX_TIM2_Init(void);
/* USER CODE BEGIN PFP */
void startEventWrapper() {
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
	startEvent(&eventRecorder);
 80015d4:	4802      	ldr	r0, [pc, #8]	; (80015e0 <startEventWrapper+0x10>)
 80015d6:	f7ff ff1d 	bl	8001414 <startEvent>
}
 80015da:	bf00      	nop
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	20001a44 	.word	0x20001a44

080015e4 <endEventWrapper>:

void endEventWrapper(float averageCurrent, float energy) {
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	ed87 0a01 	vstr	s0, [r7, #4]
 80015ee:	edc7 0a00 	vstr	s1, [r7]
	endEvent(&eventRecorder, averageCurrent, energy);
 80015f2:	edd7 0a00 	vldr	s1, [r7]
 80015f6:	ed97 0a01 	vldr	s0, [r7, #4]
 80015fa:	4803      	ldr	r0, [pc, #12]	; (8001608 <endEventWrapper+0x24>)
 80015fc:	f7ff ff17 	bl	800142e <endEvent>
}
 8001600:	bf00      	nop
 8001602:	3708      	adds	r7, #8
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	20001a44 	.word	0x20001a44

0800160c <filter>:

static void filter(volatile uint16_t* buf, uint32_t size) {
 800160c:	b480      	push	{r7}
 800160e:	b087      	sub	sp, #28
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	6039      	str	r1, [r7, #0]
	for (int bufIndex = 0; bufIndex<=size-AVERAGE_FILTER_ORDER; bufIndex++) {
 8001616:	2300      	movs	r3, #0
 8001618:	617b      	str	r3, [r7, #20]
 800161a:	e024      	b.n	8001666 <filter+0x5a>
		uint32_t sum = 0;
 800161c:	2300      	movs	r3, #0
 800161e:	613b      	str	r3, [r7, #16]
		for (int filerIndex = 0; filerIndex < AVERAGE_FILTER_ORDER; filerIndex++) {
 8001620:	2300      	movs	r3, #0
 8001622:	60fb      	str	r3, [r7, #12]
 8001624:	e00e      	b.n	8001644 <filter+0x38>
			sum += buf[bufIndex+filerIndex];
 8001626:	697a      	ldr	r2, [r7, #20]
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	4413      	add	r3, r2
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	687a      	ldr	r2, [r7, #4]
 8001630:	4413      	add	r3, r2
 8001632:	881b      	ldrh	r3, [r3, #0]
 8001634:	b29b      	uxth	r3, r3
 8001636:	461a      	mov	r2, r3
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	4413      	add	r3, r2
 800163c:	613b      	str	r3, [r7, #16]
		for (int filerIndex = 0; filerIndex < AVERAGE_FILTER_ORDER; filerIndex++) {
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	3301      	adds	r3, #1
 8001642:	60fb      	str	r3, [r7, #12]
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	2b0f      	cmp	r3, #15
 8001648:	dded      	ble.n	8001626 <filter+0x1a>
		}
		sum /= AVERAGE_FILTER_ORDER;
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	091b      	lsrs	r3, r3, #4
 800164e:	613b      	str	r3, [r7, #16]
		buf[bufIndex+AVERAGE_FILTER_ORDER-1] = sum;
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	330f      	adds	r3, #15
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	4413      	add	r3, r2
 800165a:	693a      	ldr	r2, [r7, #16]
 800165c:	b292      	uxth	r2, r2
 800165e:	801a      	strh	r2, [r3, #0]
	for (int bufIndex = 0; bufIndex<=size-AVERAGE_FILTER_ORDER; bufIndex++) {
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	3301      	adds	r3, #1
 8001664:	617b      	str	r3, [r7, #20]
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	f1a3 0210 	sub.w	r2, r3, #16
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	429a      	cmp	r2, r3
 8001670:	d2d4      	bcs.n	800161c <filter+0x10>
	}
	for (int bufIndex = 0; bufIndex<AVERAGE_FILTER_ORDER-1; bufIndex++) {
 8001672:	2300      	movs	r3, #0
 8001674:	60bb      	str	r3, [r7, #8]
 8001676:	e00a      	b.n	800168e <filter+0x82>
		buf[bufIndex] = buf[AVERAGE_FILTER_ORDER];
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	005b      	lsls	r3, r3, #1
 800167c:	687a      	ldr	r2, [r7, #4]
 800167e:	4413      	add	r3, r2
 8001680:	687a      	ldr	r2, [r7, #4]
 8001682:	8c12      	ldrh	r2, [r2, #32]
 8001684:	b292      	uxth	r2, r2
 8001686:	801a      	strh	r2, [r3, #0]
	for (int bufIndex = 0; bufIndex<AVERAGE_FILTER_ORDER-1; bufIndex++) {
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	3301      	adds	r3, #1
 800168c:	60bb      	str	r3, [r7, #8]
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	2b0e      	cmp	r3, #14
 8001692:	ddf1      	ble.n	8001678 <filter+0x6c>
	}
}
 8001694:	bf00      	nop
 8001696:	371c      	adds	r7, #28
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <findMinMaxDiff>:

static uint16_t findMinMaxDiff(volatile uint16_t* buf, uint32_t size) {
 80016a0:	b480      	push	{r7}
 80016a2:	b085      	sub	sp, #20
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	6039      	str	r1, [r7, #0]
	uint16_t min = *buf, max = *buf;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	881b      	ldrh	r3, [r3, #0]
 80016ae:	81fb      	strh	r3, [r7, #14]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	881b      	ldrh	r3, [r3, #0]
 80016b4:	81bb      	strh	r3, [r7, #12]
	if (size > 0) {
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d027      	beq.n	800170c <findMinMaxDiff+0x6c>
		for (int i=1; i<size; i++) {
 80016bc:	2301      	movs	r3, #1
 80016be:	60bb      	str	r3, [r7, #8]
 80016c0:	e020      	b.n	8001704 <findMinMaxDiff+0x64>
			if (buf[i] > max) max = buf[i];
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	4413      	add	r3, r2
 80016ca:	881b      	ldrh	r3, [r3, #0]
 80016cc:	b29b      	uxth	r3, r3
 80016ce:	89ba      	ldrh	r2, [r7, #12]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d205      	bcs.n	80016e0 <findMinMaxDiff+0x40>
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	005b      	lsls	r3, r3, #1
 80016d8:	687a      	ldr	r2, [r7, #4]
 80016da:	4413      	add	r3, r2
 80016dc:	881b      	ldrh	r3, [r3, #0]
 80016de:	81bb      	strh	r3, [r7, #12]
			if (buf[i] < min) min = buf[i];
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	005b      	lsls	r3, r3, #1
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	4413      	add	r3, r2
 80016e8:	881b      	ldrh	r3, [r3, #0]
 80016ea:	b29b      	uxth	r3, r3
 80016ec:	89fa      	ldrh	r2, [r7, #14]
 80016ee:	429a      	cmp	r2, r3
 80016f0:	d905      	bls.n	80016fe <findMinMaxDiff+0x5e>
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	005b      	lsls	r3, r3, #1
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	4413      	add	r3, r2
 80016fa:	881b      	ldrh	r3, [r3, #0]
 80016fc:	81fb      	strh	r3, [r7, #14]
		for (int i=1; i<size; i++) {
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	3301      	adds	r3, #1
 8001702:	60bb      	str	r3, [r7, #8]
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	683a      	ldr	r2, [r7, #0]
 8001708:	429a      	cmp	r2, r3
 800170a:	d8da      	bhi.n	80016c2 <findMinMaxDiff+0x22>
		}
	}
	return max-min;
 800170c:	89ba      	ldrh	r2, [r7, #12]
 800170e:	89fb      	ldrh	r3, [r7, #14]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	b29b      	uxth	r3, r3
}
 8001714:	4618      	mov	r0, r3
 8001716:	3714      	adds	r7, #20
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <voltageStepsToReal>:

static inline float voltageStepsToReal(uint16_t adc_voltage) {
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	4603      	mov	r3, r0
 8001728:	80fb      	strh	r3, [r7, #6]
	return (adc_voltage*ADC_REF_VOLTAGE)/ADC_STEPS;
 800172a:	88fb      	ldrh	r3, [r7, #6]
 800172c:	ee07 3a90 	vmov	s15, r3
 8001730:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001734:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001758 <voltageStepsToReal+0x38>
 8001738:	ee67 7a87 	vmul.f32	s15, s15, s14
 800173c:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800175c <voltageStepsToReal+0x3c>
 8001740:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001744:	eef0 7a66 	vmov.f32	s15, s13
}
 8001748:	eeb0 0a67 	vmov.f32	s0, s15
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	4051eb85 	.word	0x4051eb85
 800175c:	457ff000 	.word	0x457ff000

08001760 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001766:	f000 fd07 	bl	8002178 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800176a:	f000 f869 	bl	8001840 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800176e:	f000 f9e5 	bl	8001b3c <MX_GPIO_Init>
  MX_DMA_Init();
 8001772:	f000 f9b3 	bl	8001adc <MX_DMA_Init>
  MX_SDIO_SD_Init();
 8001776:	f000 f91d 	bl	80019b4 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 800177a:	f005 f93d 	bl	80069f8 <MX_FATFS_Init>
  MX_ADC1_Init();
 800177e:	f000 f8c7 	bl	8001910 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001782:	f000 f937 	bl	80019f4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(led_pin_GPIO_Port, led_pin_Pin, GPIO_PIN_SET);
 8001786:	2201      	movs	r2, #1
 8001788:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800178c:	4822      	ldr	r0, [pc, #136]	; (8001818 <main+0xb8>)
 800178e:	f002 f865 	bl	800385c <HAL_GPIO_WritePin>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8001792:	2100      	movs	r1, #0
 8001794:	4821      	ldr	r0, [pc, #132]	; (800181c <main+0xbc>)
 8001796:	f003 fe05 	bl	80053a4 <HAL_TIM_IC_Start_IT>

  inputMonitor.on_detected_event = startEventWrapper;
 800179a:	4b21      	ldr	r3, [pc, #132]	; (8001820 <main+0xc0>)
 800179c:	4a21      	ldr	r2, [pc, #132]	; (8001824 <main+0xc4>)
 800179e:	60da      	str	r2, [r3, #12]
  inputMonitor.off_detected_event = endEventWrapper;
 80017a0:	4b1f      	ldr	r3, [pc, #124]	; (8001820 <main+0xc0>)
 80017a2:	4a21      	ldr	r2, [pc, #132]	; (8001828 <main+0xc8>)
 80017a4:	611a      	str	r2, [r3, #16]

  HAL_Delay(10);
 80017a6:	200a      	movs	r0, #10
 80017a8:	f000 fd58 	bl	800225c <HAL_Delay>
  initRecorder(&eventRecorder, "zasilanie");
 80017ac:	491f      	ldr	r1, [pc, #124]	; (800182c <main+0xcc>)
 80017ae:	4820      	ldr	r0, [pc, #128]	; (8001830 <main+0xd0>)
 80017b0:	f7ff fe14 	bl	80013dc <initRecorder>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint16_t Vpp = 0;
 80017b4:	2300      	movs	r3, #0
 80017b6:	80fb      	strh	r3, [r7, #6]

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  switch (currentState) {
 80017b8:	4b1e      	ldr	r3, [pc, #120]	; (8001834 <main+0xd4>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d00d      	beq.n	80017de <main+0x7e>
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d026      	beq.n	8001814 <main+0xb4>
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d1f6      	bne.n	80017b8 <main+0x58>
	  case stateStartAdc:
		  HAL_ADC_Start_DMA(&hadc1, adcBuffer, ADC_BUF_SIZE);
 80017ca:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 80017ce:	491a      	ldr	r1, [pc, #104]	; (8001838 <main+0xd8>)
 80017d0:	481a      	ldr	r0, [pc, #104]	; (800183c <main+0xdc>)
 80017d2:	f000 fda9 	bl	8002328 <HAL_ADC_Start_DMA>
		  currentState = stateIdle;
 80017d6:	4b17      	ldr	r3, [pc, #92]	; (8001834 <main+0xd4>)
 80017d8:	2202      	movs	r2, #2
 80017da:	701a      	strb	r2, [r3, #0]
		  break;
 80017dc:	e01b      	b.n	8001816 <main+0xb6>
	  case stateProcessInput:
		  filter(adcBuffer, ADC_BUF_SIZE);
 80017de:	f44f 6148 	mov.w	r1, #3200	; 0xc80
 80017e2:	4815      	ldr	r0, [pc, #84]	; (8001838 <main+0xd8>)
 80017e4:	f7ff ff12 	bl	800160c <filter>
		  Vpp = findMinMaxDiff(adcBuffer, ADC_BUF_SIZE);
 80017e8:	f44f 6148 	mov.w	r1, #3200	; 0xc80
 80017ec:	4812      	ldr	r0, [pc, #72]	; (8001838 <main+0xd8>)
 80017ee:	f7ff ff57 	bl	80016a0 <findMinMaxDiff>
 80017f2:	4603      	mov	r3, r0
 80017f4:	80fb      	strh	r3, [r7, #6]
		  countInput(&inputMonitor, voltageStepsToReal(Vpp));
 80017f6:	88fb      	ldrh	r3, [r7, #6]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7ff ff91 	bl	8001720 <voltageStepsToReal>
 80017fe:	eef0 7a40 	vmov.f32	s15, s0
 8001802:	eeb0 0a67 	vmov.f32	s0, s15
 8001806:	4806      	ldr	r0, [pc, #24]	; (8001820 <main+0xc0>)
 8001808:	f7ff fe66 	bl	80014d8 <countInput>
		  currentState = stateIdle;
 800180c:	4b09      	ldr	r3, [pc, #36]	; (8001834 <main+0xd4>)
 800180e:	2202      	movs	r2, #2
 8001810:	701a      	strb	r2, [r3, #0]
		  break;
 8001812:	e000      	b.n	8001816 <main+0xb6>
	  case stateIdle: break;
 8001814:	bf00      	nop
	  switch (currentState) {
 8001816:	e7cf      	b.n	80017b8 <main+0x58>
 8001818:	40020800 	.word	0x40020800
 800181c:	20001bec 	.word	0x20001bec
 8001820:	20001bd8 	.word	0x20001bd8
 8001824:	080015d1 	.word	0x080015d1
 8001828:	080015e5 	.word	0x080015e5
 800182c:	0800a73c 	.word	0x0800a73c
 8001830:	20001a44 	.word	0x20001a44
 8001834:	20000004 	.word	0x20000004
 8001838:	2000009c 	.word	0x2000009c
 800183c:	20001a4c 	.word	0x20001a4c

08001840 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b094      	sub	sp, #80	; 0x50
 8001844:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001846:	f107 0320 	add.w	r3, r7, #32
 800184a:	2230      	movs	r2, #48	; 0x30
 800184c:	2100      	movs	r1, #0
 800184e:	4618      	mov	r0, r3
 8001850:	f007 fe0e 	bl	8009470 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001854:	f107 030c 	add.w	r3, r7, #12
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]
 800185c:	605a      	str	r2, [r3, #4]
 800185e:	609a      	str	r2, [r3, #8]
 8001860:	60da      	str	r2, [r3, #12]
 8001862:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001864:	2300      	movs	r3, #0
 8001866:	60bb      	str	r3, [r7, #8]
 8001868:	4b27      	ldr	r3, [pc, #156]	; (8001908 <SystemClock_Config+0xc8>)
 800186a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186c:	4a26      	ldr	r2, [pc, #152]	; (8001908 <SystemClock_Config+0xc8>)
 800186e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001872:	6413      	str	r3, [r2, #64]	; 0x40
 8001874:	4b24      	ldr	r3, [pc, #144]	; (8001908 <SystemClock_Config+0xc8>)
 8001876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001878:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800187c:	60bb      	str	r3, [r7, #8]
 800187e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001880:	2300      	movs	r3, #0
 8001882:	607b      	str	r3, [r7, #4]
 8001884:	4b21      	ldr	r3, [pc, #132]	; (800190c <SystemClock_Config+0xcc>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a20      	ldr	r2, [pc, #128]	; (800190c <SystemClock_Config+0xcc>)
 800188a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800188e:	6013      	str	r3, [r2, #0]
 8001890:	4b1e      	ldr	r3, [pc, #120]	; (800190c <SystemClock_Config+0xcc>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001898:	607b      	str	r3, [r7, #4]
 800189a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800189c:	2301      	movs	r3, #1
 800189e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018a6:	2302      	movs	r3, #2
 80018a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80018ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80018b0:	2319      	movs	r3, #25
 80018b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80018b4:	2364      	movs	r3, #100	; 0x64
 80018b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80018b8:	2304      	movs	r3, #4
 80018ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80018bc:	2304      	movs	r3, #4
 80018be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018c0:	f107 0320 	add.w	r3, r7, #32
 80018c4:	4618      	mov	r0, r3
 80018c6:	f001 ffe3 	bl	8003890 <HAL_RCC_OscConfig>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80018d0:	f000 f9b4 	bl	8001c3c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018d4:	230f      	movs	r3, #15
 80018d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018d8:	2302      	movs	r3, #2
 80018da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018dc:	2300      	movs	r3, #0
 80018de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 80018e0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80018e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018e6:	2300      	movs	r3, #0
 80018e8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80018ea:	f107 030c 	add.w	r3, r7, #12
 80018ee:	2100      	movs	r1, #0
 80018f0:	4618      	mov	r0, r3
 80018f2:	f002 fa3d 	bl	8003d70 <HAL_RCC_ClockConfig>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80018fc:	f000 f99e 	bl	8001c3c <Error_Handler>
  }
}
 8001900:	bf00      	nop
 8001902:	3750      	adds	r7, #80	; 0x50
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	40023800 	.word	0x40023800
 800190c:	40007000 	.word	0x40007000

08001910 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001916:	463b      	mov	r3, r7
 8001918:	2200      	movs	r2, #0
 800191a:	601a      	str	r2, [r3, #0]
 800191c:	605a      	str	r2, [r3, #4]
 800191e:	609a      	str	r2, [r3, #8]
 8001920:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8001922:	4b21      	ldr	r3, [pc, #132]	; (80019a8 <MX_ADC1_Init+0x98>)
 8001924:	4a21      	ldr	r2, [pc, #132]	; (80019ac <MX_ADC1_Init+0x9c>)
 8001926:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001928:	4b1f      	ldr	r3, [pc, #124]	; (80019a8 <MX_ADC1_Init+0x98>)
 800192a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800192e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001930:	4b1d      	ldr	r3, [pc, #116]	; (80019a8 <MX_ADC1_Init+0x98>)
 8001932:	2200      	movs	r2, #0
 8001934:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001936:	4b1c      	ldr	r3, [pc, #112]	; (80019a8 <MX_ADC1_Init+0x98>)
 8001938:	2200      	movs	r2, #0
 800193a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800193c:	4b1a      	ldr	r3, [pc, #104]	; (80019a8 <MX_ADC1_Init+0x98>)
 800193e:	2201      	movs	r2, #1
 8001940:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001942:	4b19      	ldr	r3, [pc, #100]	; (80019a8 <MX_ADC1_Init+0x98>)
 8001944:	2200      	movs	r2, #0
 8001946:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800194a:	4b17      	ldr	r3, [pc, #92]	; (80019a8 <MX_ADC1_Init+0x98>)
 800194c:	2200      	movs	r2, #0
 800194e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001950:	4b15      	ldr	r3, [pc, #84]	; (80019a8 <MX_ADC1_Init+0x98>)
 8001952:	4a17      	ldr	r2, [pc, #92]	; (80019b0 <MX_ADC1_Init+0xa0>)
 8001954:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001956:	4b14      	ldr	r3, [pc, #80]	; (80019a8 <MX_ADC1_Init+0x98>)
 8001958:	2200      	movs	r2, #0
 800195a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800195c:	4b12      	ldr	r3, [pc, #72]	; (80019a8 <MX_ADC1_Init+0x98>)
 800195e:	2201      	movs	r2, #1
 8001960:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001962:	4b11      	ldr	r3, [pc, #68]	; (80019a8 <MX_ADC1_Init+0x98>)
 8001964:	2201      	movs	r2, #1
 8001966:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800196a:	4b0f      	ldr	r3, [pc, #60]	; (80019a8 <MX_ADC1_Init+0x98>)
 800196c:	2201      	movs	r2, #1
 800196e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001970:	480d      	ldr	r0, [pc, #52]	; (80019a8 <MX_ADC1_Init+0x98>)
 8001972:	f000 fc95 	bl	80022a0 <HAL_ADC_Init>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800197c:	f000 f95e 	bl	8001c3c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001980:	2300      	movs	r3, #0
 8001982:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001984:	2301      	movs	r3, #1
 8001986:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8001988:	2302      	movs	r3, #2
 800198a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800198c:	463b      	mov	r3, r7
 800198e:	4619      	mov	r1, r3
 8001990:	4805      	ldr	r0, [pc, #20]	; (80019a8 <MX_ADC1_Init+0x98>)
 8001992:	f000 fdfb 	bl	800258c <HAL_ADC_ConfigChannel>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800199c:	f000 f94e 	bl	8001c3c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80019a0:	bf00      	nop
 80019a2:	3710      	adds	r7, #16
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	20001a4c 	.word	0x20001a4c
 80019ac:	40012000 	.word	0x40012000
 80019b0:	0f000001 	.word	0x0f000001

080019b4 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80019b8:	4b0c      	ldr	r3, [pc, #48]	; (80019ec <MX_SDIO_SD_Init+0x38>)
 80019ba:	4a0d      	ldr	r2, [pc, #52]	; (80019f0 <MX_SDIO_SD_Init+0x3c>)
 80019bc:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80019be:	4b0b      	ldr	r3, [pc, #44]	; (80019ec <MX_SDIO_SD_Init+0x38>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80019c4:	4b09      	ldr	r3, [pc, #36]	; (80019ec <MX_SDIO_SD_Init+0x38>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80019ca:	4b08      	ldr	r3, [pc, #32]	; (80019ec <MX_SDIO_SD_Init+0x38>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80019d0:	4b06      	ldr	r3, [pc, #24]	; (80019ec <MX_SDIO_SD_Init+0x38>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80019d6:	4b05      	ldr	r3, [pc, #20]	; (80019ec <MX_SDIO_SD_Init+0x38>)
 80019d8:	2200      	movs	r2, #0
 80019da:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 4;
 80019dc:	4b03      	ldr	r3, [pc, #12]	; (80019ec <MX_SDIO_SD_Init+0x38>)
 80019de:	2204      	movs	r2, #4
 80019e0:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80019e2:	bf00      	nop
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr
 80019ec:	20001b54 	.word	0x20001b54
 80019f0:	40012c00 	.word	0x40012c00

080019f4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b08e      	sub	sp, #56	; 0x38
 80019f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019fe:	2200      	movs	r2, #0
 8001a00:	601a      	str	r2, [r3, #0]
 8001a02:	605a      	str	r2, [r3, #4]
 8001a04:	609a      	str	r2, [r3, #8]
 8001a06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a08:	f107 0320 	add.w	r3, r7, #32
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a12:	1d3b      	adds	r3, r7, #4
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	605a      	str	r2, [r3, #4]
 8001a1a:	609a      	str	r2, [r3, #8]
 8001a1c:	60da      	str	r2, [r3, #12]
 8001a1e:	611a      	str	r2, [r3, #16]
 8001a20:	615a      	str	r2, [r3, #20]
 8001a22:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a24:	4b2c      	ldr	r3, [pc, #176]	; (8001ad8 <MX_TIM2_Init+0xe4>)
 8001a26:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a2a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 6250;
 8001a2c:	4b2a      	ldr	r3, [pc, #168]	; (8001ad8 <MX_TIM2_Init+0xe4>)
 8001a2e:	f641 026a 	movw	r2, #6250	; 0x186a
 8001a32:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a34:	4b28      	ldr	r3, [pc, #160]	; (8001ad8 <MX_TIM2_Init+0xe4>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8001a3a:	4b27      	ldr	r3, [pc, #156]	; (8001ad8 <MX_TIM2_Init+0xe4>)
 8001a3c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a40:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a42:	4b25      	ldr	r3, [pc, #148]	; (8001ad8 <MX_TIM2_Init+0xe4>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a48:	4b23      	ldr	r3, [pc, #140]	; (8001ad8 <MX_TIM2_Init+0xe4>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a4e:	4822      	ldr	r0, [pc, #136]	; (8001ad8 <MX_TIM2_Init+0xe4>)
 8001a50:	f003 fc48 	bl	80052e4 <HAL_TIM_Base_Init>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001a5a:	f000 f8ef 	bl	8001c3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a62:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a64:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a68:	4619      	mov	r1, r3
 8001a6a:	481b      	ldr	r0, [pc, #108]	; (8001ad8 <MX_TIM2_Init+0xe4>)
 8001a6c:	f003 fe6a 	bl	8005744 <HAL_TIM_ConfigClockSource>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001a76:	f000 f8e1 	bl	8001c3c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8001a7a:	4817      	ldr	r0, [pc, #92]	; (8001ad8 <MX_TIM2_Init+0xe4>)
 8001a7c:	f003 fc5d 	bl	800533a <HAL_TIM_OC_Init>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001a86:	f000 f8d9 	bl	8001c3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001a8a:	2320      	movs	r3, #32
 8001a8c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a92:	f107 0320 	add.w	r3, r7, #32
 8001a96:	4619      	mov	r1, r3
 8001a98:	480f      	ldr	r0, [pc, #60]	; (8001ad8 <MX_TIM2_Init+0xe4>)
 8001a9a:	f004 fa09 	bl	8005eb0 <HAL_TIMEx_MasterConfigSynchronization>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001aa4:	f000 f8ca 	bl	8001c3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001aac:	2300      	movs	r3, #0
 8001aae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ab8:	1d3b      	adds	r3, r7, #4
 8001aba:	2200      	movs	r2, #0
 8001abc:	4619      	mov	r1, r3
 8001abe:	4806      	ldr	r0, [pc, #24]	; (8001ad8 <MX_TIM2_Init+0xe4>)
 8001ac0:	f003 fde0 	bl	8005684 <HAL_TIM_OC_ConfigChannel>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001aca:	f000 f8b7 	bl	8001c3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001ace:	bf00      	nop
 8001ad0:	3738      	adds	r7, #56	; 0x38
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	20001bec 	.word	0x20001bec

08001adc <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	607b      	str	r3, [r7, #4]
 8001ae6:	4b14      	ldr	r3, [pc, #80]	; (8001b38 <MX_DMA_Init+0x5c>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	4a13      	ldr	r2, [pc, #76]	; (8001b38 <MX_DMA_Init+0x5c>)
 8001aec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001af0:	6313      	str	r3, [r2, #48]	; 0x30
 8001af2:	4b11      	ldr	r3, [pc, #68]	; (8001b38 <MX_DMA_Init+0x5c>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001afa:	607b      	str	r3, [r7, #4]
 8001afc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001afe:	2200      	movs	r2, #0
 8001b00:	2100      	movs	r1, #0
 8001b02:	2038      	movs	r0, #56	; 0x38
 8001b04:	f001 f8cd 	bl	8002ca2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001b08:	2038      	movs	r0, #56	; 0x38
 8001b0a:	f001 f8e6 	bl	8002cda <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001b0e:	2200      	movs	r2, #0
 8001b10:	2100      	movs	r1, #0
 8001b12:	203b      	movs	r0, #59	; 0x3b
 8001b14:	f001 f8c5 	bl	8002ca2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001b18:	203b      	movs	r0, #59	; 0x3b
 8001b1a:	f001 f8de 	bl	8002cda <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8001b1e:	2200      	movs	r2, #0
 8001b20:	2100      	movs	r1, #0
 8001b22:	2045      	movs	r0, #69	; 0x45
 8001b24:	f001 f8bd 	bl	8002ca2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001b28:	2045      	movs	r0, #69	; 0x45
 8001b2a:	f001 f8d6 	bl	8002cda <HAL_NVIC_EnableIRQ>

}
 8001b2e:	bf00      	nop
 8001b30:	3708      	adds	r7, #8
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	40023800 	.word	0x40023800

08001b3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b08a      	sub	sp, #40	; 0x28
 8001b40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b42:	f107 0314 	add.w	r3, r7, #20
 8001b46:	2200      	movs	r2, #0
 8001b48:	601a      	str	r2, [r3, #0]
 8001b4a:	605a      	str	r2, [r3, #4]
 8001b4c:	609a      	str	r2, [r3, #8]
 8001b4e:	60da      	str	r2, [r3, #12]
 8001b50:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b52:	2300      	movs	r3, #0
 8001b54:	613b      	str	r3, [r7, #16]
 8001b56:	4b2d      	ldr	r3, [pc, #180]	; (8001c0c <MX_GPIO_Init+0xd0>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5a:	4a2c      	ldr	r2, [pc, #176]	; (8001c0c <MX_GPIO_Init+0xd0>)
 8001b5c:	f043 0304 	orr.w	r3, r3, #4
 8001b60:	6313      	str	r3, [r2, #48]	; 0x30
 8001b62:	4b2a      	ldr	r3, [pc, #168]	; (8001c0c <MX_GPIO_Init+0xd0>)
 8001b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b66:	f003 0304 	and.w	r3, r3, #4
 8001b6a:	613b      	str	r3, [r7, #16]
 8001b6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b6e:	2300      	movs	r3, #0
 8001b70:	60fb      	str	r3, [r7, #12]
 8001b72:	4b26      	ldr	r3, [pc, #152]	; (8001c0c <MX_GPIO_Init+0xd0>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b76:	4a25      	ldr	r2, [pc, #148]	; (8001c0c <MX_GPIO_Init+0xd0>)
 8001b78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b7e:	4b23      	ldr	r3, [pc, #140]	; (8001c0c <MX_GPIO_Init+0xd0>)
 8001b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b86:	60fb      	str	r3, [r7, #12]
 8001b88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	60bb      	str	r3, [r7, #8]
 8001b8e:	4b1f      	ldr	r3, [pc, #124]	; (8001c0c <MX_GPIO_Init+0xd0>)
 8001b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b92:	4a1e      	ldr	r2, [pc, #120]	; (8001c0c <MX_GPIO_Init+0xd0>)
 8001b94:	f043 0301 	orr.w	r3, r3, #1
 8001b98:	6313      	str	r3, [r2, #48]	; 0x30
 8001b9a:	4b1c      	ldr	r3, [pc, #112]	; (8001c0c <MX_GPIO_Init+0xd0>)
 8001b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9e:	f003 0301 	and.w	r3, r3, #1
 8001ba2:	60bb      	str	r3, [r7, #8]
 8001ba4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	607b      	str	r3, [r7, #4]
 8001baa:	4b18      	ldr	r3, [pc, #96]	; (8001c0c <MX_GPIO_Init+0xd0>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bae:	4a17      	ldr	r2, [pc, #92]	; (8001c0c <MX_GPIO_Init+0xd0>)
 8001bb0:	f043 0302 	orr.w	r3, r3, #2
 8001bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bb6:	4b15      	ldr	r3, [pc, #84]	; (8001c0c <MX_GPIO_Init+0xd0>)
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	607b      	str	r3, [r7, #4]
 8001bc0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_pin_GPIO_Port, led_pin_Pin, GPIO_PIN_RESET);
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bc8:	4811      	ldr	r0, [pc, #68]	; (8001c10 <MX_GPIO_Init+0xd4>)
 8001bca:	f001 fe47 	bl	800385c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : led_pin_Pin */
  GPIO_InitStruct.Pin = led_pin_Pin;
 8001bce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001bd4:	2311      	movs	r3, #17
 8001bd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(led_pin_GPIO_Port, &GPIO_InitStruct);
 8001be0:	f107 0314 	add.w	r3, r7, #20
 8001be4:	4619      	mov	r1, r3
 8001be6:	480a      	ldr	r0, [pc, #40]	; (8001c10 <MX_GPIO_Init+0xd4>)
 8001be8:	f001 fc9e 	bl	8003528 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001bec:	2340      	movs	r3, #64	; 0x40
 8001bee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bf8:	f107 0314 	add.w	r3, r7, #20
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	4805      	ldr	r0, [pc, #20]	; (8001c14 <MX_GPIO_Init+0xd8>)
 8001c00:	f001 fc92 	bl	8003528 <HAL_GPIO_Init>

}
 8001c04:	bf00      	nop
 8001c06:	3728      	adds	r7, #40	; 0x28
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	40023800 	.word	0x40023800
 8001c10:	40020800 	.word	0x40020800
 8001c14:	40020400 	.word	0x40020400

08001c18 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop_DMA(&hadc1);
 8001c20:	4804      	ldr	r0, [pc, #16]	; (8001c34 <HAL_ADC_ConvCpltCallback+0x1c>)
 8001c22:	f000 fc55 	bl	80024d0 <HAL_ADC_Stop_DMA>
	currentState = stateProcessInput;
 8001c26:	4b04      	ldr	r3, [pc, #16]	; (8001c38 <HAL_ADC_ConvCpltCallback+0x20>)
 8001c28:	2201      	movs	r2, #1
 8001c2a:	701a      	strb	r2, [r3, #0]
}
 8001c2c:	bf00      	nop
 8001c2e:	3708      	adds	r7, #8
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	20001a4c 	.word	0x20001a4c
 8001c38:	20000004 	.word	0x20000004

08001c3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001c40:	bf00      	nop
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
	...

08001c4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c52:	2300      	movs	r3, #0
 8001c54:	607b      	str	r3, [r7, #4]
 8001c56:	4b10      	ldr	r3, [pc, #64]	; (8001c98 <HAL_MspInit+0x4c>)
 8001c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c5a:	4a0f      	ldr	r2, [pc, #60]	; (8001c98 <HAL_MspInit+0x4c>)
 8001c5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c60:	6453      	str	r3, [r2, #68]	; 0x44
 8001c62:	4b0d      	ldr	r3, [pc, #52]	; (8001c98 <HAL_MspInit+0x4c>)
 8001c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c6a:	607b      	str	r3, [r7, #4]
 8001c6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c6e:	2300      	movs	r3, #0
 8001c70:	603b      	str	r3, [r7, #0]
 8001c72:	4b09      	ldr	r3, [pc, #36]	; (8001c98 <HAL_MspInit+0x4c>)
 8001c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c76:	4a08      	ldr	r2, [pc, #32]	; (8001c98 <HAL_MspInit+0x4c>)
 8001c78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c7e:	4b06      	ldr	r3, [pc, #24]	; (8001c98 <HAL_MspInit+0x4c>)
 8001c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c86:	603b      	str	r3, [r7, #0]
 8001c88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c8a:	bf00      	nop
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	40023800 	.word	0x40023800

08001c9c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b08a      	sub	sp, #40	; 0x28
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca4:	f107 0314 	add.w	r3, r7, #20
 8001ca8:	2200      	movs	r2, #0
 8001caa:	601a      	str	r2, [r3, #0]
 8001cac:	605a      	str	r2, [r3, #4]
 8001cae:	609a      	str	r2, [r3, #8]
 8001cb0:	60da      	str	r2, [r3, #12]
 8001cb2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a2f      	ldr	r2, [pc, #188]	; (8001d78 <HAL_ADC_MspInit+0xdc>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d157      	bne.n	8001d6e <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	613b      	str	r3, [r7, #16]
 8001cc2:	4b2e      	ldr	r3, [pc, #184]	; (8001d7c <HAL_ADC_MspInit+0xe0>)
 8001cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc6:	4a2d      	ldr	r2, [pc, #180]	; (8001d7c <HAL_ADC_MspInit+0xe0>)
 8001cc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ccc:	6453      	str	r3, [r2, #68]	; 0x44
 8001cce:	4b2b      	ldr	r3, [pc, #172]	; (8001d7c <HAL_ADC_MspInit+0xe0>)
 8001cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cd6:	613b      	str	r3, [r7, #16]
 8001cd8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cda:	2300      	movs	r3, #0
 8001cdc:	60fb      	str	r3, [r7, #12]
 8001cde:	4b27      	ldr	r3, [pc, #156]	; (8001d7c <HAL_ADC_MspInit+0xe0>)
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce2:	4a26      	ldr	r2, [pc, #152]	; (8001d7c <HAL_ADC_MspInit+0xe0>)
 8001ce4:	f043 0301 	orr.w	r3, r3, #1
 8001ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cea:	4b24      	ldr	r3, [pc, #144]	; (8001d7c <HAL_ADC_MspInit+0xe0>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cee:	f003 0301 	and.w	r3, r3, #1
 8001cf2:	60fb      	str	r3, [r7, #12]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d02:	f107 0314 	add.w	r3, r7, #20
 8001d06:	4619      	mov	r1, r3
 8001d08:	481d      	ldr	r0, [pc, #116]	; (8001d80 <HAL_ADC_MspInit+0xe4>)
 8001d0a:	f001 fc0d 	bl	8003528 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001d0e:	4b1d      	ldr	r3, [pc, #116]	; (8001d84 <HAL_ADC_MspInit+0xe8>)
 8001d10:	4a1d      	ldr	r2, [pc, #116]	; (8001d88 <HAL_ADC_MspInit+0xec>)
 8001d12:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001d14:	4b1b      	ldr	r3, [pc, #108]	; (8001d84 <HAL_ADC_MspInit+0xe8>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d1a:	4b1a      	ldr	r3, [pc, #104]	; (8001d84 <HAL_ADC_MspInit+0xe8>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d20:	4b18      	ldr	r3, [pc, #96]	; (8001d84 <HAL_ADC_MspInit+0xe8>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001d26:	4b17      	ldr	r3, [pc, #92]	; (8001d84 <HAL_ADC_MspInit+0xe8>)
 8001d28:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d2c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001d2e:	4b15      	ldr	r3, [pc, #84]	; (8001d84 <HAL_ADC_MspInit+0xe8>)
 8001d30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d34:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001d36:	4b13      	ldr	r3, [pc, #76]	; (8001d84 <HAL_ADC_MspInit+0xe8>)
 8001d38:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d3c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001d3e:	4b11      	ldr	r3, [pc, #68]	; (8001d84 <HAL_ADC_MspInit+0xe8>)
 8001d40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d44:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001d46:	4b0f      	ldr	r3, [pc, #60]	; (8001d84 <HAL_ADC_MspInit+0xe8>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d4c:	4b0d      	ldr	r3, [pc, #52]	; (8001d84 <HAL_ADC_MspInit+0xe8>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001d52:	480c      	ldr	r0, [pc, #48]	; (8001d84 <HAL_ADC_MspInit+0xe8>)
 8001d54:	f000 ffdc 	bl	8002d10 <HAL_DMA_Init>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001d5e:	f7ff ff6d 	bl	8001c3c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a07      	ldr	r2, [pc, #28]	; (8001d84 <HAL_ADC_MspInit+0xe8>)
 8001d66:	639a      	str	r2, [r3, #56]	; 0x38
 8001d68:	4a06      	ldr	r2, [pc, #24]	; (8001d84 <HAL_ADC_MspInit+0xe8>)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001d6e:	bf00      	nop
 8001d70:	3728      	adds	r7, #40	; 0x28
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	40012000 	.word	0x40012000
 8001d7c:	40023800 	.word	0x40023800
 8001d80:	40020000 	.word	0x40020000
 8001d84:	20001a94 	.word	0x20001a94
 8001d88:	40026410 	.word	0x40026410

08001d8c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b08a      	sub	sp, #40	; 0x28
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d94:	f107 0314 	add.w	r3, r7, #20
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	605a      	str	r2, [r3, #4]
 8001d9e:	609a      	str	r2, [r3, #8]
 8001da0:	60da      	str	r2, [r3, #12]
 8001da2:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a70      	ldr	r2, [pc, #448]	; (8001f6c <HAL_SD_MspInit+0x1e0>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	f040 80d9 	bne.w	8001f62 <HAL_SD_MspInit+0x1d6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001db0:	2300      	movs	r3, #0
 8001db2:	613b      	str	r3, [r7, #16]
 8001db4:	4b6e      	ldr	r3, [pc, #440]	; (8001f70 <HAL_SD_MspInit+0x1e4>)
 8001db6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db8:	4a6d      	ldr	r2, [pc, #436]	; (8001f70 <HAL_SD_MspInit+0x1e4>)
 8001dba:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001dbe:	6453      	str	r3, [r2, #68]	; 0x44
 8001dc0:	4b6b      	ldr	r3, [pc, #428]	; (8001f70 <HAL_SD_MspInit+0x1e4>)
 8001dc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001dc8:	613b      	str	r3, [r7, #16]
 8001dca:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dcc:	2300      	movs	r3, #0
 8001dce:	60fb      	str	r3, [r7, #12]
 8001dd0:	4b67      	ldr	r3, [pc, #412]	; (8001f70 <HAL_SD_MspInit+0x1e4>)
 8001dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd4:	4a66      	ldr	r2, [pc, #408]	; (8001f70 <HAL_SD_MspInit+0x1e4>)
 8001dd6:	f043 0301 	orr.w	r3, r3, #1
 8001dda:	6313      	str	r3, [r2, #48]	; 0x30
 8001ddc:	4b64      	ldr	r3, [pc, #400]	; (8001f70 <HAL_SD_MspInit+0x1e4>)
 8001dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de0:	f003 0301 	and.w	r3, r3, #1
 8001de4:	60fb      	str	r3, [r7, #12]
 8001de6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001de8:	2300      	movs	r3, #0
 8001dea:	60bb      	str	r3, [r7, #8]
 8001dec:	4b60      	ldr	r3, [pc, #384]	; (8001f70 <HAL_SD_MspInit+0x1e4>)
 8001dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df0:	4a5f      	ldr	r2, [pc, #380]	; (8001f70 <HAL_SD_MspInit+0x1e4>)
 8001df2:	f043 0302 	orr.w	r3, r3, #2
 8001df6:	6313      	str	r3, [r2, #48]	; 0x30
 8001df8:	4b5d      	ldr	r3, [pc, #372]	; (8001f70 <HAL_SD_MspInit+0x1e4>)
 8001dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfc:	f003 0302 	and.w	r3, r3, #2
 8001e00:	60bb      	str	r3, [r7, #8]
 8001e02:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration    
    PA6     ------> SDIO_CMD
    PB15     ------> SDIO_CK
    PB4     ------> SDIO_D0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001e04:	2340      	movs	r3, #64	; 0x40
 8001e06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e08:	2302      	movs	r3, #2
 8001e0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e10:	2303      	movs	r3, #3
 8001e12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001e14:	230c      	movs	r3, #12
 8001e16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e18:	f107 0314 	add.w	r3, r7, #20
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	4855      	ldr	r0, [pc, #340]	; (8001f74 <HAL_SD_MspInit+0x1e8>)
 8001e20:	f001 fb82 	bl	8003528 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001e24:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e2a:	2302      	movs	r3, #2
 8001e2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e32:	2303      	movs	r3, #3
 8001e34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001e36:	230c      	movs	r3, #12
 8001e38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e3a:	f107 0314 	add.w	r3, r7, #20
 8001e3e:	4619      	mov	r1, r3
 8001e40:	484d      	ldr	r0, [pc, #308]	; (8001f78 <HAL_SD_MspInit+0x1ec>)
 8001e42:	f001 fb71 	bl	8003528 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001e46:	2310      	movs	r3, #16
 8001e48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e52:	2303      	movs	r3, #3
 8001e54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001e56:	230c      	movs	r3, #12
 8001e58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e5a:	f107 0314 	add.w	r3, r7, #20
 8001e5e:	4619      	mov	r1, r3
 8001e60:	4845      	ldr	r0, [pc, #276]	; (8001f78 <HAL_SD_MspInit+0x1ec>)
 8001e62:	f001 fb61 	bl	8003528 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8001e66:	4b45      	ldr	r3, [pc, #276]	; (8001f7c <HAL_SD_MspInit+0x1f0>)
 8001e68:	4a45      	ldr	r2, [pc, #276]	; (8001f80 <HAL_SD_MspInit+0x1f4>)
 8001e6a:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8001e6c:	4b43      	ldr	r3, [pc, #268]	; (8001f7c <HAL_SD_MspInit+0x1f0>)
 8001e6e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e72:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e74:	4b41      	ldr	r3, [pc, #260]	; (8001f7c <HAL_SD_MspInit+0x1f0>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e7a:	4b40      	ldr	r3, [pc, #256]	; (8001f7c <HAL_SD_MspInit+0x1f0>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e80:	4b3e      	ldr	r3, [pc, #248]	; (8001f7c <HAL_SD_MspInit+0x1f0>)
 8001e82:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e86:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001e88:	4b3c      	ldr	r3, [pc, #240]	; (8001f7c <HAL_SD_MspInit+0x1f0>)
 8001e8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e8e:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001e90:	4b3a      	ldr	r3, [pc, #232]	; (8001f7c <HAL_SD_MspInit+0x1f0>)
 8001e92:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e96:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8001e98:	4b38      	ldr	r3, [pc, #224]	; (8001f7c <HAL_SD_MspInit+0x1f0>)
 8001e9a:	2220      	movs	r2, #32
 8001e9c:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e9e:	4b37      	ldr	r3, [pc, #220]	; (8001f7c <HAL_SD_MspInit+0x1f0>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001ea4:	4b35      	ldr	r3, [pc, #212]	; (8001f7c <HAL_SD_MspInit+0x1f0>)
 8001ea6:	2204      	movs	r2, #4
 8001ea8:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001eaa:	4b34      	ldr	r3, [pc, #208]	; (8001f7c <HAL_SD_MspInit+0x1f0>)
 8001eac:	2203      	movs	r2, #3
 8001eae:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8001eb0:	4b32      	ldr	r3, [pc, #200]	; (8001f7c <HAL_SD_MspInit+0x1f0>)
 8001eb2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001eb6:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001eb8:	4b30      	ldr	r3, [pc, #192]	; (8001f7c <HAL_SD_MspInit+0x1f0>)
 8001eba:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001ebe:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8001ec0:	482e      	ldr	r0, [pc, #184]	; (8001f7c <HAL_SD_MspInit+0x1f0>)
 8001ec2:	f000 ff25 	bl	8002d10 <HAL_DMA_Init>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <HAL_SD_MspInit+0x144>
    {
      Error_Handler();
 8001ecc:	f7ff feb6 	bl	8001c3c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	4a2a      	ldr	r2, [pc, #168]	; (8001f7c <HAL_SD_MspInit+0x1f0>)
 8001ed4:	641a      	str	r2, [r3, #64]	; 0x40
 8001ed6:	4a29      	ldr	r2, [pc, #164]	; (8001f7c <HAL_SD_MspInit+0x1f0>)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8001edc:	4b29      	ldr	r3, [pc, #164]	; (8001f84 <HAL_SD_MspInit+0x1f8>)
 8001ede:	4a2a      	ldr	r2, [pc, #168]	; (8001f88 <HAL_SD_MspInit+0x1fc>)
 8001ee0:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8001ee2:	4b28      	ldr	r3, [pc, #160]	; (8001f84 <HAL_SD_MspInit+0x1f8>)
 8001ee4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ee8:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001eea:	4b26      	ldr	r3, [pc, #152]	; (8001f84 <HAL_SD_MspInit+0x1f8>)
 8001eec:	2240      	movs	r2, #64	; 0x40
 8001eee:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ef0:	4b24      	ldr	r3, [pc, #144]	; (8001f84 <HAL_SD_MspInit+0x1f8>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ef6:	4b23      	ldr	r3, [pc, #140]	; (8001f84 <HAL_SD_MspInit+0x1f8>)
 8001ef8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001efc:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001efe:	4b21      	ldr	r3, [pc, #132]	; (8001f84 <HAL_SD_MspInit+0x1f8>)
 8001f00:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f04:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001f06:	4b1f      	ldr	r3, [pc, #124]	; (8001f84 <HAL_SD_MspInit+0x1f8>)
 8001f08:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f0c:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8001f0e:	4b1d      	ldr	r3, [pc, #116]	; (8001f84 <HAL_SD_MspInit+0x1f8>)
 8001f10:	2220      	movs	r2, #32
 8001f12:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001f14:	4b1b      	ldr	r3, [pc, #108]	; (8001f84 <HAL_SD_MspInit+0x1f8>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001f1a:	4b1a      	ldr	r3, [pc, #104]	; (8001f84 <HAL_SD_MspInit+0x1f8>)
 8001f1c:	2204      	movs	r2, #4
 8001f1e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001f20:	4b18      	ldr	r3, [pc, #96]	; (8001f84 <HAL_SD_MspInit+0x1f8>)
 8001f22:	2203      	movs	r2, #3
 8001f24:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8001f26:	4b17      	ldr	r3, [pc, #92]	; (8001f84 <HAL_SD_MspInit+0x1f8>)
 8001f28:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001f2c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001f2e:	4b15      	ldr	r3, [pc, #84]	; (8001f84 <HAL_SD_MspInit+0x1f8>)
 8001f30:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001f34:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8001f36:	4813      	ldr	r0, [pc, #76]	; (8001f84 <HAL_SD_MspInit+0x1f8>)
 8001f38:	f000 feea 	bl	8002d10 <HAL_DMA_Init>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <HAL_SD_MspInit+0x1ba>
    {
      Error_Handler();
 8001f42:	f7ff fe7b 	bl	8001c3c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a0e      	ldr	r2, [pc, #56]	; (8001f84 <HAL_SD_MspInit+0x1f8>)
 8001f4a:	63da      	str	r2, [r3, #60]	; 0x3c
 8001f4c:	4a0d      	ldr	r2, [pc, #52]	; (8001f84 <HAL_SD_MspInit+0x1f8>)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8001f52:	2200      	movs	r2, #0
 8001f54:	2100      	movs	r1, #0
 8001f56:	2031      	movs	r0, #49	; 0x31
 8001f58:	f000 fea3 	bl	8002ca2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8001f5c:	2031      	movs	r0, #49	; 0x31
 8001f5e:	f000 febc 	bl	8002cda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8001f62:	bf00      	nop
 8001f64:	3728      	adds	r7, #40	; 0x28
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	40012c00 	.word	0x40012c00
 8001f70:	40023800 	.word	0x40023800
 8001f74:	40020000 	.word	0x40020000
 8001f78:	40020400 	.word	0x40020400
 8001f7c:	200019e4 	.word	0x200019e4
 8001f80:	40026458 	.word	0x40026458
 8001f84:	20001af4 	.word	0x20001af4
 8001f88:	400264a0 	.word	0x400264a0

08001f8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f9c:	d115      	bne.n	8001fca <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	60fb      	str	r3, [r7, #12]
 8001fa2:	4b0c      	ldr	r3, [pc, #48]	; (8001fd4 <HAL_TIM_Base_MspInit+0x48>)
 8001fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa6:	4a0b      	ldr	r2, [pc, #44]	; (8001fd4 <HAL_TIM_Base_MspInit+0x48>)
 8001fa8:	f043 0301 	orr.w	r3, r3, #1
 8001fac:	6413      	str	r3, [r2, #64]	; 0x40
 8001fae:	4b09      	ldr	r3, [pc, #36]	; (8001fd4 <HAL_TIM_Base_MspInit+0x48>)
 8001fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	60fb      	str	r3, [r7, #12]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001fba:	2200      	movs	r2, #0
 8001fbc:	2100      	movs	r1, #0
 8001fbe:	201c      	movs	r0, #28
 8001fc0:	f000 fe6f 	bl	8002ca2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001fc4:	201c      	movs	r0, #28
 8001fc6:	f000 fe88 	bl	8002cda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001fca:	bf00      	nop
 8001fcc:	3710      	adds	r7, #16
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	40023800 	.word	0x40023800

08001fd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001fdc:	bf00      	nop
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr

08001fe6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fea:	e7fe      	b.n	8001fea <HardFault_Handler+0x4>

08001fec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ff0:	e7fe      	b.n	8001ff0 <MemManage_Handler+0x4>

08001ff2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ff6:	e7fe      	b.n	8001ff6 <BusFault_Handler+0x4>

08001ff8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ffc:	e7fe      	b.n	8001ffc <UsageFault_Handler+0x4>

08001ffe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ffe:	b480      	push	{r7}
 8002000:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002002:	bf00      	nop
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002010:	bf00      	nop
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr

0800201a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800201a:	b480      	push	{r7}
 800201c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800201e:	bf00      	nop
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800202c:	f000 f8f6 	bl	800221c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  /* USER CODE END SysTick_IRQn 1 */
}
 8002030:	bf00      	nop
 8002032:	bd80      	pop	{r7, pc}

08002034 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002038:	4803      	ldr	r0, [pc, #12]	; (8002048 <TIM2_IRQHandler+0x14>)
 800203a:	f003 fa1b 	bl	8005474 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  currentState = stateStartAdc;
 800203e:	4b03      	ldr	r3, [pc, #12]	; (800204c <TIM2_IRQHandler+0x18>)
 8002040:	2200      	movs	r2, #0
 8002042:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM2_IRQn 1 */
}
 8002044:	bf00      	nop
 8002046:	bd80      	pop	{r7, pc}
 8002048:	20001bec 	.word	0x20001bec
 800204c:	20000004 	.word	0x20000004

08002050 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8002054:	4802      	ldr	r0, [pc, #8]	; (8002060 <SDIO_IRQHandler+0x10>)
 8002056:	f002 fa8d 	bl	8004574 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800205a:	bf00      	nop
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	20001b54 	.word	0x20001b54

08002064 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002068:	4802      	ldr	r0, [pc, #8]	; (8002074 <DMA2_Stream0_IRQHandler+0x10>)
 800206a:	f000 ffe9 	bl	8003040 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800206e:	bf00      	nop
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	20001a94 	.word	0x20001a94

08002078 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 800207c:	4802      	ldr	r0, [pc, #8]	; (8002088 <DMA2_Stream3_IRQHandler+0x10>)
 800207e:	f000 ffdf 	bl	8003040 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002082:	bf00      	nop
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	200019e4 	.word	0x200019e4

0800208c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8002090:	4802      	ldr	r0, [pc, #8]	; (800209c <DMA2_Stream6_IRQHandler+0x10>)
 8002092:	f000 ffd5 	bl	8003040 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8002096:	bf00      	nop
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	20001af4 	.word	0x20001af4

080020a0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80020a8:	4b11      	ldr	r3, [pc, #68]	; (80020f0 <_sbrk+0x50>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d102      	bne.n	80020b6 <_sbrk+0x16>
		heap_end = &end;
 80020b0:	4b0f      	ldr	r3, [pc, #60]	; (80020f0 <_sbrk+0x50>)
 80020b2:	4a10      	ldr	r2, [pc, #64]	; (80020f4 <_sbrk+0x54>)
 80020b4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80020b6:	4b0e      	ldr	r3, [pc, #56]	; (80020f0 <_sbrk+0x50>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80020bc:	4b0c      	ldr	r3, [pc, #48]	; (80020f0 <_sbrk+0x50>)
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	4413      	add	r3, r2
 80020c4:	466a      	mov	r2, sp
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d907      	bls.n	80020da <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80020ca:	f007 f985 	bl	80093d8 <__errno>
 80020ce:	4602      	mov	r2, r0
 80020d0:	230c      	movs	r3, #12
 80020d2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80020d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020d8:	e006      	b.n	80020e8 <_sbrk+0x48>
	}

	heap_end += incr;
 80020da:	4b05      	ldr	r3, [pc, #20]	; (80020f0 <_sbrk+0x50>)
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4413      	add	r3, r2
 80020e2:	4a03      	ldr	r2, [pc, #12]	; (80020f0 <_sbrk+0x50>)
 80020e4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80020e6:	68fb      	ldr	r3, [r7, #12]
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3710      	adds	r7, #16
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	2000199c 	.word	0x2000199c
 80020f4:	20003ca0 	.word	0x20003ca0

080020f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020fc:	4b08      	ldr	r3, [pc, #32]	; (8002120 <SystemInit+0x28>)
 80020fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002102:	4a07      	ldr	r2, [pc, #28]	; (8002120 <SystemInit+0x28>)
 8002104:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002108:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800210c:	4b04      	ldr	r3, [pc, #16]	; (8002120 <SystemInit+0x28>)
 800210e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002112:	609a      	str	r2, [r3, #8]
#endif
}
 8002114:	bf00      	nop
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	e000ed00 	.word	0xe000ed00

08002124 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002124:	f8df d034 	ldr.w	sp, [pc, #52]	; 800215c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002128:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800212a:	e003      	b.n	8002134 <LoopCopyDataInit>

0800212c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800212c:	4b0c      	ldr	r3, [pc, #48]	; (8002160 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800212e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002130:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002132:	3104      	adds	r1, #4

08002134 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002134:	480b      	ldr	r0, [pc, #44]	; (8002164 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002136:	4b0c      	ldr	r3, [pc, #48]	; (8002168 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002138:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800213a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800213c:	d3f6      	bcc.n	800212c <CopyDataInit>
  ldr  r2, =_sbss
 800213e:	4a0b      	ldr	r2, [pc, #44]	; (800216c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002140:	e002      	b.n	8002148 <LoopFillZerobss>

08002142 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002142:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002144:	f842 3b04 	str.w	r3, [r2], #4

08002148 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002148:	4b09      	ldr	r3, [pc, #36]	; (8002170 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800214a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800214c:	d3f9      	bcc.n	8002142 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800214e:	f7ff ffd3 	bl	80020f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002152:	f007 f947 	bl	80093e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002156:	f7ff fb03 	bl	8001760 <main>
  bx  lr    
 800215a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800215c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002160:	0800a8b8 	.word	0x0800a8b8
  ldr  r0, =_sdata
 8002164:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002168:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 800216c:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 8002170:	20003ca0 	.word	0x20003ca0

08002174 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002174:	e7fe      	b.n	8002174 <ADC_IRQHandler>
	...

08002178 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800217c:	4b0e      	ldr	r3, [pc, #56]	; (80021b8 <HAL_Init+0x40>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a0d      	ldr	r2, [pc, #52]	; (80021b8 <HAL_Init+0x40>)
 8002182:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002186:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002188:	4b0b      	ldr	r3, [pc, #44]	; (80021b8 <HAL_Init+0x40>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a0a      	ldr	r2, [pc, #40]	; (80021b8 <HAL_Init+0x40>)
 800218e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002192:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002194:	4b08      	ldr	r3, [pc, #32]	; (80021b8 <HAL_Init+0x40>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a07      	ldr	r2, [pc, #28]	; (80021b8 <HAL_Init+0x40>)
 800219a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800219e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021a0:	2003      	movs	r0, #3
 80021a2:	f000 fd73 	bl	8002c8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021a6:	2000      	movs	r0, #0
 80021a8:	f000 f808 	bl	80021bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021ac:	f7ff fd4e 	bl	8001c4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021b0:	2300      	movs	r3, #0
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	40023c00 	.word	0x40023c00

080021bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021c4:	4b12      	ldr	r3, [pc, #72]	; (8002210 <HAL_InitTick+0x54>)
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	4b12      	ldr	r3, [pc, #72]	; (8002214 <HAL_InitTick+0x58>)
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	4619      	mov	r1, r3
 80021ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80021d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021da:	4618      	mov	r0, r3
 80021dc:	f000 fd8b 	bl	8002cf6 <HAL_SYSTICK_Config>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e00e      	b.n	8002208 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2b0f      	cmp	r3, #15
 80021ee:	d80a      	bhi.n	8002206 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021f0:	2200      	movs	r2, #0
 80021f2:	6879      	ldr	r1, [r7, #4]
 80021f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021f8:	f000 fd53 	bl	8002ca2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021fc:	4a06      	ldr	r2, [pc, #24]	; (8002218 <HAL_InitTick+0x5c>)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002202:	2300      	movs	r3, #0
 8002204:	e000      	b.n	8002208 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
}
 8002208:	4618      	mov	r0, r3
 800220a:	3708      	adds	r7, #8
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	20000008 	.word	0x20000008
 8002214:	20000010 	.word	0x20000010
 8002218:	2000000c 	.word	0x2000000c

0800221c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002220:	4b06      	ldr	r3, [pc, #24]	; (800223c <HAL_IncTick+0x20>)
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	461a      	mov	r2, r3
 8002226:	4b06      	ldr	r3, [pc, #24]	; (8002240 <HAL_IncTick+0x24>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4413      	add	r3, r2
 800222c:	4a04      	ldr	r2, [pc, #16]	; (8002240 <HAL_IncTick+0x24>)
 800222e:	6013      	str	r3, [r2, #0]
}
 8002230:	bf00      	nop
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	20000010 	.word	0x20000010
 8002240:	20001c2c 	.word	0x20001c2c

08002244 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  return uwTick;
 8002248:	4b03      	ldr	r3, [pc, #12]	; (8002258 <HAL_GetTick+0x14>)
 800224a:	681b      	ldr	r3, [r3, #0]
}
 800224c:	4618      	mov	r0, r3
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	20001c2c 	.word	0x20001c2c

0800225c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002264:	f7ff ffee 	bl	8002244 <HAL_GetTick>
 8002268:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002274:	d005      	beq.n	8002282 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002276:	4b09      	ldr	r3, [pc, #36]	; (800229c <HAL_Delay+0x40>)
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	461a      	mov	r2, r3
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	4413      	add	r3, r2
 8002280:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002282:	bf00      	nop
 8002284:	f7ff ffde 	bl	8002244 <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	68fa      	ldr	r2, [r7, #12]
 8002290:	429a      	cmp	r2, r3
 8002292:	d8f7      	bhi.n	8002284 <HAL_Delay+0x28>
  {
  }
}
 8002294:	bf00      	nop
 8002296:	3710      	adds	r7, #16
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	20000010 	.word	0x20000010

080022a0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022a8:	2300      	movs	r3, #0
 80022aa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d101      	bne.n	80022b6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e033      	b.n	800231e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d109      	bne.n	80022d2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f7ff fcec 	bl	8001c9c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d6:	f003 0310 	and.w	r3, r3, #16
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d118      	bne.n	8002310 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80022e6:	f023 0302 	bic.w	r3, r3, #2
 80022ea:	f043 0202 	orr.w	r2, r3, #2
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f000 fa7c 	bl	80027f0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002302:	f023 0303 	bic.w	r3, r3, #3
 8002306:	f043 0201 	orr.w	r2, r3, #1
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	641a      	str	r2, [r3, #64]	; 0x40
 800230e:	e001      	b.n	8002314 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800231c:	7bfb      	ldrb	r3, [r7, #15]
}
 800231e:	4618      	mov	r0, r3
 8002320:	3710      	adds	r7, #16
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
	...

08002328 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b086      	sub	sp, #24
 800232c:	af00      	add	r7, sp, #0
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002334:	2300      	movs	r3, #0
 8002336:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800233e:	2b01      	cmp	r3, #1
 8002340:	d101      	bne.n	8002346 <HAL_ADC_Start_DMA+0x1e>
 8002342:	2302      	movs	r3, #2
 8002344:	e0b1      	b.n	80024aa <HAL_ADC_Start_DMA+0x182>
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2201      	movs	r2, #1
 800234a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	f003 0301 	and.w	r3, r3, #1
 8002358:	2b01      	cmp	r3, #1
 800235a:	d018      	beq.n	800238e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	689a      	ldr	r2, [r3, #8]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f042 0201 	orr.w	r2, r2, #1
 800236a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800236c:	4b51      	ldr	r3, [pc, #324]	; (80024b4 <HAL_ADC_Start_DMA+0x18c>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a51      	ldr	r2, [pc, #324]	; (80024b8 <HAL_ADC_Start_DMA+0x190>)
 8002372:	fba2 2303 	umull	r2, r3, r2, r3
 8002376:	0c9a      	lsrs	r2, r3, #18
 8002378:	4613      	mov	r3, r2
 800237a:	005b      	lsls	r3, r3, #1
 800237c:	4413      	add	r3, r2
 800237e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002380:	e002      	b.n	8002388 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	3b01      	subs	r3, #1
 8002386:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d1f9      	bne.n	8002382 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	f003 0301 	and.w	r3, r3, #1
 8002398:	2b01      	cmp	r3, #1
 800239a:	f040 8085 	bne.w	80024a8 <HAL_ADC_Start_DMA+0x180>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80023a6:	f023 0301 	bic.w	r3, r3, #1
 80023aa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d007      	beq.n	80023d0 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80023c8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023dc:	d106      	bne.n	80023ec <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e2:	f023 0206 	bic.w	r2, r3, #6
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	645a      	str	r2, [r3, #68]	; 0x44
 80023ea:	e002      	b.n	80023f2 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2200      	movs	r2, #0
 80023f0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2200      	movs	r2, #0
 80023f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023fa:	4b30      	ldr	r3, [pc, #192]	; (80024bc <HAL_ADC_Start_DMA+0x194>)
 80023fc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002402:	4a2f      	ldr	r2, [pc, #188]	; (80024c0 <HAL_ADC_Start_DMA+0x198>)
 8002404:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800240a:	4a2e      	ldr	r2, [pc, #184]	; (80024c4 <HAL_ADC_Start_DMA+0x19c>)
 800240c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002412:	4a2d      	ldr	r2, [pc, #180]	; (80024c8 <HAL_ADC_Start_DMA+0x1a0>)
 8002414:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800241e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	685a      	ldr	r2, [r3, #4]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800242e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	689a      	ldr	r2, [r3, #8]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800243e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	334c      	adds	r3, #76	; 0x4c
 800244a:	4619      	mov	r1, r3
 800244c:	68ba      	ldr	r2, [r7, #8]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f000 fd0c 	bl	8002e6c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f003 031f 	and.w	r3, r3, #31
 800245c:	2b00      	cmp	r3, #0
 800245e:	d10f      	bne.n	8002480 <HAL_ADC_Start_DMA+0x158>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d11c      	bne.n	80024a8 <HAL_ADC_Start_DMA+0x180>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	689a      	ldr	r2, [r3, #8]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800247c:	609a      	str	r2, [r3, #8]
 800247e:	e013      	b.n	80024a8 <HAL_ADC_Start_DMA+0x180>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a11      	ldr	r2, [pc, #68]	; (80024cc <HAL_ADC_Start_DMA+0x1a4>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d10e      	bne.n	80024a8 <HAL_ADC_Start_DMA+0x180>
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d107      	bne.n	80024a8 <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	689a      	ldr	r2, [r3, #8]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80024a6:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3718      	adds	r7, #24
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	20000008 	.word	0x20000008
 80024b8:	431bde83 	.word	0x431bde83
 80024bc:	40012300 	.word	0x40012300
 80024c0:	080029e9 	.word	0x080029e9
 80024c4:	08002aa3 	.word	0x08002aa3
 80024c8:	08002abf 	.word	0x08002abf
 80024cc:	40012000 	.word	0x40012000

080024d0 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024d8:	2300      	movs	r3, #0
 80024da:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d101      	bne.n	80024ea <HAL_ADC_Stop_DMA+0x1a>
 80024e6:	2302      	movs	r3, #2
 80024e8:	e038      	b.n	800255c <HAL_ADC_Stop_DMA+0x8c>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2201      	movs	r2, #1
 80024ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	689a      	ldr	r2, [r3, #8]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f022 0201 	bic.w	r2, r2, #1
 8002500:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	f003 0301 	and.w	r3, r3, #1
 800250c:	2b00      	cmp	r3, #0
 800250e:	d120      	bne.n	8002552 <HAL_ADC_Stop_DMA+0x82>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	689a      	ldr	r2, [r3, #8]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800251e:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002524:	4618      	mov	r0, r3
 8002526:	f000 fcf9 	bl	8002f1c <HAL_DMA_Abort>
 800252a:	4603      	mov	r3, r0
 800252c:	73fb      	strb	r3, [r7, #15]
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	685a      	ldr	r2, [r3, #4]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 800253c:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002542:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002546:	f023 0301 	bic.w	r3, r3, #1
 800254a:	f043 0201 	orr.w	r2, r3, #1
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800255a:	7bfb      	ldrb	r3, [r7, #15]
}
 800255c:	4618      	mov	r0, r3
 800255e:	3710      	adds	r7, #16
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}

08002564 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800256c:	bf00      	nop
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002580:	bf00      	nop
 8002582:	370c      	adds	r7, #12
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800258c:	b480      	push	{r7}
 800258e:	b085      	sub	sp, #20
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002596:	2300      	movs	r3, #0
 8002598:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d101      	bne.n	80025a8 <HAL_ADC_ConfigChannel+0x1c>
 80025a4:	2302      	movs	r3, #2
 80025a6:	e113      	b.n	80027d0 <HAL_ADC_ConfigChannel+0x244>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2201      	movs	r2, #1
 80025ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	2b09      	cmp	r3, #9
 80025b6:	d925      	bls.n	8002604 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	68d9      	ldr	r1, [r3, #12]
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	461a      	mov	r2, r3
 80025c6:	4613      	mov	r3, r2
 80025c8:	005b      	lsls	r3, r3, #1
 80025ca:	4413      	add	r3, r2
 80025cc:	3b1e      	subs	r3, #30
 80025ce:	2207      	movs	r2, #7
 80025d0:	fa02 f303 	lsl.w	r3, r2, r3
 80025d4:	43da      	mvns	r2, r3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	400a      	ands	r2, r1
 80025dc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	68d9      	ldr	r1, [r3, #12]
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	689a      	ldr	r2, [r3, #8]
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	4618      	mov	r0, r3
 80025f0:	4603      	mov	r3, r0
 80025f2:	005b      	lsls	r3, r3, #1
 80025f4:	4403      	add	r3, r0
 80025f6:	3b1e      	subs	r3, #30
 80025f8:	409a      	lsls	r2, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	430a      	orrs	r2, r1
 8002600:	60da      	str	r2, [r3, #12]
 8002602:	e022      	b.n	800264a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	6919      	ldr	r1, [r3, #16]
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	b29b      	uxth	r3, r3
 8002610:	461a      	mov	r2, r3
 8002612:	4613      	mov	r3, r2
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	4413      	add	r3, r2
 8002618:	2207      	movs	r2, #7
 800261a:	fa02 f303 	lsl.w	r3, r2, r3
 800261e:	43da      	mvns	r2, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	400a      	ands	r2, r1
 8002626:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	6919      	ldr	r1, [r3, #16]
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	689a      	ldr	r2, [r3, #8]
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	b29b      	uxth	r3, r3
 8002638:	4618      	mov	r0, r3
 800263a:	4603      	mov	r3, r0
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	4403      	add	r3, r0
 8002640:	409a      	lsls	r2, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	430a      	orrs	r2, r1
 8002648:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	2b06      	cmp	r3, #6
 8002650:	d824      	bhi.n	800269c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	685a      	ldr	r2, [r3, #4]
 800265c:	4613      	mov	r3, r2
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	4413      	add	r3, r2
 8002662:	3b05      	subs	r3, #5
 8002664:	221f      	movs	r2, #31
 8002666:	fa02 f303 	lsl.w	r3, r2, r3
 800266a:	43da      	mvns	r2, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	400a      	ands	r2, r1
 8002672:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	b29b      	uxth	r3, r3
 8002680:	4618      	mov	r0, r3
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	685a      	ldr	r2, [r3, #4]
 8002686:	4613      	mov	r3, r2
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	4413      	add	r3, r2
 800268c:	3b05      	subs	r3, #5
 800268e:	fa00 f203 	lsl.w	r2, r0, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	430a      	orrs	r2, r1
 8002698:	635a      	str	r2, [r3, #52]	; 0x34
 800269a:	e04c      	b.n	8002736 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	2b0c      	cmp	r3, #12
 80026a2:	d824      	bhi.n	80026ee <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	685a      	ldr	r2, [r3, #4]
 80026ae:	4613      	mov	r3, r2
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	4413      	add	r3, r2
 80026b4:	3b23      	subs	r3, #35	; 0x23
 80026b6:	221f      	movs	r2, #31
 80026b8:	fa02 f303 	lsl.w	r3, r2, r3
 80026bc:	43da      	mvns	r2, r3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	400a      	ands	r2, r1
 80026c4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	4618      	mov	r0, r3
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685a      	ldr	r2, [r3, #4]
 80026d8:	4613      	mov	r3, r2
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	4413      	add	r3, r2
 80026de:	3b23      	subs	r3, #35	; 0x23
 80026e0:	fa00 f203 	lsl.w	r2, r0, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	430a      	orrs	r2, r1
 80026ea:	631a      	str	r2, [r3, #48]	; 0x30
 80026ec:	e023      	b.n	8002736 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	685a      	ldr	r2, [r3, #4]
 80026f8:	4613      	mov	r3, r2
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	4413      	add	r3, r2
 80026fe:	3b41      	subs	r3, #65	; 0x41
 8002700:	221f      	movs	r2, #31
 8002702:	fa02 f303 	lsl.w	r3, r2, r3
 8002706:	43da      	mvns	r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	400a      	ands	r2, r1
 800270e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	b29b      	uxth	r3, r3
 800271c:	4618      	mov	r0, r3
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	685a      	ldr	r2, [r3, #4]
 8002722:	4613      	mov	r3, r2
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	4413      	add	r3, r2
 8002728:	3b41      	subs	r3, #65	; 0x41
 800272a:	fa00 f203 	lsl.w	r2, r0, r3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	430a      	orrs	r2, r1
 8002734:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002736:	4b29      	ldr	r3, [pc, #164]	; (80027dc <HAL_ADC_ConfigChannel+0x250>)
 8002738:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a28      	ldr	r2, [pc, #160]	; (80027e0 <HAL_ADC_ConfigChannel+0x254>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d10f      	bne.n	8002764 <HAL_ADC_ConfigChannel+0x1d8>
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2b12      	cmp	r3, #18
 800274a:	d10b      	bne.n	8002764 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a1d      	ldr	r2, [pc, #116]	; (80027e0 <HAL_ADC_ConfigChannel+0x254>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d12b      	bne.n	80027c6 <HAL_ADC_ConfigChannel+0x23a>
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a1c      	ldr	r2, [pc, #112]	; (80027e4 <HAL_ADC_ConfigChannel+0x258>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d003      	beq.n	8002780 <HAL_ADC_ConfigChannel+0x1f4>
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2b11      	cmp	r3, #17
 800277e:	d122      	bne.n	80027c6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a11      	ldr	r2, [pc, #68]	; (80027e4 <HAL_ADC_ConfigChannel+0x258>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d111      	bne.n	80027c6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80027a2:	4b11      	ldr	r3, [pc, #68]	; (80027e8 <HAL_ADC_ConfigChannel+0x25c>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a11      	ldr	r2, [pc, #68]	; (80027ec <HAL_ADC_ConfigChannel+0x260>)
 80027a8:	fba2 2303 	umull	r2, r3, r2, r3
 80027ac:	0c9a      	lsrs	r2, r3, #18
 80027ae:	4613      	mov	r3, r2
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	4413      	add	r3, r2
 80027b4:	005b      	lsls	r3, r3, #1
 80027b6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80027b8:	e002      	b.n	80027c0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	3b01      	subs	r3, #1
 80027be:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d1f9      	bne.n	80027ba <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80027ce:	2300      	movs	r3, #0
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3714      	adds	r7, #20
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr
 80027dc:	40012300 	.word	0x40012300
 80027e0:	40012000 	.word	0x40012000
 80027e4:	10000012 	.word	0x10000012
 80027e8:	20000008 	.word	0x20000008
 80027ec:	431bde83 	.word	0x431bde83

080027f0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b085      	sub	sp, #20
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027f8:	4b79      	ldr	r3, [pc, #484]	; (80029e0 <ADC_Init+0x1f0>)
 80027fa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	685a      	ldr	r2, [r3, #4]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	431a      	orrs	r2, r3
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	685a      	ldr	r2, [r3, #4]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002824:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	6859      	ldr	r1, [r3, #4]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	691b      	ldr	r3, [r3, #16]
 8002830:	021a      	lsls	r2, r3, #8
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	430a      	orrs	r2, r1
 8002838:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	685a      	ldr	r2, [r3, #4]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002848:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	6859      	ldr	r1, [r3, #4]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	689a      	ldr	r2, [r3, #8]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	430a      	orrs	r2, r1
 800285a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	689a      	ldr	r2, [r3, #8]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800286a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	6899      	ldr	r1, [r3, #8]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	68da      	ldr	r2, [r3, #12]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	430a      	orrs	r2, r1
 800287c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002882:	4a58      	ldr	r2, [pc, #352]	; (80029e4 <ADC_Init+0x1f4>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d022      	beq.n	80028ce <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	689a      	ldr	r2, [r3, #8]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002896:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	6899      	ldr	r1, [r3, #8]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	430a      	orrs	r2, r1
 80028a8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	689a      	ldr	r2, [r3, #8]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80028b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	6899      	ldr	r1, [r3, #8]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	430a      	orrs	r2, r1
 80028ca:	609a      	str	r2, [r3, #8]
 80028cc:	e00f      	b.n	80028ee <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	689a      	ldr	r2, [r3, #8]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80028dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	689a      	ldr	r2, [r3, #8]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80028ec:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	689a      	ldr	r2, [r3, #8]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f022 0202 	bic.w	r2, r2, #2
 80028fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	6899      	ldr	r1, [r3, #8]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	7e1b      	ldrb	r3, [r3, #24]
 8002908:	005a      	lsls	r2, r3, #1
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	430a      	orrs	r2, r1
 8002910:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d01b      	beq.n	8002954 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	685a      	ldr	r2, [r3, #4]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800292a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	685a      	ldr	r2, [r3, #4]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800293a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	6859      	ldr	r1, [r3, #4]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002946:	3b01      	subs	r3, #1
 8002948:	035a      	lsls	r2, r3, #13
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	430a      	orrs	r2, r1
 8002950:	605a      	str	r2, [r3, #4]
 8002952:	e007      	b.n	8002964 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	685a      	ldr	r2, [r3, #4]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002962:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002972:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	69db      	ldr	r3, [r3, #28]
 800297e:	3b01      	subs	r3, #1
 8002980:	051a      	lsls	r2, r3, #20
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	430a      	orrs	r2, r1
 8002988:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	689a      	ldr	r2, [r3, #8]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002998:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	6899      	ldr	r1, [r3, #8]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80029a6:	025a      	lsls	r2, r3, #9
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	430a      	orrs	r2, r1
 80029ae:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	689a      	ldr	r2, [r3, #8]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	6899      	ldr	r1, [r3, #8]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	695b      	ldr	r3, [r3, #20]
 80029ca:	029a      	lsls	r2, r3, #10
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	430a      	orrs	r2, r1
 80029d2:	609a      	str	r2, [r3, #8]
}
 80029d4:	bf00      	nop
 80029d6:	3714      	adds	r7, #20
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr
 80029e0:	40012300 	.word	0x40012300
 80029e4:	0f000001 	.word	0x0f000001

080029e8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029f4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d13c      	bne.n	8002a7c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a06:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d12b      	bne.n	8002a74 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d127      	bne.n	8002a74 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a2a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d006      	beq.n	8002a40 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d119      	bne.n	8002a74 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	685a      	ldr	r2, [r3, #4]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f022 0220 	bic.w	r2, r2, #32
 8002a4e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a54:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d105      	bne.n	8002a74 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6c:	f043 0201 	orr.w	r2, r3, #1
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002a74:	68f8      	ldr	r0, [r7, #12]
 8002a76:	f7ff f8cf 	bl	8001c18 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002a7a:	e00e      	b.n	8002a9a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a80:	f003 0310 	and.w	r3, r3, #16
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d003      	beq.n	8002a90 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002a88:	68f8      	ldr	r0, [r7, #12]
 8002a8a:	f7ff fd75 	bl	8002578 <HAL_ADC_ErrorCallback>
}
 8002a8e:	e004      	b.n	8002a9a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	4798      	blx	r3
}
 8002a9a:	bf00      	nop
 8002a9c:	3710      	adds	r7, #16
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	b084      	sub	sp, #16
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aae:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002ab0:	68f8      	ldr	r0, [r7, #12]
 8002ab2:	f7ff fd57 	bl	8002564 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ab6:	bf00      	nop
 8002ab8:	3710      	adds	r7, #16
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}

08002abe <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002abe:	b580      	push	{r7, lr}
 8002ac0:	b084      	sub	sp, #16
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aca:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2240      	movs	r2, #64	; 0x40
 8002ad0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad6:	f043 0204 	orr.w	r2, r3, #4
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002ade:	68f8      	ldr	r0, [r7, #12]
 8002ae0:	f7ff fd4a 	bl	8002578 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ae4:	bf00      	nop
 8002ae6:	3710      	adds	r7, #16
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}

08002aec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b085      	sub	sp, #20
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f003 0307 	and.w	r3, r3, #7
 8002afa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002afc:	4b0c      	ldr	r3, [pc, #48]	; (8002b30 <__NVIC_SetPriorityGrouping+0x44>)
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b02:	68ba      	ldr	r2, [r7, #8]
 8002b04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b08:	4013      	ands	r3, r2
 8002b0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b1e:	4a04      	ldr	r2, [pc, #16]	; (8002b30 <__NVIC_SetPriorityGrouping+0x44>)
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	60d3      	str	r3, [r2, #12]
}
 8002b24:	bf00      	nop
 8002b26:	3714      	adds	r7, #20
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr
 8002b30:	e000ed00 	.word	0xe000ed00

08002b34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b34:	b480      	push	{r7}
 8002b36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b38:	4b04      	ldr	r3, [pc, #16]	; (8002b4c <__NVIC_GetPriorityGrouping+0x18>)
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	0a1b      	lsrs	r3, r3, #8
 8002b3e:	f003 0307 	and.w	r3, r3, #7
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr
 8002b4c:	e000ed00 	.word	0xe000ed00

08002b50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	4603      	mov	r3, r0
 8002b58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	db0b      	blt.n	8002b7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b62:	79fb      	ldrb	r3, [r7, #7]
 8002b64:	f003 021f 	and.w	r2, r3, #31
 8002b68:	4907      	ldr	r1, [pc, #28]	; (8002b88 <__NVIC_EnableIRQ+0x38>)
 8002b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b6e:	095b      	lsrs	r3, r3, #5
 8002b70:	2001      	movs	r0, #1
 8002b72:	fa00 f202 	lsl.w	r2, r0, r2
 8002b76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b7a:	bf00      	nop
 8002b7c:	370c      	adds	r7, #12
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	e000e100 	.word	0xe000e100

08002b8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	4603      	mov	r3, r0
 8002b94:	6039      	str	r1, [r7, #0]
 8002b96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	db0a      	blt.n	8002bb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	b2da      	uxtb	r2, r3
 8002ba4:	490c      	ldr	r1, [pc, #48]	; (8002bd8 <__NVIC_SetPriority+0x4c>)
 8002ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002baa:	0112      	lsls	r2, r2, #4
 8002bac:	b2d2      	uxtb	r2, r2
 8002bae:	440b      	add	r3, r1
 8002bb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bb4:	e00a      	b.n	8002bcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	b2da      	uxtb	r2, r3
 8002bba:	4908      	ldr	r1, [pc, #32]	; (8002bdc <__NVIC_SetPriority+0x50>)
 8002bbc:	79fb      	ldrb	r3, [r7, #7]
 8002bbe:	f003 030f 	and.w	r3, r3, #15
 8002bc2:	3b04      	subs	r3, #4
 8002bc4:	0112      	lsls	r2, r2, #4
 8002bc6:	b2d2      	uxtb	r2, r2
 8002bc8:	440b      	add	r3, r1
 8002bca:	761a      	strb	r2, [r3, #24]
}
 8002bcc:	bf00      	nop
 8002bce:	370c      	adds	r7, #12
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr
 8002bd8:	e000e100 	.word	0xe000e100
 8002bdc:	e000ed00 	.word	0xe000ed00

08002be0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b089      	sub	sp, #36	; 0x24
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	60b9      	str	r1, [r7, #8]
 8002bea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f003 0307 	and.w	r3, r3, #7
 8002bf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	f1c3 0307 	rsb	r3, r3, #7
 8002bfa:	2b04      	cmp	r3, #4
 8002bfc:	bf28      	it	cs
 8002bfe:	2304      	movcs	r3, #4
 8002c00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	3304      	adds	r3, #4
 8002c06:	2b06      	cmp	r3, #6
 8002c08:	d902      	bls.n	8002c10 <NVIC_EncodePriority+0x30>
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	3b03      	subs	r3, #3
 8002c0e:	e000      	b.n	8002c12 <NVIC_EncodePriority+0x32>
 8002c10:	2300      	movs	r3, #0
 8002c12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1e:	43da      	mvns	r2, r3
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	401a      	ands	r2, r3
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c28:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c32:	43d9      	mvns	r1, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c38:	4313      	orrs	r3, r2
         );
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3724      	adds	r7, #36	; 0x24
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr
	...

08002c48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	3b01      	subs	r3, #1
 8002c54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c58:	d301      	bcc.n	8002c5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e00f      	b.n	8002c7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c5e:	4a0a      	ldr	r2, [pc, #40]	; (8002c88 <SysTick_Config+0x40>)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	3b01      	subs	r3, #1
 8002c64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c66:	210f      	movs	r1, #15
 8002c68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c6c:	f7ff ff8e 	bl	8002b8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c70:	4b05      	ldr	r3, [pc, #20]	; (8002c88 <SysTick_Config+0x40>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c76:	4b04      	ldr	r3, [pc, #16]	; (8002c88 <SysTick_Config+0x40>)
 8002c78:	2207      	movs	r2, #7
 8002c7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3708      	adds	r7, #8
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	e000e010 	.word	0xe000e010

08002c8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f7ff ff29 	bl	8002aec <__NVIC_SetPriorityGrouping>
}
 8002c9a:	bf00      	nop
 8002c9c:	3708      	adds	r7, #8
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}

08002ca2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ca2:	b580      	push	{r7, lr}
 8002ca4:	b086      	sub	sp, #24
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	4603      	mov	r3, r0
 8002caa:	60b9      	str	r1, [r7, #8]
 8002cac:	607a      	str	r2, [r7, #4]
 8002cae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002cb4:	f7ff ff3e 	bl	8002b34 <__NVIC_GetPriorityGrouping>
 8002cb8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	68b9      	ldr	r1, [r7, #8]
 8002cbe:	6978      	ldr	r0, [r7, #20]
 8002cc0:	f7ff ff8e 	bl	8002be0 <NVIC_EncodePriority>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cca:	4611      	mov	r1, r2
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f7ff ff5d 	bl	8002b8c <__NVIC_SetPriority>
}
 8002cd2:	bf00      	nop
 8002cd4:	3718      	adds	r7, #24
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}

08002cda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cda:	b580      	push	{r7, lr}
 8002cdc:	b082      	sub	sp, #8
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7ff ff31 	bl	8002b50 <__NVIC_EnableIRQ>
}
 8002cee:	bf00      	nop
 8002cf0:	3708      	adds	r7, #8
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}

08002cf6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cf6:	b580      	push	{r7, lr}
 8002cf8:	b082      	sub	sp, #8
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f7ff ffa2 	bl	8002c48 <SysTick_Config>
 8002d04:	4603      	mov	r3, r0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3708      	adds	r7, #8
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
	...

08002d10 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b086      	sub	sp, #24
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002d1c:	f7ff fa92 	bl	8002244 <HAL_GetTick>
 8002d20:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d101      	bne.n	8002d2c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e099      	b.n	8002e60 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2202      	movs	r2, #2
 8002d38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f022 0201 	bic.w	r2, r2, #1
 8002d4a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d4c:	e00f      	b.n	8002d6e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d4e:	f7ff fa79 	bl	8002244 <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	2b05      	cmp	r3, #5
 8002d5a:	d908      	bls.n	8002d6e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2220      	movs	r2, #32
 8002d60:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2203      	movs	r2, #3
 8002d66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e078      	b.n	8002e60 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0301 	and.w	r3, r3, #1
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d1e8      	bne.n	8002d4e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002d84:	697a      	ldr	r2, [r7, #20]
 8002d86:	4b38      	ldr	r3, [pc, #224]	; (8002e68 <HAL_DMA_Init+0x158>)
 8002d88:	4013      	ands	r3, r2
 8002d8a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	685a      	ldr	r2, [r3, #4]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	691b      	ldr	r3, [r3, #16]
 8002da0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002da6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	699b      	ldr	r3, [r3, #24]
 8002dac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002db2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6a1b      	ldr	r3, [r3, #32]
 8002db8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002dba:	697a      	ldr	r2, [r7, #20]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc4:	2b04      	cmp	r3, #4
 8002dc6:	d107      	bne.n	8002dd8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	697a      	ldr	r2, [r7, #20]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	697a      	ldr	r2, [r7, #20]
 8002dde:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	695b      	ldr	r3, [r3, #20]
 8002de6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	f023 0307 	bic.w	r3, r3, #7
 8002dee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df4:	697a      	ldr	r2, [r7, #20]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfe:	2b04      	cmp	r3, #4
 8002e00:	d117      	bne.n	8002e32 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e06:	697a      	ldr	r2, [r7, #20]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d00e      	beq.n	8002e32 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f000 fb0d 	bl	8003434 <DMA_CheckFifoParam>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d008      	beq.n	8002e32 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2240      	movs	r2, #64	; 0x40
 8002e24:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2201      	movs	r2, #1
 8002e2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e016      	b.n	8002e60 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	697a      	ldr	r2, [r7, #20]
 8002e38:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f000 fac4 	bl	80033c8 <DMA_CalcBaseAndBitshift>
 8002e40:	4603      	mov	r3, r0
 8002e42:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e48:	223f      	movs	r2, #63	; 0x3f
 8002e4a:	409a      	lsls	r2, r3
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2200      	movs	r2, #0
 8002e54:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2201      	movs	r2, #1
 8002e5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002e5e:	2300      	movs	r3, #0
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3718      	adds	r7, #24
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	f010803f 	.word	0xf010803f

08002e6c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b086      	sub	sp, #24
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	60f8      	str	r0, [r7, #12]
 8002e74:	60b9      	str	r1, [r7, #8]
 8002e76:	607a      	str	r2, [r7, #4]
 8002e78:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e82:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d101      	bne.n	8002e92 <HAL_DMA_Start_IT+0x26>
 8002e8e:	2302      	movs	r3, #2
 8002e90:	e040      	b.n	8002f14 <HAL_DMA_Start_IT+0xa8>
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2201      	movs	r2, #1
 8002e96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d12f      	bne.n	8002f06 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2202      	movs	r2, #2
 8002eaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	68b9      	ldr	r1, [r7, #8]
 8002eba:	68f8      	ldr	r0, [r7, #12]
 8002ebc:	f000 fa56 	bl	800336c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ec4:	223f      	movs	r2, #63	; 0x3f
 8002ec6:	409a      	lsls	r2, r3
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f042 0216 	orr.w	r2, r2, #22
 8002eda:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d007      	beq.n	8002ef4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f042 0208 	orr.w	r2, r2, #8
 8002ef2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f042 0201 	orr.w	r2, r2, #1
 8002f02:	601a      	str	r2, [r3, #0]
 8002f04:	e005      	b.n	8002f12 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002f0e:	2302      	movs	r3, #2
 8002f10:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002f12:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3718      	adds	r7, #24
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f28:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002f2a:	f7ff f98b 	bl	8002244 <HAL_GetTick>
 8002f2e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d008      	beq.n	8002f4e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2280      	movs	r2, #128	; 0x80
 8002f40:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e052      	b.n	8002ff4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f022 0216 	bic.w	r2, r2, #22
 8002f5c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	695a      	ldr	r2, [r3, #20]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f6c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d103      	bne.n	8002f7e <HAL_DMA_Abort+0x62>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d007      	beq.n	8002f8e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f022 0208 	bic.w	r2, r2, #8
 8002f8c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f022 0201 	bic.w	r2, r2, #1
 8002f9c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f9e:	e013      	b.n	8002fc8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002fa0:	f7ff f950 	bl	8002244 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	2b05      	cmp	r3, #5
 8002fac:	d90c      	bls.n	8002fc8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2220      	movs	r2, #32
 8002fb2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2203      	movs	r2, #3
 8002fc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	e015      	b.n	8002ff4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0301 	and.w	r3, r3, #1
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d1e4      	bne.n	8002fa0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fda:	223f      	movs	r2, #63	; 0x3f
 8002fdc:	409a      	lsls	r2, r3
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2201      	movs	r2, #1
 8002fee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8002ff2:	2300      	movs	r3, #0
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3710      	adds	r7, #16
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}

08002ffc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800300a:	b2db      	uxtb	r3, r3
 800300c:	2b02      	cmp	r3, #2
 800300e:	d004      	beq.n	800301a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2280      	movs	r2, #128	; 0x80
 8003014:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e00c      	b.n	8003034 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2205      	movs	r2, #5
 800301e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f022 0201 	bic.w	r2, r2, #1
 8003030:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003032:	2300      	movs	r3, #0
}
 8003034:	4618      	mov	r0, r3
 8003036:	370c      	adds	r7, #12
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr

08003040 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b086      	sub	sp, #24
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003048:	2300      	movs	r3, #0
 800304a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800304c:	4b92      	ldr	r3, [pc, #584]	; (8003298 <HAL_DMA_IRQHandler+0x258>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a92      	ldr	r2, [pc, #584]	; (800329c <HAL_DMA_IRQHandler+0x25c>)
 8003052:	fba2 2303 	umull	r2, r3, r2, r3
 8003056:	0a9b      	lsrs	r3, r3, #10
 8003058:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800305e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800306a:	2208      	movs	r2, #8
 800306c:	409a      	lsls	r2, r3
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	4013      	ands	r3, r2
 8003072:	2b00      	cmp	r3, #0
 8003074:	d01a      	beq.n	80030ac <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0304 	and.w	r3, r3, #4
 8003080:	2b00      	cmp	r3, #0
 8003082:	d013      	beq.n	80030ac <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f022 0204 	bic.w	r2, r2, #4
 8003092:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003098:	2208      	movs	r2, #8
 800309a:	409a      	lsls	r2, r3
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030a4:	f043 0201 	orr.w	r2, r3, #1
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030b0:	2201      	movs	r2, #1
 80030b2:	409a      	lsls	r2, r3
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	4013      	ands	r3, r2
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d012      	beq.n	80030e2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	695b      	ldr	r3, [r3, #20]
 80030c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d00b      	beq.n	80030e2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ce:	2201      	movs	r2, #1
 80030d0:	409a      	lsls	r2, r3
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030da:	f043 0202 	orr.w	r2, r3, #2
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030e6:	2204      	movs	r2, #4
 80030e8:	409a      	lsls	r2, r3
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	4013      	ands	r3, r2
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d012      	beq.n	8003118 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0302 	and.w	r3, r3, #2
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d00b      	beq.n	8003118 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003104:	2204      	movs	r2, #4
 8003106:	409a      	lsls	r2, r3
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003110:	f043 0204 	orr.w	r2, r3, #4
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800311c:	2210      	movs	r2, #16
 800311e:	409a      	lsls	r2, r3
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	4013      	ands	r3, r2
 8003124:	2b00      	cmp	r3, #0
 8003126:	d043      	beq.n	80031b0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0308 	and.w	r3, r3, #8
 8003132:	2b00      	cmp	r3, #0
 8003134:	d03c      	beq.n	80031b0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800313a:	2210      	movs	r2, #16
 800313c:	409a      	lsls	r2, r3
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d018      	beq.n	8003182 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d108      	bne.n	8003170 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003162:	2b00      	cmp	r3, #0
 8003164:	d024      	beq.n	80031b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	4798      	blx	r3
 800316e:	e01f      	b.n	80031b0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003174:	2b00      	cmp	r3, #0
 8003176:	d01b      	beq.n	80031b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	4798      	blx	r3
 8003180:	e016      	b.n	80031b0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800318c:	2b00      	cmp	r3, #0
 800318e:	d107      	bne.n	80031a0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f022 0208 	bic.w	r2, r2, #8
 800319e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d003      	beq.n	80031b0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031b4:	2220      	movs	r2, #32
 80031b6:	409a      	lsls	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	4013      	ands	r3, r2
 80031bc:	2b00      	cmp	r3, #0
 80031be:	f000 808e 	beq.w	80032de <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0310 	and.w	r3, r3, #16
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	f000 8086 	beq.w	80032de <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031d6:	2220      	movs	r2, #32
 80031d8:	409a      	lsls	r2, r3
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	2b05      	cmp	r3, #5
 80031e8:	d136      	bne.n	8003258 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f022 0216 	bic.w	r2, r2, #22
 80031f8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	695a      	ldr	r2, [r3, #20]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003208:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320e:	2b00      	cmp	r3, #0
 8003210:	d103      	bne.n	800321a <HAL_DMA_IRQHandler+0x1da>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003216:	2b00      	cmp	r3, #0
 8003218:	d007      	beq.n	800322a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f022 0208 	bic.w	r2, r2, #8
 8003228:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800322e:	223f      	movs	r2, #63	; 0x3f
 8003230:	409a      	lsls	r2, r3
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2201      	movs	r2, #1
 8003242:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800324a:	2b00      	cmp	r3, #0
 800324c:	d07d      	beq.n	800334a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	4798      	blx	r3
        }
        return;
 8003256:	e078      	b.n	800334a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d01c      	beq.n	80032a0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003270:	2b00      	cmp	r3, #0
 8003272:	d108      	bne.n	8003286 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003278:	2b00      	cmp	r3, #0
 800327a:	d030      	beq.n	80032de <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	4798      	blx	r3
 8003284:	e02b      	b.n	80032de <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800328a:	2b00      	cmp	r3, #0
 800328c:	d027      	beq.n	80032de <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	4798      	blx	r3
 8003296:	e022      	b.n	80032de <HAL_DMA_IRQHandler+0x29e>
 8003298:	20000008 	.word	0x20000008
 800329c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d10f      	bne.n	80032ce <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f022 0210 	bic.w	r2, r2, #16
 80032bc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2200      	movs	r2, #0
 80032c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2201      	movs	r2, #1
 80032ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d003      	beq.n	80032de <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d032      	beq.n	800334c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ea:	f003 0301 	and.w	r3, r3, #1
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d022      	beq.n	8003338 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2205      	movs	r2, #5
 80032f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f022 0201 	bic.w	r2, r2, #1
 8003308:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	3301      	adds	r3, #1
 800330e:	60bb      	str	r3, [r7, #8]
 8003310:	697a      	ldr	r2, [r7, #20]
 8003312:	429a      	cmp	r2, r3
 8003314:	d307      	bcc.n	8003326 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0301 	and.w	r3, r3, #1
 8003320:	2b00      	cmp	r3, #0
 8003322:	d1f2      	bne.n	800330a <HAL_DMA_IRQHandler+0x2ca>
 8003324:	e000      	b.n	8003328 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003326:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2200      	movs	r2, #0
 800332c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2201      	movs	r2, #1
 8003334:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800333c:	2b00      	cmp	r3, #0
 800333e:	d005      	beq.n	800334c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	4798      	blx	r3
 8003348:	e000      	b.n	800334c <HAL_DMA_IRQHandler+0x30c>
        return;
 800334a:	bf00      	nop
    }
  }
}
 800334c:	3718      	adds	r7, #24
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop

08003354 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003360:	4618      	mov	r0, r3
 8003362:	370c      	adds	r7, #12
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr

0800336c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800336c:	b480      	push	{r7}
 800336e:	b085      	sub	sp, #20
 8003370:	af00      	add	r7, sp, #0
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	60b9      	str	r1, [r7, #8]
 8003376:	607a      	str	r2, [r7, #4]
 8003378:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003388:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	683a      	ldr	r2, [r7, #0]
 8003390:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	2b40      	cmp	r3, #64	; 0x40
 8003398:	d108      	bne.n	80033ac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	68ba      	ldr	r2, [r7, #8]
 80033a8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80033aa:	e007      	b.n	80033bc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	68ba      	ldr	r2, [r7, #8]
 80033b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	60da      	str	r2, [r3, #12]
}
 80033bc:	bf00      	nop
 80033be:	3714      	adds	r7, #20
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr

080033c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b085      	sub	sp, #20
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	3b10      	subs	r3, #16
 80033d8:	4a14      	ldr	r2, [pc, #80]	; (800342c <DMA_CalcBaseAndBitshift+0x64>)
 80033da:	fba2 2303 	umull	r2, r3, r2, r3
 80033de:	091b      	lsrs	r3, r3, #4
 80033e0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80033e2:	4a13      	ldr	r2, [pc, #76]	; (8003430 <DMA_CalcBaseAndBitshift+0x68>)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	4413      	add	r3, r2
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	461a      	mov	r2, r3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2b03      	cmp	r3, #3
 80033f4:	d909      	bls.n	800340a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80033fe:	f023 0303 	bic.w	r3, r3, #3
 8003402:	1d1a      	adds	r2, r3, #4
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	659a      	str	r2, [r3, #88]	; 0x58
 8003408:	e007      	b.n	800341a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003412:	f023 0303 	bic.w	r3, r3, #3
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800341e:	4618      	mov	r0, r3
 8003420:	3714      	adds	r7, #20
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr
 800342a:	bf00      	nop
 800342c:	aaaaaaab 	.word	0xaaaaaaab
 8003430:	0800a79c 	.word	0x0800a79c

08003434 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003434:	b480      	push	{r7}
 8003436:	b085      	sub	sp, #20
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800343c:	2300      	movs	r3, #0
 800343e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003444:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	699b      	ldr	r3, [r3, #24]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d11f      	bne.n	800348e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	2b03      	cmp	r3, #3
 8003452:	d855      	bhi.n	8003500 <DMA_CheckFifoParam+0xcc>
 8003454:	a201      	add	r2, pc, #4	; (adr r2, 800345c <DMA_CheckFifoParam+0x28>)
 8003456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800345a:	bf00      	nop
 800345c:	0800346d 	.word	0x0800346d
 8003460:	0800347f 	.word	0x0800347f
 8003464:	0800346d 	.word	0x0800346d
 8003468:	08003501 	.word	0x08003501
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003470:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d045      	beq.n	8003504 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800347c:	e042      	b.n	8003504 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003482:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003486:	d13f      	bne.n	8003508 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800348c:	e03c      	b.n	8003508 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	699b      	ldr	r3, [r3, #24]
 8003492:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003496:	d121      	bne.n	80034dc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	2b03      	cmp	r3, #3
 800349c:	d836      	bhi.n	800350c <DMA_CheckFifoParam+0xd8>
 800349e:	a201      	add	r2, pc, #4	; (adr r2, 80034a4 <DMA_CheckFifoParam+0x70>)
 80034a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034a4:	080034b5 	.word	0x080034b5
 80034a8:	080034bb 	.word	0x080034bb
 80034ac:	080034b5 	.word	0x080034b5
 80034b0:	080034cd 	.word	0x080034cd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	73fb      	strb	r3, [r7, #15]
      break;
 80034b8:	e02f      	b.n	800351a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d024      	beq.n	8003510 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034ca:	e021      	b.n	8003510 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80034d4:	d11e      	bne.n	8003514 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80034da:	e01b      	b.n	8003514 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d902      	bls.n	80034e8 <DMA_CheckFifoParam+0xb4>
 80034e2:	2b03      	cmp	r3, #3
 80034e4:	d003      	beq.n	80034ee <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80034e6:	e018      	b.n	800351a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	73fb      	strb	r3, [r7, #15]
      break;
 80034ec:	e015      	b.n	800351a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d00e      	beq.n	8003518 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	73fb      	strb	r3, [r7, #15]
      break;
 80034fe:	e00b      	b.n	8003518 <DMA_CheckFifoParam+0xe4>
      break;
 8003500:	bf00      	nop
 8003502:	e00a      	b.n	800351a <DMA_CheckFifoParam+0xe6>
      break;
 8003504:	bf00      	nop
 8003506:	e008      	b.n	800351a <DMA_CheckFifoParam+0xe6>
      break;
 8003508:	bf00      	nop
 800350a:	e006      	b.n	800351a <DMA_CheckFifoParam+0xe6>
      break;
 800350c:	bf00      	nop
 800350e:	e004      	b.n	800351a <DMA_CheckFifoParam+0xe6>
      break;
 8003510:	bf00      	nop
 8003512:	e002      	b.n	800351a <DMA_CheckFifoParam+0xe6>
      break;   
 8003514:	bf00      	nop
 8003516:	e000      	b.n	800351a <DMA_CheckFifoParam+0xe6>
      break;
 8003518:	bf00      	nop
    }
  } 
  
  return status; 
 800351a:	7bfb      	ldrb	r3, [r7, #15]
}
 800351c:	4618      	mov	r0, r3
 800351e:	3714      	adds	r7, #20
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr

08003528 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003528:	b480      	push	{r7}
 800352a:	b089      	sub	sp, #36	; 0x24
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003532:	2300      	movs	r3, #0
 8003534:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003536:	2300      	movs	r3, #0
 8003538:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800353a:	2300      	movs	r3, #0
 800353c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800353e:	2300      	movs	r3, #0
 8003540:	61fb      	str	r3, [r7, #28]
 8003542:	e159      	b.n	80037f8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003544:	2201      	movs	r2, #1
 8003546:	69fb      	ldr	r3, [r7, #28]
 8003548:	fa02 f303 	lsl.w	r3, r2, r3
 800354c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	697a      	ldr	r2, [r7, #20]
 8003554:	4013      	ands	r3, r2
 8003556:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003558:	693a      	ldr	r2, [r7, #16]
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	429a      	cmp	r2, r3
 800355e:	f040 8148 	bne.w	80037f2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	2b01      	cmp	r3, #1
 8003568:	d00b      	beq.n	8003582 <HAL_GPIO_Init+0x5a>
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	2b02      	cmp	r3, #2
 8003570:	d007      	beq.n	8003582 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003576:	2b11      	cmp	r3, #17
 8003578:	d003      	beq.n	8003582 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	2b12      	cmp	r3, #18
 8003580:	d130      	bne.n	80035e4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003588:	69fb      	ldr	r3, [r7, #28]
 800358a:	005b      	lsls	r3, r3, #1
 800358c:	2203      	movs	r2, #3
 800358e:	fa02 f303 	lsl.w	r3, r2, r3
 8003592:	43db      	mvns	r3, r3
 8003594:	69ba      	ldr	r2, [r7, #24]
 8003596:	4013      	ands	r3, r2
 8003598:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	68da      	ldr	r2, [r3, #12]
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	005b      	lsls	r3, r3, #1
 80035a2:	fa02 f303 	lsl.w	r3, r2, r3
 80035a6:	69ba      	ldr	r2, [r7, #24]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	69ba      	ldr	r2, [r7, #24]
 80035b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80035b8:	2201      	movs	r2, #1
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	fa02 f303 	lsl.w	r3, r2, r3
 80035c0:	43db      	mvns	r3, r3
 80035c2:	69ba      	ldr	r2, [r7, #24]
 80035c4:	4013      	ands	r3, r2
 80035c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	091b      	lsrs	r3, r3, #4
 80035ce:	f003 0201 	and.w	r2, r3, #1
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	fa02 f303 	lsl.w	r3, r2, r3
 80035d8:	69ba      	ldr	r2, [r7, #24]
 80035da:	4313      	orrs	r3, r2
 80035dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	69ba      	ldr	r2, [r7, #24]
 80035e2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	005b      	lsls	r3, r3, #1
 80035ee:	2203      	movs	r2, #3
 80035f0:	fa02 f303 	lsl.w	r3, r2, r3
 80035f4:	43db      	mvns	r3, r3
 80035f6:	69ba      	ldr	r2, [r7, #24]
 80035f8:	4013      	ands	r3, r2
 80035fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	689a      	ldr	r2, [r3, #8]
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	005b      	lsls	r3, r3, #1
 8003604:	fa02 f303 	lsl.w	r3, r2, r3
 8003608:	69ba      	ldr	r2, [r7, #24]
 800360a:	4313      	orrs	r3, r2
 800360c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	69ba      	ldr	r2, [r7, #24]
 8003612:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	2b02      	cmp	r3, #2
 800361a:	d003      	beq.n	8003624 <HAL_GPIO_Init+0xfc>
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	2b12      	cmp	r3, #18
 8003622:	d123      	bne.n	800366c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	08da      	lsrs	r2, r3, #3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	3208      	adds	r2, #8
 800362c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003630:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	f003 0307 	and.w	r3, r3, #7
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	220f      	movs	r2, #15
 800363c:	fa02 f303 	lsl.w	r3, r2, r3
 8003640:	43db      	mvns	r3, r3
 8003642:	69ba      	ldr	r2, [r7, #24]
 8003644:	4013      	ands	r3, r2
 8003646:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	691a      	ldr	r2, [r3, #16]
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	f003 0307 	and.w	r3, r3, #7
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	fa02 f303 	lsl.w	r3, r2, r3
 8003658:	69ba      	ldr	r2, [r7, #24]
 800365a:	4313      	orrs	r3, r2
 800365c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	08da      	lsrs	r2, r3, #3
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	3208      	adds	r2, #8
 8003666:	69b9      	ldr	r1, [r7, #24]
 8003668:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	005b      	lsls	r3, r3, #1
 8003676:	2203      	movs	r2, #3
 8003678:	fa02 f303 	lsl.w	r3, r2, r3
 800367c:	43db      	mvns	r3, r3
 800367e:	69ba      	ldr	r2, [r7, #24]
 8003680:	4013      	ands	r3, r2
 8003682:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	f003 0203 	and.w	r2, r3, #3
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	005b      	lsls	r3, r3, #1
 8003690:	fa02 f303 	lsl.w	r3, r2, r3
 8003694:	69ba      	ldr	r2, [r7, #24]
 8003696:	4313      	orrs	r3, r2
 8003698:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	69ba      	ldr	r2, [r7, #24]
 800369e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	f000 80a2 	beq.w	80037f2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036ae:	2300      	movs	r3, #0
 80036b0:	60fb      	str	r3, [r7, #12]
 80036b2:	4b56      	ldr	r3, [pc, #344]	; (800380c <HAL_GPIO_Init+0x2e4>)
 80036b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036b6:	4a55      	ldr	r2, [pc, #340]	; (800380c <HAL_GPIO_Init+0x2e4>)
 80036b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036bc:	6453      	str	r3, [r2, #68]	; 0x44
 80036be:	4b53      	ldr	r3, [pc, #332]	; (800380c <HAL_GPIO_Init+0x2e4>)
 80036c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036c6:	60fb      	str	r3, [r7, #12]
 80036c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80036ca:	4a51      	ldr	r2, [pc, #324]	; (8003810 <HAL_GPIO_Init+0x2e8>)
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	089b      	lsrs	r3, r3, #2
 80036d0:	3302      	adds	r3, #2
 80036d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	f003 0303 	and.w	r3, r3, #3
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	220f      	movs	r2, #15
 80036e2:	fa02 f303 	lsl.w	r3, r2, r3
 80036e6:	43db      	mvns	r3, r3
 80036e8:	69ba      	ldr	r2, [r7, #24]
 80036ea:	4013      	ands	r3, r2
 80036ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a48      	ldr	r2, [pc, #288]	; (8003814 <HAL_GPIO_Init+0x2ec>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d019      	beq.n	800372a <HAL_GPIO_Init+0x202>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a47      	ldr	r2, [pc, #284]	; (8003818 <HAL_GPIO_Init+0x2f0>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d013      	beq.n	8003726 <HAL_GPIO_Init+0x1fe>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4a46      	ldr	r2, [pc, #280]	; (800381c <HAL_GPIO_Init+0x2f4>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d00d      	beq.n	8003722 <HAL_GPIO_Init+0x1fa>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a45      	ldr	r2, [pc, #276]	; (8003820 <HAL_GPIO_Init+0x2f8>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d007      	beq.n	800371e <HAL_GPIO_Init+0x1f6>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a44      	ldr	r2, [pc, #272]	; (8003824 <HAL_GPIO_Init+0x2fc>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d101      	bne.n	800371a <HAL_GPIO_Init+0x1f2>
 8003716:	2304      	movs	r3, #4
 8003718:	e008      	b.n	800372c <HAL_GPIO_Init+0x204>
 800371a:	2307      	movs	r3, #7
 800371c:	e006      	b.n	800372c <HAL_GPIO_Init+0x204>
 800371e:	2303      	movs	r3, #3
 8003720:	e004      	b.n	800372c <HAL_GPIO_Init+0x204>
 8003722:	2302      	movs	r3, #2
 8003724:	e002      	b.n	800372c <HAL_GPIO_Init+0x204>
 8003726:	2301      	movs	r3, #1
 8003728:	e000      	b.n	800372c <HAL_GPIO_Init+0x204>
 800372a:	2300      	movs	r3, #0
 800372c:	69fa      	ldr	r2, [r7, #28]
 800372e:	f002 0203 	and.w	r2, r2, #3
 8003732:	0092      	lsls	r2, r2, #2
 8003734:	4093      	lsls	r3, r2
 8003736:	69ba      	ldr	r2, [r7, #24]
 8003738:	4313      	orrs	r3, r2
 800373a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800373c:	4934      	ldr	r1, [pc, #208]	; (8003810 <HAL_GPIO_Init+0x2e8>)
 800373e:	69fb      	ldr	r3, [r7, #28]
 8003740:	089b      	lsrs	r3, r3, #2
 8003742:	3302      	adds	r3, #2
 8003744:	69ba      	ldr	r2, [r7, #24]
 8003746:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800374a:	4b37      	ldr	r3, [pc, #220]	; (8003828 <HAL_GPIO_Init+0x300>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	43db      	mvns	r3, r3
 8003754:	69ba      	ldr	r2, [r7, #24]
 8003756:	4013      	ands	r3, r2
 8003758:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d003      	beq.n	800376e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003766:	69ba      	ldr	r2, [r7, #24]
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	4313      	orrs	r3, r2
 800376c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800376e:	4a2e      	ldr	r2, [pc, #184]	; (8003828 <HAL_GPIO_Init+0x300>)
 8003770:	69bb      	ldr	r3, [r7, #24]
 8003772:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003774:	4b2c      	ldr	r3, [pc, #176]	; (8003828 <HAL_GPIO_Init+0x300>)
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	43db      	mvns	r3, r3
 800377e:	69ba      	ldr	r2, [r7, #24]
 8003780:	4013      	ands	r3, r2
 8003782:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d003      	beq.n	8003798 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003790:	69ba      	ldr	r2, [r7, #24]
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	4313      	orrs	r3, r2
 8003796:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003798:	4a23      	ldr	r2, [pc, #140]	; (8003828 <HAL_GPIO_Init+0x300>)
 800379a:	69bb      	ldr	r3, [r7, #24]
 800379c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800379e:	4b22      	ldr	r3, [pc, #136]	; (8003828 <HAL_GPIO_Init+0x300>)
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	43db      	mvns	r3, r3
 80037a8:	69ba      	ldr	r2, [r7, #24]
 80037aa:	4013      	ands	r3, r2
 80037ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d003      	beq.n	80037c2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80037ba:	69ba      	ldr	r2, [r7, #24]
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	4313      	orrs	r3, r2
 80037c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80037c2:	4a19      	ldr	r2, [pc, #100]	; (8003828 <HAL_GPIO_Init+0x300>)
 80037c4:	69bb      	ldr	r3, [r7, #24]
 80037c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80037c8:	4b17      	ldr	r3, [pc, #92]	; (8003828 <HAL_GPIO_Init+0x300>)
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	43db      	mvns	r3, r3
 80037d2:	69ba      	ldr	r2, [r7, #24]
 80037d4:	4013      	ands	r3, r2
 80037d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d003      	beq.n	80037ec <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80037e4:	69ba      	ldr	r2, [r7, #24]
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80037ec:	4a0e      	ldr	r2, [pc, #56]	; (8003828 <HAL_GPIO_Init+0x300>)
 80037ee:	69bb      	ldr	r3, [r7, #24]
 80037f0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	3301      	adds	r3, #1
 80037f6:	61fb      	str	r3, [r7, #28]
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	2b0f      	cmp	r3, #15
 80037fc:	f67f aea2 	bls.w	8003544 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003800:	bf00      	nop
 8003802:	3724      	adds	r7, #36	; 0x24
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr
 800380c:	40023800 	.word	0x40023800
 8003810:	40013800 	.word	0x40013800
 8003814:	40020000 	.word	0x40020000
 8003818:	40020400 	.word	0x40020400
 800381c:	40020800 	.word	0x40020800
 8003820:	40020c00 	.word	0x40020c00
 8003824:	40021000 	.word	0x40021000
 8003828:	40013c00 	.word	0x40013c00

0800382c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800382c:	b480      	push	{r7}
 800382e:	b085      	sub	sp, #20
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	460b      	mov	r3, r1
 8003836:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	691a      	ldr	r2, [r3, #16]
 800383c:	887b      	ldrh	r3, [r7, #2]
 800383e:	4013      	ands	r3, r2
 8003840:	2b00      	cmp	r3, #0
 8003842:	d002      	beq.n	800384a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003844:	2301      	movs	r3, #1
 8003846:	73fb      	strb	r3, [r7, #15]
 8003848:	e001      	b.n	800384e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800384a:	2300      	movs	r3, #0
 800384c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800384e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003850:	4618      	mov	r0, r3
 8003852:	3714      	adds	r7, #20
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr

0800385c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	460b      	mov	r3, r1
 8003866:	807b      	strh	r3, [r7, #2]
 8003868:	4613      	mov	r3, r2
 800386a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800386c:	787b      	ldrb	r3, [r7, #1]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d003      	beq.n	800387a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003872:	887a      	ldrh	r2, [r7, #2]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003878:	e003      	b.n	8003882 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800387a:	887b      	ldrh	r3, [r7, #2]
 800387c:	041a      	lsls	r2, r3, #16
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	619a      	str	r2, [r3, #24]
}
 8003882:	bf00      	nop
 8003884:	370c      	adds	r7, #12
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr
	...

08003890 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b086      	sub	sp, #24
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d101      	bne.n	80038a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e25b      	b.n	8003d5a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0301 	and.w	r3, r3, #1
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d075      	beq.n	800399a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038ae:	4ba3      	ldr	r3, [pc, #652]	; (8003b3c <HAL_RCC_OscConfig+0x2ac>)
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	f003 030c 	and.w	r3, r3, #12
 80038b6:	2b04      	cmp	r3, #4
 80038b8:	d00c      	beq.n	80038d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038ba:	4ba0      	ldr	r3, [pc, #640]	; (8003b3c <HAL_RCC_OscConfig+0x2ac>)
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038c2:	2b08      	cmp	r3, #8
 80038c4:	d112      	bne.n	80038ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038c6:	4b9d      	ldr	r3, [pc, #628]	; (8003b3c <HAL_RCC_OscConfig+0x2ac>)
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038d2:	d10b      	bne.n	80038ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038d4:	4b99      	ldr	r3, [pc, #612]	; (8003b3c <HAL_RCC_OscConfig+0x2ac>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d05b      	beq.n	8003998 <HAL_RCC_OscConfig+0x108>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d157      	bne.n	8003998 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e236      	b.n	8003d5a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038f4:	d106      	bne.n	8003904 <HAL_RCC_OscConfig+0x74>
 80038f6:	4b91      	ldr	r3, [pc, #580]	; (8003b3c <HAL_RCC_OscConfig+0x2ac>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a90      	ldr	r2, [pc, #576]	; (8003b3c <HAL_RCC_OscConfig+0x2ac>)
 80038fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003900:	6013      	str	r3, [r2, #0]
 8003902:	e01d      	b.n	8003940 <HAL_RCC_OscConfig+0xb0>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800390c:	d10c      	bne.n	8003928 <HAL_RCC_OscConfig+0x98>
 800390e:	4b8b      	ldr	r3, [pc, #556]	; (8003b3c <HAL_RCC_OscConfig+0x2ac>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a8a      	ldr	r2, [pc, #552]	; (8003b3c <HAL_RCC_OscConfig+0x2ac>)
 8003914:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003918:	6013      	str	r3, [r2, #0]
 800391a:	4b88      	ldr	r3, [pc, #544]	; (8003b3c <HAL_RCC_OscConfig+0x2ac>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a87      	ldr	r2, [pc, #540]	; (8003b3c <HAL_RCC_OscConfig+0x2ac>)
 8003920:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003924:	6013      	str	r3, [r2, #0]
 8003926:	e00b      	b.n	8003940 <HAL_RCC_OscConfig+0xb0>
 8003928:	4b84      	ldr	r3, [pc, #528]	; (8003b3c <HAL_RCC_OscConfig+0x2ac>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a83      	ldr	r2, [pc, #524]	; (8003b3c <HAL_RCC_OscConfig+0x2ac>)
 800392e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003932:	6013      	str	r3, [r2, #0]
 8003934:	4b81      	ldr	r3, [pc, #516]	; (8003b3c <HAL_RCC_OscConfig+0x2ac>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a80      	ldr	r2, [pc, #512]	; (8003b3c <HAL_RCC_OscConfig+0x2ac>)
 800393a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800393e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d013      	beq.n	8003970 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003948:	f7fe fc7c 	bl	8002244 <HAL_GetTick>
 800394c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800394e:	e008      	b.n	8003962 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003950:	f7fe fc78 	bl	8002244 <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	2b64      	cmp	r3, #100	; 0x64
 800395c:	d901      	bls.n	8003962 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e1fb      	b.n	8003d5a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003962:	4b76      	ldr	r3, [pc, #472]	; (8003b3c <HAL_RCC_OscConfig+0x2ac>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d0f0      	beq.n	8003950 <HAL_RCC_OscConfig+0xc0>
 800396e:	e014      	b.n	800399a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003970:	f7fe fc68 	bl	8002244 <HAL_GetTick>
 8003974:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003976:	e008      	b.n	800398a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003978:	f7fe fc64 	bl	8002244 <HAL_GetTick>
 800397c:	4602      	mov	r2, r0
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	2b64      	cmp	r3, #100	; 0x64
 8003984:	d901      	bls.n	800398a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e1e7      	b.n	8003d5a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800398a:	4b6c      	ldr	r3, [pc, #432]	; (8003b3c <HAL_RCC_OscConfig+0x2ac>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d1f0      	bne.n	8003978 <HAL_RCC_OscConfig+0xe8>
 8003996:	e000      	b.n	800399a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003998:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0302 	and.w	r3, r3, #2
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d063      	beq.n	8003a6e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039a6:	4b65      	ldr	r3, [pc, #404]	; (8003b3c <HAL_RCC_OscConfig+0x2ac>)
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	f003 030c 	and.w	r3, r3, #12
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d00b      	beq.n	80039ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039b2:	4b62      	ldr	r3, [pc, #392]	; (8003b3c <HAL_RCC_OscConfig+0x2ac>)
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039ba:	2b08      	cmp	r3, #8
 80039bc:	d11c      	bne.n	80039f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039be:	4b5f      	ldr	r3, [pc, #380]	; (8003b3c <HAL_RCC_OscConfig+0x2ac>)
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d116      	bne.n	80039f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039ca:	4b5c      	ldr	r3, [pc, #368]	; (8003b3c <HAL_RCC_OscConfig+0x2ac>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 0302 	and.w	r3, r3, #2
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d005      	beq.n	80039e2 <HAL_RCC_OscConfig+0x152>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d001      	beq.n	80039e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e1bb      	b.n	8003d5a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039e2:	4b56      	ldr	r3, [pc, #344]	; (8003b3c <HAL_RCC_OscConfig+0x2ac>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	00db      	lsls	r3, r3, #3
 80039f0:	4952      	ldr	r1, [pc, #328]	; (8003b3c <HAL_RCC_OscConfig+0x2ac>)
 80039f2:	4313      	orrs	r3, r2
 80039f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039f6:	e03a      	b.n	8003a6e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d020      	beq.n	8003a42 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a00:	4b4f      	ldr	r3, [pc, #316]	; (8003b40 <HAL_RCC_OscConfig+0x2b0>)
 8003a02:	2201      	movs	r2, #1
 8003a04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a06:	f7fe fc1d 	bl	8002244 <HAL_GetTick>
 8003a0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a0c:	e008      	b.n	8003a20 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a0e:	f7fe fc19 	bl	8002244 <HAL_GetTick>
 8003a12:	4602      	mov	r2, r0
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	d901      	bls.n	8003a20 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	e19c      	b.n	8003d5a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a20:	4b46      	ldr	r3, [pc, #280]	; (8003b3c <HAL_RCC_OscConfig+0x2ac>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0302 	and.w	r3, r3, #2
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d0f0      	beq.n	8003a0e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a2c:	4b43      	ldr	r3, [pc, #268]	; (8003b3c <HAL_RCC_OscConfig+0x2ac>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	691b      	ldr	r3, [r3, #16]
 8003a38:	00db      	lsls	r3, r3, #3
 8003a3a:	4940      	ldr	r1, [pc, #256]	; (8003b3c <HAL_RCC_OscConfig+0x2ac>)
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	600b      	str	r3, [r1, #0]
 8003a40:	e015      	b.n	8003a6e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a42:	4b3f      	ldr	r3, [pc, #252]	; (8003b40 <HAL_RCC_OscConfig+0x2b0>)
 8003a44:	2200      	movs	r2, #0
 8003a46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a48:	f7fe fbfc 	bl	8002244 <HAL_GetTick>
 8003a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a4e:	e008      	b.n	8003a62 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a50:	f7fe fbf8 	bl	8002244 <HAL_GetTick>
 8003a54:	4602      	mov	r2, r0
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	2b02      	cmp	r3, #2
 8003a5c:	d901      	bls.n	8003a62 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	e17b      	b.n	8003d5a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a62:	4b36      	ldr	r3, [pc, #216]	; (8003b3c <HAL_RCC_OscConfig+0x2ac>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 0302 	and.w	r3, r3, #2
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d1f0      	bne.n	8003a50 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 0308 	and.w	r3, r3, #8
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d030      	beq.n	8003adc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	695b      	ldr	r3, [r3, #20]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d016      	beq.n	8003ab0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a82:	4b30      	ldr	r3, [pc, #192]	; (8003b44 <HAL_RCC_OscConfig+0x2b4>)
 8003a84:	2201      	movs	r2, #1
 8003a86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a88:	f7fe fbdc 	bl	8002244 <HAL_GetTick>
 8003a8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a8e:	e008      	b.n	8003aa2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a90:	f7fe fbd8 	bl	8002244 <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d901      	bls.n	8003aa2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	e15b      	b.n	8003d5a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003aa2:	4b26      	ldr	r3, [pc, #152]	; (8003b3c <HAL_RCC_OscConfig+0x2ac>)
 8003aa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003aa6:	f003 0302 	and.w	r3, r3, #2
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d0f0      	beq.n	8003a90 <HAL_RCC_OscConfig+0x200>
 8003aae:	e015      	b.n	8003adc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ab0:	4b24      	ldr	r3, [pc, #144]	; (8003b44 <HAL_RCC_OscConfig+0x2b4>)
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ab6:	f7fe fbc5 	bl	8002244 <HAL_GetTick>
 8003aba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003abc:	e008      	b.n	8003ad0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003abe:	f7fe fbc1 	bl	8002244 <HAL_GetTick>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	1ad3      	subs	r3, r2, r3
 8003ac8:	2b02      	cmp	r3, #2
 8003aca:	d901      	bls.n	8003ad0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003acc:	2303      	movs	r3, #3
 8003ace:	e144      	b.n	8003d5a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ad0:	4b1a      	ldr	r3, [pc, #104]	; (8003b3c <HAL_RCC_OscConfig+0x2ac>)
 8003ad2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ad4:	f003 0302 	and.w	r3, r3, #2
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d1f0      	bne.n	8003abe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0304 	and.w	r3, r3, #4
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	f000 80a0 	beq.w	8003c2a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003aea:	2300      	movs	r3, #0
 8003aec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003aee:	4b13      	ldr	r3, [pc, #76]	; (8003b3c <HAL_RCC_OscConfig+0x2ac>)
 8003af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d10f      	bne.n	8003b1a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003afa:	2300      	movs	r3, #0
 8003afc:	60bb      	str	r3, [r7, #8]
 8003afe:	4b0f      	ldr	r3, [pc, #60]	; (8003b3c <HAL_RCC_OscConfig+0x2ac>)
 8003b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b02:	4a0e      	ldr	r2, [pc, #56]	; (8003b3c <HAL_RCC_OscConfig+0x2ac>)
 8003b04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b08:	6413      	str	r3, [r2, #64]	; 0x40
 8003b0a:	4b0c      	ldr	r3, [pc, #48]	; (8003b3c <HAL_RCC_OscConfig+0x2ac>)
 8003b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b12:	60bb      	str	r3, [r7, #8]
 8003b14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b16:	2301      	movs	r3, #1
 8003b18:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b1a:	4b0b      	ldr	r3, [pc, #44]	; (8003b48 <HAL_RCC_OscConfig+0x2b8>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d121      	bne.n	8003b6a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b26:	4b08      	ldr	r3, [pc, #32]	; (8003b48 <HAL_RCC_OscConfig+0x2b8>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a07      	ldr	r2, [pc, #28]	; (8003b48 <HAL_RCC_OscConfig+0x2b8>)
 8003b2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b32:	f7fe fb87 	bl	8002244 <HAL_GetTick>
 8003b36:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b38:	e011      	b.n	8003b5e <HAL_RCC_OscConfig+0x2ce>
 8003b3a:	bf00      	nop
 8003b3c:	40023800 	.word	0x40023800
 8003b40:	42470000 	.word	0x42470000
 8003b44:	42470e80 	.word	0x42470e80
 8003b48:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b4c:	f7fe fb7a 	bl	8002244 <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	d901      	bls.n	8003b5e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e0fd      	b.n	8003d5a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b5e:	4b81      	ldr	r3, [pc, #516]	; (8003d64 <HAL_RCC_OscConfig+0x4d4>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d0f0      	beq.n	8003b4c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d106      	bne.n	8003b80 <HAL_RCC_OscConfig+0x2f0>
 8003b72:	4b7d      	ldr	r3, [pc, #500]	; (8003d68 <HAL_RCC_OscConfig+0x4d8>)
 8003b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b76:	4a7c      	ldr	r2, [pc, #496]	; (8003d68 <HAL_RCC_OscConfig+0x4d8>)
 8003b78:	f043 0301 	orr.w	r3, r3, #1
 8003b7c:	6713      	str	r3, [r2, #112]	; 0x70
 8003b7e:	e01c      	b.n	8003bba <HAL_RCC_OscConfig+0x32a>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	2b05      	cmp	r3, #5
 8003b86:	d10c      	bne.n	8003ba2 <HAL_RCC_OscConfig+0x312>
 8003b88:	4b77      	ldr	r3, [pc, #476]	; (8003d68 <HAL_RCC_OscConfig+0x4d8>)
 8003b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b8c:	4a76      	ldr	r2, [pc, #472]	; (8003d68 <HAL_RCC_OscConfig+0x4d8>)
 8003b8e:	f043 0304 	orr.w	r3, r3, #4
 8003b92:	6713      	str	r3, [r2, #112]	; 0x70
 8003b94:	4b74      	ldr	r3, [pc, #464]	; (8003d68 <HAL_RCC_OscConfig+0x4d8>)
 8003b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b98:	4a73      	ldr	r2, [pc, #460]	; (8003d68 <HAL_RCC_OscConfig+0x4d8>)
 8003b9a:	f043 0301 	orr.w	r3, r3, #1
 8003b9e:	6713      	str	r3, [r2, #112]	; 0x70
 8003ba0:	e00b      	b.n	8003bba <HAL_RCC_OscConfig+0x32a>
 8003ba2:	4b71      	ldr	r3, [pc, #452]	; (8003d68 <HAL_RCC_OscConfig+0x4d8>)
 8003ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ba6:	4a70      	ldr	r2, [pc, #448]	; (8003d68 <HAL_RCC_OscConfig+0x4d8>)
 8003ba8:	f023 0301 	bic.w	r3, r3, #1
 8003bac:	6713      	str	r3, [r2, #112]	; 0x70
 8003bae:	4b6e      	ldr	r3, [pc, #440]	; (8003d68 <HAL_RCC_OscConfig+0x4d8>)
 8003bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bb2:	4a6d      	ldr	r2, [pc, #436]	; (8003d68 <HAL_RCC_OscConfig+0x4d8>)
 8003bb4:	f023 0304 	bic.w	r3, r3, #4
 8003bb8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d015      	beq.n	8003bee <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bc2:	f7fe fb3f 	bl	8002244 <HAL_GetTick>
 8003bc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bc8:	e00a      	b.n	8003be0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bca:	f7fe fb3b 	bl	8002244 <HAL_GetTick>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	1ad3      	subs	r3, r2, r3
 8003bd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d901      	bls.n	8003be0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	e0bc      	b.n	8003d5a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003be0:	4b61      	ldr	r3, [pc, #388]	; (8003d68 <HAL_RCC_OscConfig+0x4d8>)
 8003be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003be4:	f003 0302 	and.w	r3, r3, #2
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d0ee      	beq.n	8003bca <HAL_RCC_OscConfig+0x33a>
 8003bec:	e014      	b.n	8003c18 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bee:	f7fe fb29 	bl	8002244 <HAL_GetTick>
 8003bf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bf4:	e00a      	b.n	8003c0c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bf6:	f7fe fb25 	bl	8002244 <HAL_GetTick>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d901      	bls.n	8003c0c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003c08:	2303      	movs	r3, #3
 8003c0a:	e0a6      	b.n	8003d5a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c0c:	4b56      	ldr	r3, [pc, #344]	; (8003d68 <HAL_RCC_OscConfig+0x4d8>)
 8003c0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c10:	f003 0302 	and.w	r3, r3, #2
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d1ee      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c18:	7dfb      	ldrb	r3, [r7, #23]
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d105      	bne.n	8003c2a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c1e:	4b52      	ldr	r3, [pc, #328]	; (8003d68 <HAL_RCC_OscConfig+0x4d8>)
 8003c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c22:	4a51      	ldr	r2, [pc, #324]	; (8003d68 <HAL_RCC_OscConfig+0x4d8>)
 8003c24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c28:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	699b      	ldr	r3, [r3, #24]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	f000 8092 	beq.w	8003d58 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c34:	4b4c      	ldr	r3, [pc, #304]	; (8003d68 <HAL_RCC_OscConfig+0x4d8>)
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	f003 030c 	and.w	r3, r3, #12
 8003c3c:	2b08      	cmp	r3, #8
 8003c3e:	d05c      	beq.n	8003cfa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	699b      	ldr	r3, [r3, #24]
 8003c44:	2b02      	cmp	r3, #2
 8003c46:	d141      	bne.n	8003ccc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c48:	4b48      	ldr	r3, [pc, #288]	; (8003d6c <HAL_RCC_OscConfig+0x4dc>)
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c4e:	f7fe faf9 	bl	8002244 <HAL_GetTick>
 8003c52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c54:	e008      	b.n	8003c68 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c56:	f7fe faf5 	bl	8002244 <HAL_GetTick>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d901      	bls.n	8003c68 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	e078      	b.n	8003d5a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c68:	4b3f      	ldr	r3, [pc, #252]	; (8003d68 <HAL_RCC_OscConfig+0x4d8>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d1f0      	bne.n	8003c56 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	69da      	ldr	r2, [r3, #28]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6a1b      	ldr	r3, [r3, #32]
 8003c7c:	431a      	orrs	r2, r3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c82:	019b      	lsls	r3, r3, #6
 8003c84:	431a      	orrs	r2, r3
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c8a:	085b      	lsrs	r3, r3, #1
 8003c8c:	3b01      	subs	r3, #1
 8003c8e:	041b      	lsls	r3, r3, #16
 8003c90:	431a      	orrs	r2, r3
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c96:	061b      	lsls	r3, r3, #24
 8003c98:	4933      	ldr	r1, [pc, #204]	; (8003d68 <HAL_RCC_OscConfig+0x4d8>)
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c9e:	4b33      	ldr	r3, [pc, #204]	; (8003d6c <HAL_RCC_OscConfig+0x4dc>)
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ca4:	f7fe face 	bl	8002244 <HAL_GetTick>
 8003ca8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003caa:	e008      	b.n	8003cbe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cac:	f7fe faca 	bl	8002244 <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d901      	bls.n	8003cbe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e04d      	b.n	8003d5a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cbe:	4b2a      	ldr	r3, [pc, #168]	; (8003d68 <HAL_RCC_OscConfig+0x4d8>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d0f0      	beq.n	8003cac <HAL_RCC_OscConfig+0x41c>
 8003cca:	e045      	b.n	8003d58 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ccc:	4b27      	ldr	r3, [pc, #156]	; (8003d6c <HAL_RCC_OscConfig+0x4dc>)
 8003cce:	2200      	movs	r2, #0
 8003cd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cd2:	f7fe fab7 	bl	8002244 <HAL_GetTick>
 8003cd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cd8:	e008      	b.n	8003cec <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cda:	f7fe fab3 	bl	8002244 <HAL_GetTick>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	2b02      	cmp	r3, #2
 8003ce6:	d901      	bls.n	8003cec <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003ce8:	2303      	movs	r3, #3
 8003cea:	e036      	b.n	8003d5a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cec:	4b1e      	ldr	r3, [pc, #120]	; (8003d68 <HAL_RCC_OscConfig+0x4d8>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d1f0      	bne.n	8003cda <HAL_RCC_OscConfig+0x44a>
 8003cf8:	e02e      	b.n	8003d58 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	699b      	ldr	r3, [r3, #24]
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d101      	bne.n	8003d06 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e029      	b.n	8003d5a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d06:	4b18      	ldr	r3, [pc, #96]	; (8003d68 <HAL_RCC_OscConfig+0x4d8>)
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	69db      	ldr	r3, [r3, #28]
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d11c      	bne.n	8003d54 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d115      	bne.n	8003d54 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003d28:	68fa      	ldr	r2, [r7, #12]
 8003d2a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003d2e:	4013      	ands	r3, r2
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d10d      	bne.n	8003d54 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d106      	bne.n	8003d54 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d001      	beq.n	8003d58 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e000      	b.n	8003d5a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003d58:	2300      	movs	r3, #0
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3718      	adds	r7, #24
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop
 8003d64:	40007000 	.word	0x40007000
 8003d68:	40023800 	.word	0x40023800
 8003d6c:	42470060 	.word	0x42470060

08003d70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b084      	sub	sp, #16
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d101      	bne.n	8003d84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e0cc      	b.n	8003f1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d84:	4b68      	ldr	r3, [pc, #416]	; (8003f28 <HAL_RCC_ClockConfig+0x1b8>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 030f 	and.w	r3, r3, #15
 8003d8c:	683a      	ldr	r2, [r7, #0]
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d90c      	bls.n	8003dac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d92:	4b65      	ldr	r3, [pc, #404]	; (8003f28 <HAL_RCC_ClockConfig+0x1b8>)
 8003d94:	683a      	ldr	r2, [r7, #0]
 8003d96:	b2d2      	uxtb	r2, r2
 8003d98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d9a:	4b63      	ldr	r3, [pc, #396]	; (8003f28 <HAL_RCC_ClockConfig+0x1b8>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 030f 	and.w	r3, r3, #15
 8003da2:	683a      	ldr	r2, [r7, #0]
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d001      	beq.n	8003dac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e0b8      	b.n	8003f1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0302 	and.w	r3, r3, #2
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d020      	beq.n	8003dfa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0304 	and.w	r3, r3, #4
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d005      	beq.n	8003dd0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003dc4:	4b59      	ldr	r3, [pc, #356]	; (8003f2c <HAL_RCC_ClockConfig+0x1bc>)
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	4a58      	ldr	r2, [pc, #352]	; (8003f2c <HAL_RCC_ClockConfig+0x1bc>)
 8003dca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003dce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0308 	and.w	r3, r3, #8
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d005      	beq.n	8003de8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ddc:	4b53      	ldr	r3, [pc, #332]	; (8003f2c <HAL_RCC_ClockConfig+0x1bc>)
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	4a52      	ldr	r2, [pc, #328]	; (8003f2c <HAL_RCC_ClockConfig+0x1bc>)
 8003de2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003de6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003de8:	4b50      	ldr	r3, [pc, #320]	; (8003f2c <HAL_RCC_ClockConfig+0x1bc>)
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	494d      	ldr	r1, [pc, #308]	; (8003f2c <HAL_RCC_ClockConfig+0x1bc>)
 8003df6:	4313      	orrs	r3, r2
 8003df8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0301 	and.w	r3, r3, #1
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d044      	beq.n	8003e90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d107      	bne.n	8003e1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e0e:	4b47      	ldr	r3, [pc, #284]	; (8003f2c <HAL_RCC_ClockConfig+0x1bc>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d119      	bne.n	8003e4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e07f      	b.n	8003f1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	2b02      	cmp	r3, #2
 8003e24:	d003      	beq.n	8003e2e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e2a:	2b03      	cmp	r3, #3
 8003e2c:	d107      	bne.n	8003e3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e2e:	4b3f      	ldr	r3, [pc, #252]	; (8003f2c <HAL_RCC_ClockConfig+0x1bc>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d109      	bne.n	8003e4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e06f      	b.n	8003f1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e3e:	4b3b      	ldr	r3, [pc, #236]	; (8003f2c <HAL_RCC_ClockConfig+0x1bc>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 0302 	and.w	r3, r3, #2
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d101      	bne.n	8003e4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e067      	b.n	8003f1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e4e:	4b37      	ldr	r3, [pc, #220]	; (8003f2c <HAL_RCC_ClockConfig+0x1bc>)
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	f023 0203 	bic.w	r2, r3, #3
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	4934      	ldr	r1, [pc, #208]	; (8003f2c <HAL_RCC_ClockConfig+0x1bc>)
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e60:	f7fe f9f0 	bl	8002244 <HAL_GetTick>
 8003e64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e66:	e00a      	b.n	8003e7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e68:	f7fe f9ec 	bl	8002244 <HAL_GetTick>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d901      	bls.n	8003e7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	e04f      	b.n	8003f1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e7e:	4b2b      	ldr	r3, [pc, #172]	; (8003f2c <HAL_RCC_ClockConfig+0x1bc>)
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	f003 020c 	and.w	r2, r3, #12
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d1eb      	bne.n	8003e68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e90:	4b25      	ldr	r3, [pc, #148]	; (8003f28 <HAL_RCC_ClockConfig+0x1b8>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 030f 	and.w	r3, r3, #15
 8003e98:	683a      	ldr	r2, [r7, #0]
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d20c      	bcs.n	8003eb8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e9e:	4b22      	ldr	r3, [pc, #136]	; (8003f28 <HAL_RCC_ClockConfig+0x1b8>)
 8003ea0:	683a      	ldr	r2, [r7, #0]
 8003ea2:	b2d2      	uxtb	r2, r2
 8003ea4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ea6:	4b20      	ldr	r3, [pc, #128]	; (8003f28 <HAL_RCC_ClockConfig+0x1b8>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 030f 	and.w	r3, r3, #15
 8003eae:	683a      	ldr	r2, [r7, #0]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d001      	beq.n	8003eb8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e032      	b.n	8003f1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0304 	and.w	r3, r3, #4
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d008      	beq.n	8003ed6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ec4:	4b19      	ldr	r3, [pc, #100]	; (8003f2c <HAL_RCC_ClockConfig+0x1bc>)
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	4916      	ldr	r1, [pc, #88]	; (8003f2c <HAL_RCC_ClockConfig+0x1bc>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 0308 	and.w	r3, r3, #8
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d009      	beq.n	8003ef6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ee2:	4b12      	ldr	r3, [pc, #72]	; (8003f2c <HAL_RCC_ClockConfig+0x1bc>)
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	691b      	ldr	r3, [r3, #16]
 8003eee:	00db      	lsls	r3, r3, #3
 8003ef0:	490e      	ldr	r1, [pc, #56]	; (8003f2c <HAL_RCC_ClockConfig+0x1bc>)
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003ef6:	f000 f821 	bl	8003f3c <HAL_RCC_GetSysClockFreq>
 8003efa:	4601      	mov	r1, r0
 8003efc:	4b0b      	ldr	r3, [pc, #44]	; (8003f2c <HAL_RCC_ClockConfig+0x1bc>)
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	091b      	lsrs	r3, r3, #4
 8003f02:	f003 030f 	and.w	r3, r3, #15
 8003f06:	4a0a      	ldr	r2, [pc, #40]	; (8003f30 <HAL_RCC_ClockConfig+0x1c0>)
 8003f08:	5cd3      	ldrb	r3, [r2, r3]
 8003f0a:	fa21 f303 	lsr.w	r3, r1, r3
 8003f0e:	4a09      	ldr	r2, [pc, #36]	; (8003f34 <HAL_RCC_ClockConfig+0x1c4>)
 8003f10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f12:	4b09      	ldr	r3, [pc, #36]	; (8003f38 <HAL_RCC_ClockConfig+0x1c8>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4618      	mov	r0, r3
 8003f18:	f7fe f950 	bl	80021bc <HAL_InitTick>

  return HAL_OK;
 8003f1c:	2300      	movs	r3, #0
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3710      	adds	r7, #16
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	40023c00 	.word	0x40023c00
 8003f2c:	40023800 	.word	0x40023800
 8003f30:	0800a78c 	.word	0x0800a78c
 8003f34:	20000008 	.word	0x20000008
 8003f38:	2000000c 	.word	0x2000000c

08003f3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f3e:	b085      	sub	sp, #20
 8003f40:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003f42:	2300      	movs	r3, #0
 8003f44:	607b      	str	r3, [r7, #4]
 8003f46:	2300      	movs	r3, #0
 8003f48:	60fb      	str	r3, [r7, #12]
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f52:	4b50      	ldr	r3, [pc, #320]	; (8004094 <HAL_RCC_GetSysClockFreq+0x158>)
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	f003 030c 	and.w	r3, r3, #12
 8003f5a:	2b04      	cmp	r3, #4
 8003f5c:	d007      	beq.n	8003f6e <HAL_RCC_GetSysClockFreq+0x32>
 8003f5e:	2b08      	cmp	r3, #8
 8003f60:	d008      	beq.n	8003f74 <HAL_RCC_GetSysClockFreq+0x38>
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	f040 808d 	bne.w	8004082 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f68:	4b4b      	ldr	r3, [pc, #300]	; (8004098 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003f6a:	60bb      	str	r3, [r7, #8]
       break;
 8003f6c:	e08c      	b.n	8004088 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f6e:	4b4b      	ldr	r3, [pc, #300]	; (800409c <HAL_RCC_GetSysClockFreq+0x160>)
 8003f70:	60bb      	str	r3, [r7, #8]
      break;
 8003f72:	e089      	b.n	8004088 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f74:	4b47      	ldr	r3, [pc, #284]	; (8004094 <HAL_RCC_GetSysClockFreq+0x158>)
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f7c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f7e:	4b45      	ldr	r3, [pc, #276]	; (8004094 <HAL_RCC_GetSysClockFreq+0x158>)
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d023      	beq.n	8003fd2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f8a:	4b42      	ldr	r3, [pc, #264]	; (8004094 <HAL_RCC_GetSysClockFreq+0x158>)
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	099b      	lsrs	r3, r3, #6
 8003f90:	f04f 0400 	mov.w	r4, #0
 8003f94:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003f98:	f04f 0200 	mov.w	r2, #0
 8003f9c:	ea03 0501 	and.w	r5, r3, r1
 8003fa0:	ea04 0602 	and.w	r6, r4, r2
 8003fa4:	4a3d      	ldr	r2, [pc, #244]	; (800409c <HAL_RCC_GetSysClockFreq+0x160>)
 8003fa6:	fb02 f106 	mul.w	r1, r2, r6
 8003faa:	2200      	movs	r2, #0
 8003fac:	fb02 f205 	mul.w	r2, r2, r5
 8003fb0:	440a      	add	r2, r1
 8003fb2:	493a      	ldr	r1, [pc, #232]	; (800409c <HAL_RCC_GetSysClockFreq+0x160>)
 8003fb4:	fba5 0101 	umull	r0, r1, r5, r1
 8003fb8:	1853      	adds	r3, r2, r1
 8003fba:	4619      	mov	r1, r3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f04f 0400 	mov.w	r4, #0
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	4623      	mov	r3, r4
 8003fc6:	f7fc fd7b 	bl	8000ac0 <__aeabi_uldivmod>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	460c      	mov	r4, r1
 8003fce:	60fb      	str	r3, [r7, #12]
 8003fd0:	e049      	b.n	8004066 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fd2:	4b30      	ldr	r3, [pc, #192]	; (8004094 <HAL_RCC_GetSysClockFreq+0x158>)
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	099b      	lsrs	r3, r3, #6
 8003fd8:	f04f 0400 	mov.w	r4, #0
 8003fdc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003fe0:	f04f 0200 	mov.w	r2, #0
 8003fe4:	ea03 0501 	and.w	r5, r3, r1
 8003fe8:	ea04 0602 	and.w	r6, r4, r2
 8003fec:	4629      	mov	r1, r5
 8003fee:	4632      	mov	r2, r6
 8003ff0:	f04f 0300 	mov.w	r3, #0
 8003ff4:	f04f 0400 	mov.w	r4, #0
 8003ff8:	0154      	lsls	r4, r2, #5
 8003ffa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003ffe:	014b      	lsls	r3, r1, #5
 8004000:	4619      	mov	r1, r3
 8004002:	4622      	mov	r2, r4
 8004004:	1b49      	subs	r1, r1, r5
 8004006:	eb62 0206 	sbc.w	r2, r2, r6
 800400a:	f04f 0300 	mov.w	r3, #0
 800400e:	f04f 0400 	mov.w	r4, #0
 8004012:	0194      	lsls	r4, r2, #6
 8004014:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004018:	018b      	lsls	r3, r1, #6
 800401a:	1a5b      	subs	r3, r3, r1
 800401c:	eb64 0402 	sbc.w	r4, r4, r2
 8004020:	f04f 0100 	mov.w	r1, #0
 8004024:	f04f 0200 	mov.w	r2, #0
 8004028:	00e2      	lsls	r2, r4, #3
 800402a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800402e:	00d9      	lsls	r1, r3, #3
 8004030:	460b      	mov	r3, r1
 8004032:	4614      	mov	r4, r2
 8004034:	195b      	adds	r3, r3, r5
 8004036:	eb44 0406 	adc.w	r4, r4, r6
 800403a:	f04f 0100 	mov.w	r1, #0
 800403e:	f04f 0200 	mov.w	r2, #0
 8004042:	02a2      	lsls	r2, r4, #10
 8004044:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004048:	0299      	lsls	r1, r3, #10
 800404a:	460b      	mov	r3, r1
 800404c:	4614      	mov	r4, r2
 800404e:	4618      	mov	r0, r3
 8004050:	4621      	mov	r1, r4
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f04f 0400 	mov.w	r4, #0
 8004058:	461a      	mov	r2, r3
 800405a:	4623      	mov	r3, r4
 800405c:	f7fc fd30 	bl	8000ac0 <__aeabi_uldivmod>
 8004060:	4603      	mov	r3, r0
 8004062:	460c      	mov	r4, r1
 8004064:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004066:	4b0b      	ldr	r3, [pc, #44]	; (8004094 <HAL_RCC_GetSysClockFreq+0x158>)
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	0c1b      	lsrs	r3, r3, #16
 800406c:	f003 0303 	and.w	r3, r3, #3
 8004070:	3301      	adds	r3, #1
 8004072:	005b      	lsls	r3, r3, #1
 8004074:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004076:	68fa      	ldr	r2, [r7, #12]
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	fbb2 f3f3 	udiv	r3, r2, r3
 800407e:	60bb      	str	r3, [r7, #8]
      break;
 8004080:	e002      	b.n	8004088 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004082:	4b05      	ldr	r3, [pc, #20]	; (8004098 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004084:	60bb      	str	r3, [r7, #8]
      break;
 8004086:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004088:	68bb      	ldr	r3, [r7, #8]
}
 800408a:	4618      	mov	r0, r3
 800408c:	3714      	adds	r7, #20
 800408e:	46bd      	mov	sp, r7
 8004090:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004092:	bf00      	nop
 8004094:	40023800 	.word	0x40023800
 8004098:	00f42400 	.word	0x00f42400
 800409c:	017d7840 	.word	0x017d7840

080040a0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b082      	sub	sp, #8
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d101      	bne.n	80040b2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e022      	b.n	80040f8 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d105      	bne.n	80040ca <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f7fd fe61 	bl	8001d8c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2203      	movs	r2, #3
 80040ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f000 f814 	bl	8004100 <HAL_SD_InitCard>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d001      	beq.n	80040e2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e00a      	b.n	80040f8 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2201      	movs	r2, #1
 80040f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80040f6:	2300      	movs	r3, #0
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3708      	adds	r7, #8
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}

08004100 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004100:	b5b0      	push	{r4, r5, r7, lr}
 8004102:	b08e      	sub	sp, #56	; 0x38
 8004104:	af04      	add	r7, sp, #16
 8004106:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8004108:	2300      	movs	r3, #0
 800410a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800410c:	2300      	movs	r3, #0
 800410e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8004110:	2300      	movs	r3, #0
 8004112:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8004114:	2300      	movs	r3, #0
 8004116:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8004118:	2300      	movs	r3, #0
 800411a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800411c:	2376      	movs	r3, #118	; 0x76
 800411e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681d      	ldr	r5, [r3, #0]
 8004124:	466c      	mov	r4, sp
 8004126:	f107 0314 	add.w	r3, r7, #20
 800412a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800412e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004132:	f107 0308 	add.w	r3, r7, #8
 8004136:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004138:	4628      	mov	r0, r5
 800413a:	f001 ff3b 	bl	8005fb4 <SDIO_Init>
 800413e:	4603      	mov	r3, r0
 8004140:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8004144:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004148:	2b00      	cmp	r3, #0
 800414a:	d001      	beq.n	8004150 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	e031      	b.n	80041b4 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8004150:	4b1a      	ldr	r3, [pc, #104]	; (80041bc <HAL_SD_InitCard+0xbc>)
 8004152:	2200      	movs	r2, #0
 8004154:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4618      	mov	r0, r3
 800415c:	f001 ff73 	bl	8006046 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8004160:	4b16      	ldr	r3, [pc, #88]	; (80041bc <HAL_SD_InitCard+0xbc>)
 8004162:	2201      	movs	r2, #1
 8004164:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f000 ff60 	bl	800502c <SD_PowerON>
 800416c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800416e:	6a3b      	ldr	r3, [r7, #32]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d00b      	beq.n	800418c <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004180:	6a3b      	ldr	r3, [r7, #32]
 8004182:	431a      	orrs	r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	e013      	b.n	80041b4 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f000 fe7f 	bl	8004e90 <SD_InitCard>
 8004192:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004194:	6a3b      	ldr	r3, [r7, #32]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d00b      	beq.n	80041b2 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2201      	movs	r2, #1
 800419e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041a6:	6a3b      	ldr	r3, [r7, #32]
 80041a8:	431a      	orrs	r2, r3
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e000      	b.n	80041b4 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 80041b2:	2300      	movs	r3, #0
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3728      	adds	r7, #40	; 0x28
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bdb0      	pop	{r4, r5, r7, pc}
 80041bc:	422580a0 	.word	0x422580a0

080041c0 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b08c      	sub	sp, #48	; 0x30
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	60f8      	str	r0, [r7, #12]
 80041c8:	60b9      	str	r1, [r7, #8]
 80041ca:	607a      	str	r2, [r7, #4]
 80041cc:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d107      	bne.n	80041e8 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041dc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e0c9      	b.n	800437c <HAL_SD_ReadBlocks_DMA+0x1bc>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	f040 80c2 	bne.w	800437a <HAL_SD_ReadBlocks_DMA+0x1ba>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2200      	movs	r2, #0
 80041fa:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80041fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	441a      	add	r2, r3
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004206:	429a      	cmp	r2, r3
 8004208:	d907      	bls.n	800421a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800420e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e0b0      	b.n	800437c <HAL_SD_ReadBlocks_DMA+0x1bc>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2203      	movs	r2, #3
 800421e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	2200      	movs	r2, #0
 8004228:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004230:	68fa      	ldr	r2, [r7, #12]
 8004232:	6812      	ldr	r2, [r2, #0]
 8004234:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8004238:	f043 0302 	orr.w	r3, r3, #2
 800423c:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004242:	4a50      	ldr	r2, [pc, #320]	; (8004384 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 8004244:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424a:	4a4f      	ldr	r2, [pc, #316]	; (8004388 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800424c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004252:	2200      	movs	r2, #0
 8004254:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	3380      	adds	r3, #128	; 0x80
 8004260:	4619      	mov	r1, r3
 8004262:	68ba      	ldr	r2, [r7, #8]
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	025b      	lsls	r3, r3, #9
 8004268:	089b      	lsrs	r3, r3, #2
 800426a:	f7fe fdff 	bl	8002e6c <HAL_DMA_Start_IT>
 800426e:	4603      	mov	r3, r0
 8004270:	2b00      	cmp	r3, #0
 8004272:	d017      	beq.n	80042a4 <HAL_SD_ReadBlocks_DMA+0xe4>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8004282:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a40      	ldr	r2, [pc, #256]	; (800438c <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800428a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004290:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2201      	movs	r2, #1
 800429c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e06b      	b.n	800437c <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80042a4:	4b3a      	ldr	r3, [pc, #232]	; (8004390 <HAL_SD_ReadBlocks_DMA+0x1d0>)
 80042a6:	2201      	movs	r2, #1
 80042a8:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d002      	beq.n	80042b8 <HAL_SD_ReadBlocks_DMA+0xf8>
      {
        add *= 512U;
 80042b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042b4:	025b      	lsls	r3, r3, #9
 80042b6:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80042c0:	4618      	mov	r0, r3
 80042c2:	f001 ff53 	bl	800616c <SDMMC_CmdBlockLength>
 80042c6:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 80042c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d00f      	beq.n	80042ee <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a2e      	ldr	r2, [pc, #184]	; (800438c <HAL_SD_ReadBlocks_DMA+0x1cc>)
 80042d4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042dc:	431a      	orrs	r2, r3
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2201      	movs	r2, #1
 80042e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e046      	b.n	800437c <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80042ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80042f2:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	025b      	lsls	r3, r3, #9
 80042f8:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80042fa:	2390      	movs	r3, #144	; 0x90
 80042fc:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80042fe:	2302      	movs	r3, #2
 8004300:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004302:	2300      	movs	r3, #0
 8004304:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8004306:	2301      	movs	r3, #1
 8004308:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f107 0210 	add.w	r2, r7, #16
 8004312:	4611      	mov	r1, r2
 8004314:	4618      	mov	r0, r3
 8004316:	f001 fefd 	bl	8006114 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	2b01      	cmp	r3, #1
 800431e:	d90a      	bls.n	8004336 <HAL_SD_ReadBlocks_DMA+0x176>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2282      	movs	r2, #130	; 0x82
 8004324:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800432c:	4618      	mov	r0, r3
 800432e:	f001 ff61 	bl	80061f4 <SDMMC_CmdReadMultiBlock>
 8004332:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004334:	e009      	b.n	800434a <HAL_SD_ReadBlocks_DMA+0x18a>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2281      	movs	r2, #129	; 0x81
 800433a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004342:	4618      	mov	r0, r3
 8004344:	f001 ff34 	bl	80061b0 <SDMMC_CmdReadSingleBlock>
 8004348:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800434a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800434c:	2b00      	cmp	r3, #0
 800434e:	d012      	beq.n	8004376 <HAL_SD_ReadBlocks_DMA+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a0d      	ldr	r2, [pc, #52]	; (800438c <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8004356:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800435c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800435e:	431a      	orrs	r2, r3
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2200      	movs	r2, #0
 8004370:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e002      	b.n	800437c <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      return HAL_OK;
 8004376:	2300      	movs	r3, #0
 8004378:	e000      	b.n	800437c <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
  }
  else
  {
    return HAL_BUSY;
 800437a:	2302      	movs	r3, #2
  }
}
 800437c:	4618      	mov	r0, r3
 800437e:	3730      	adds	r7, #48	; 0x30
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}
 8004384:	08004c9f 	.word	0x08004c9f
 8004388:	08004d11 	.word	0x08004d11
 800438c:	004005ff 	.word	0x004005ff
 8004390:	4225858c 	.word	0x4225858c

08004394 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b08c      	sub	sp, #48	; 0x30
 8004398:	af00      	add	r7, sp, #0
 800439a:	60f8      	str	r0, [r7, #12]
 800439c:	60b9      	str	r1, [r7, #8]
 800439e:	607a      	str	r2, [r7, #4]
 80043a0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d107      	bne.n	80043bc <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	e0ce      	b.n	800455a <HAL_SD_WriteBlocks_DMA+0x1c6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	f040 80c7 	bne.w	8004558 <HAL_SD_WriteBlocks_DMA+0x1c4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2200      	movs	r2, #0
 80043ce:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80043d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	441a      	add	r2, r3
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043da:	429a      	cmp	r2, r3
 80043dc:	d907      	bls.n	80043ee <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e0b5      	b.n	800455a <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2203      	movs	r2, #3
 80043f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	2200      	movs	r2, #0
 80043fc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004404:	68fa      	ldr	r2, [r7, #12]
 8004406:	6812      	ldr	r2, [r2, #0]
 8004408:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 800440c:	f043 0302 	orr.w	r3, r3, #2
 8004410:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004416:	4a53      	ldr	r2, [pc, #332]	; (8004564 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8004418:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800441e:	4a52      	ldr	r2, [pc, #328]	; (8004568 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 8004420:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004426:	2200      	movs	r2, #0
 8004428:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800442e:	2b01      	cmp	r3, #1
 8004430:	d002      	beq.n	8004438 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8004432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004434:	025b      	lsls	r3, r3, #9
 8004436:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004440:	4618      	mov	r0, r3
 8004442:	f001 fe93 	bl	800616c <SDMMC_CmdBlockLength>
 8004446:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800444a:	2b00      	cmp	r3, #0
 800444c:	d00f      	beq.n	800446e <HAL_SD_WriteBlocks_DMA+0xda>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a46      	ldr	r2, [pc, #280]	; (800456c <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8004454:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800445a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800445c:	431a      	orrs	r2, r3
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2201      	movs	r2, #1
 8004466:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e075      	b.n	800455a <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	2b01      	cmp	r3, #1
 8004472:	d90a      	bls.n	800448a <HAL_SD_WriteBlocks_DMA+0xf6>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	22a0      	movs	r2, #160	; 0xa0
 8004478:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004480:	4618      	mov	r0, r3
 8004482:	f001 fefb 	bl	800627c <SDMMC_CmdWriteMultiBlock>
 8004486:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004488:	e009      	b.n	800449e <HAL_SD_WriteBlocks_DMA+0x10a>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2290      	movs	r2, #144	; 0x90
 800448e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004496:	4618      	mov	r0, r3
 8004498:	f001 fece 	bl	8006238 <SDMMC_CmdWriteSingleBlock>
 800449c:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800449e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d012      	beq.n	80044ca <HAL_SD_WriteBlocks_DMA+0x136>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a30      	ldr	r2, [pc, #192]	; (800456c <HAL_SD_WriteBlocks_DMA+0x1d8>)
 80044aa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044b2:	431a      	orrs	r2, r3
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2200      	movs	r2, #0
 80044c4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e047      	b.n	800455a <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80044ca:	4b29      	ldr	r3, [pc, #164]	; (8004570 <HAL_SD_WriteBlocks_DMA+0x1dc>)
 80044cc:	2201      	movs	r2, #1
 80044ce:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80044d4:	68b9      	ldr	r1, [r7, #8]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	3380      	adds	r3, #128	; 0x80
 80044dc:	461a      	mov	r2, r3
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	025b      	lsls	r3, r3, #9
 80044e2:	089b      	lsrs	r3, r3, #2
 80044e4:	f7fe fcc2 	bl	8002e6c <HAL_DMA_Start_IT>
 80044e8:	4603      	mov	r3, r0
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d01c      	beq.n	8004528 <HAL_SD_WriteBlocks_DMA+0x194>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044f4:	68fa      	ldr	r2, [r7, #12]
 80044f6:	6812      	ldr	r2, [r2, #0]
 80044f8:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 80044fc:	f023 0302 	bic.w	r3, r3, #2
 8004500:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a19      	ldr	r2, [pc, #100]	; (800456c <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8004508:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800450e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2201      	movs	r2, #1
 800451a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2200      	movs	r2, #0
 8004522:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	e018      	b.n	800455a <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004528:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800452c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	025b      	lsls	r3, r3, #9
 8004532:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004534:	2390      	movs	r3, #144	; 0x90
 8004536:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8004538:	2300      	movs	r3, #0
 800453a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800453c:	2300      	movs	r3, #0
 800453e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8004540:	2301      	movs	r3, #1
 8004542:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f107 0210 	add.w	r2, r7, #16
 800454c:	4611      	mov	r1, r2
 800454e:	4618      	mov	r0, r3
 8004550:	f001 fde0 	bl	8006114 <SDIO_ConfigData>

      return HAL_OK;
 8004554:	2300      	movs	r3, #0
 8004556:	e000      	b.n	800455a <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
  }
  else
  {
    return HAL_BUSY;
 8004558:	2302      	movs	r3, #2
  }
}
 800455a:	4618      	mov	r0, r3
 800455c:	3730      	adds	r7, #48	; 0x30
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	08004c75 	.word	0x08004c75
 8004568:	08004d11 	.word	0x08004d11
 800456c:	004005ff 	.word	0x004005ff
 8004570:	4225858c 	.word	0x4225858c

08004574 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004580:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004588:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800458c:	2b00      	cmp	r3, #0
 800458e:	d008      	beq.n	80045a2 <HAL_SD_IRQHandler+0x2e>
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f003 0308 	and.w	r3, r3, #8
 8004596:	2b00      	cmp	r3, #0
 8004598:	d003      	beq.n	80045a2 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f000 fdfc 	bl	8005198 <SD_Read_IT>
 80045a0:	e165      	b.n	800486e <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	f000 808f 	beq.w	80046d0 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80045ba:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	6812      	ldr	r2, [r2, #0]
 80045c6:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 80045ca:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 80045ce:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f022 0201 	bic.w	r2, r2, #1
 80045de:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f003 0308 	and.w	r3, r3, #8
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d039      	beq.n	800465e <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	f003 0302 	and.w	r3, r3, #2
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d104      	bne.n	80045fe <HAL_SD_IRQHandler+0x8a>
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f003 0320 	and.w	r3, r3, #32
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d011      	beq.n	8004622 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4618      	mov	r0, r3
 8004604:	f001 fe5c 	bl	80062c0 <SDMMC_CmdStopTransfer>
 8004608:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d008      	beq.n	8004622 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	431a      	orrs	r2, r3
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f000 f92f 	bl	8004880 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f240 523a 	movw	r2, #1338	; 0x53a
 800462a:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	f003 0301 	and.w	r3, r3, #1
 8004640:	2b00      	cmp	r3, #0
 8004642:	d104      	bne.n	800464e <HAL_SD_IRQHandler+0xda>
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f003 0302 	and.w	r3, r3, #2
 800464a:	2b00      	cmp	r3, #0
 800464c:	d003      	beq.n	8004656 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f002 fa6a 	bl	8006b28 <HAL_SD_RxCpltCallback>
 8004654:	e10b      	b.n	800486e <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f002 fa5c 	bl	8006b14 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800465c:	e107      	b.n	800486e <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004664:	2b00      	cmp	r3, #0
 8004666:	f000 8102 	beq.w	800486e <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	f003 0320 	and.w	r3, r3, #32
 8004670:	2b00      	cmp	r3, #0
 8004672:	d011      	beq.n	8004698 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4618      	mov	r0, r3
 800467a:	f001 fe21 	bl	80062c0 <SDMMC_CmdStopTransfer>
 800467e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d008      	beq.n	8004698 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	431a      	orrs	r2, r3
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f000 f8f4 	bl	8004880 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f003 0301 	and.w	r3, r3, #1
 800469e:	2b00      	cmp	r3, #0
 80046a0:	f040 80e5 	bne.w	800486e <HAL_SD_IRQHandler+0x2fa>
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f003 0302 	and.w	r3, r3, #2
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	f040 80df 	bne.w	800486e <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f022 0208 	bic.w	r2, r2, #8
 80046be:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2201      	movs	r2, #1
 80046c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f002 fa23 	bl	8006b14 <HAL_SD_TxCpltCallback>
}
 80046ce:	e0ce      	b.n	800486e <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d008      	beq.n	80046f0 <HAL_SD_IRQHandler+0x17c>
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	f003 0308 	and.w	r3, r3, #8
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d003      	beq.n	80046f0 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f000 fda6 	bl	800523a <SD_Write_IT>
 80046ee:	e0be      	b.n	800486e <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046f6:	f240 233a 	movw	r3, #570	; 0x23a
 80046fa:	4013      	ands	r3, r2
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	f000 80b6 	beq.w	800486e <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004708:	f003 0302 	and.w	r3, r3, #2
 800470c:	2b00      	cmp	r3, #0
 800470e:	d005      	beq.n	800471c <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004714:	f043 0202 	orr.w	r2, r3, #2
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004722:	f003 0308 	and.w	r3, r3, #8
 8004726:	2b00      	cmp	r3, #0
 8004728:	d005      	beq.n	8004736 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800472e:	f043 0208 	orr.w	r2, r3, #8
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800473c:	f003 0320 	and.w	r3, r3, #32
 8004740:	2b00      	cmp	r3, #0
 8004742:	d005      	beq.n	8004750 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004748:	f043 0220 	orr.w	r2, r3, #32
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004756:	f003 0310 	and.w	r3, r3, #16
 800475a:	2b00      	cmp	r3, #0
 800475c:	d005      	beq.n	800476a <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004762:	f043 0210 	orr.w	r2, r3, #16
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004770:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004774:	2b00      	cmp	r3, #0
 8004776:	d005      	beq.n	8004784 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800477c:	f043 0208 	orr.w	r2, r3, #8
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f240 723a 	movw	r2, #1850	; 0x73a
 800478c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	6812      	ldr	r2, [r2, #0]
 8004798:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 800479c:	f023 0302 	bic.w	r3, r3, #2
 80047a0:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4618      	mov	r0, r3
 80047a8:	f001 fd8a 	bl	80062c0 <SDMMC_CmdStopTransfer>
 80047ac:	4602      	mov	r2, r0
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b2:	431a      	orrs	r2, r3
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f003 0308 	and.w	r3, r3, #8
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d00a      	beq.n	80047d8 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2201      	movs	r2, #1
 80047c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	f000 f855 	bl	8004880 <HAL_SD_ErrorCallback>
}
 80047d6:	e04a      	b.n	800486e <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d045      	beq.n	800486e <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	f003 0310 	and.w	r3, r3, #16
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d104      	bne.n	80047f6 <HAL_SD_IRQHandler+0x282>
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f003 0320 	and.w	r3, r3, #32
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d011      	beq.n	800481a <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047fa:	4a1f      	ldr	r2, [pc, #124]	; (8004878 <HAL_SD_IRQHandler+0x304>)
 80047fc:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004802:	4618      	mov	r0, r3
 8004804:	f7fe fbfa 	bl	8002ffc <HAL_DMA_Abort_IT>
 8004808:	4603      	mov	r3, r0
 800480a:	2b00      	cmp	r3, #0
 800480c:	d02f      	beq.n	800486e <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004812:	4618      	mov	r0, r3
 8004814:	f000 face 	bl	8004db4 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8004818:	e029      	b.n	800486e <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	f003 0301 	and.w	r3, r3, #1
 8004820:	2b00      	cmp	r3, #0
 8004822:	d104      	bne.n	800482e <HAL_SD_IRQHandler+0x2ba>
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f003 0302 	and.w	r3, r3, #2
 800482a:	2b00      	cmp	r3, #0
 800482c:	d011      	beq.n	8004852 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004832:	4a12      	ldr	r2, [pc, #72]	; (800487c <HAL_SD_IRQHandler+0x308>)
 8004834:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483a:	4618      	mov	r0, r3
 800483c:	f7fe fbde 	bl	8002ffc <HAL_DMA_Abort_IT>
 8004840:	4603      	mov	r3, r0
 8004842:	2b00      	cmp	r3, #0
 8004844:	d013      	beq.n	800486e <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484a:	4618      	mov	r0, r3
 800484c:	f000 fae9 	bl	8004e22 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8004850:	e00d      	b.n	800486e <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2200      	movs	r2, #0
 8004856:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2200      	movs	r2, #0
 8004864:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f002 f94a 	bl	8006b00 <HAL_SD_AbortCallback>
}
 800486c:	e7ff      	b.n	800486e <HAL_SD_IRQHandler+0x2fa>
 800486e:	bf00      	nop
 8004870:	3710      	adds	r7, #16
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	08004db5 	.word	0x08004db5
 800487c:	08004e23 	.word	0x08004e23

08004880 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8004888:	bf00      	nop
 800488a:	370c      	adds	r7, #12
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8004894:	b480      	push	{r7}
 8004896:	b083      	sub	sp, #12
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048a2:	0f9b      	lsrs	r3, r3, #30
 80048a4:	b2da      	uxtb	r2, r3
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048ae:	0e9b      	lsrs	r3, r3, #26
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	f003 030f 	and.w	r3, r3, #15
 80048b6:	b2da      	uxtb	r2, r3
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048c0:	0e1b      	lsrs	r3, r3, #24
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	f003 0303 	and.w	r3, r3, #3
 80048c8:	b2da      	uxtb	r2, r3
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048d2:	0c1b      	lsrs	r3, r3, #16
 80048d4:	b2da      	uxtb	r2, r3
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048de:	0a1b      	lsrs	r3, r3, #8
 80048e0:	b2da      	uxtb	r2, r3
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048ea:	b2da      	uxtb	r2, r3
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80048f4:	0d1b      	lsrs	r3, r3, #20
 80048f6:	b29a      	uxth	r2, r3
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004900:	0c1b      	lsrs	r3, r3, #16
 8004902:	b2db      	uxtb	r3, r3
 8004904:	f003 030f 	and.w	r3, r3, #15
 8004908:	b2da      	uxtb	r2, r3
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004912:	0bdb      	lsrs	r3, r3, #15
 8004914:	b2db      	uxtb	r3, r3
 8004916:	f003 0301 	and.w	r3, r3, #1
 800491a:	b2da      	uxtb	r2, r3
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004924:	0b9b      	lsrs	r3, r3, #14
 8004926:	b2db      	uxtb	r3, r3
 8004928:	f003 0301 	and.w	r3, r3, #1
 800492c:	b2da      	uxtb	r2, r3
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004936:	0b5b      	lsrs	r3, r3, #13
 8004938:	b2db      	uxtb	r3, r3
 800493a:	f003 0301 	and.w	r3, r3, #1
 800493e:	b2da      	uxtb	r2, r3
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004948:	0b1b      	lsrs	r3, r3, #12
 800494a:	b2db      	uxtb	r3, r3
 800494c:	f003 0301 	and.w	r3, r3, #1
 8004950:	b2da      	uxtb	r2, r3
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	2200      	movs	r2, #0
 800495a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004960:	2b00      	cmp	r3, #0
 8004962:	d163      	bne.n	8004a2c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004968:	009a      	lsls	r2, r3, #2
 800496a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800496e:	4013      	ands	r3, r2
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004974:	0f92      	lsrs	r2, r2, #30
 8004976:	431a      	orrs	r2, r3
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004980:	0edb      	lsrs	r3, r3, #27
 8004982:	b2db      	uxtb	r3, r3
 8004984:	f003 0307 	and.w	r3, r3, #7
 8004988:	b2da      	uxtb	r2, r3
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004992:	0e1b      	lsrs	r3, r3, #24
 8004994:	b2db      	uxtb	r3, r3
 8004996:	f003 0307 	and.w	r3, r3, #7
 800499a:	b2da      	uxtb	r2, r3
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049a4:	0d5b      	lsrs	r3, r3, #21
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	f003 0307 	and.w	r3, r3, #7
 80049ac:	b2da      	uxtb	r2, r3
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049b6:	0c9b      	lsrs	r3, r3, #18
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	f003 0307 	and.w	r3, r3, #7
 80049be:	b2da      	uxtb	r2, r3
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049c8:	0bdb      	lsrs	r3, r3, #15
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	f003 0307 	and.w	r3, r3, #7
 80049d0:	b2da      	uxtb	r2, r3
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	691b      	ldr	r3, [r3, #16]
 80049da:	1c5a      	adds	r2, r3, #1
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	7e1b      	ldrb	r3, [r3, #24]
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	f003 0307 	and.w	r3, r3, #7
 80049ea:	3302      	adds	r3, #2
 80049ec:	2201      	movs	r2, #1
 80049ee:	fa02 f303 	lsl.w	r3, r2, r3
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80049f6:	fb02 f203 	mul.w	r2, r2, r3
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	7a1b      	ldrb	r3, [r3, #8]
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	f003 030f 	and.w	r3, r3, #15
 8004a08:	2201      	movs	r2, #1
 8004a0a:	409a      	lsls	r2, r3
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a14:	687a      	ldr	r2, [r7, #4]
 8004a16:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004a18:	0a52      	lsrs	r2, r2, #9
 8004a1a:	fb02 f203 	mul.w	r2, r2, r3
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a28:	661a      	str	r2, [r3, #96]	; 0x60
 8004a2a:	e031      	b.n	8004a90 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d11d      	bne.n	8004a70 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a38:	041b      	lsls	r3, r3, #16
 8004a3a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a42:	0c1b      	lsrs	r3, r3, #16
 8004a44:	431a      	orrs	r2, r3
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	691b      	ldr	r3, [r3, #16]
 8004a4e:	3301      	adds	r3, #1
 8004a50:	029a      	lsls	r2, r3, #10
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a64:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	661a      	str	r2, [r3, #96]	; 0x60
 8004a6e:	e00f      	b.n	8004a90 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a58      	ldr	r2, [pc, #352]	; (8004bd8 <HAL_SD_GetCardCSD+0x344>)
 8004a76:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a7c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e09d      	b.n	8004bcc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a94:	0b9b      	lsrs	r3, r3, #14
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	f003 0301 	and.w	r3, r3, #1
 8004a9c:	b2da      	uxtb	r2, r3
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004aa6:	09db      	lsrs	r3, r3, #7
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004aae:	b2da      	uxtb	r2, r3
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004abe:	b2da      	uxtb	r2, r3
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ac8:	0fdb      	lsrs	r3, r3, #31
 8004aca:	b2da      	uxtb	r2, r3
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ad4:	0f5b      	lsrs	r3, r3, #29
 8004ad6:	b2db      	uxtb	r3, r3
 8004ad8:	f003 0303 	and.w	r3, r3, #3
 8004adc:	b2da      	uxtb	r2, r3
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ae6:	0e9b      	lsrs	r3, r3, #26
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	f003 0307 	and.w	r3, r3, #7
 8004aee:	b2da      	uxtb	r2, r3
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004af8:	0d9b      	lsrs	r3, r3, #22
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	f003 030f 	and.w	r3, r3, #15
 8004b00:	b2da      	uxtb	r2, r3
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b0a:	0d5b      	lsrs	r3, r3, #21
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	f003 0301 	and.w	r3, r3, #1
 8004b12:	b2da      	uxtb	r2, r3
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b26:	0c1b      	lsrs	r3, r3, #16
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	f003 0301 	and.w	r3, r3, #1
 8004b2e:	b2da      	uxtb	r2, r3
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b3a:	0bdb      	lsrs	r3, r3, #15
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	f003 0301 	and.w	r3, r3, #1
 8004b42:	b2da      	uxtb	r2, r3
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b4e:	0b9b      	lsrs	r3, r3, #14
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	f003 0301 	and.w	r3, r3, #1
 8004b56:	b2da      	uxtb	r2, r3
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b62:	0b5b      	lsrs	r3, r3, #13
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	f003 0301 	and.w	r3, r3, #1
 8004b6a:	b2da      	uxtb	r2, r3
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b76:	0b1b      	lsrs	r3, r3, #12
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	f003 0301 	and.w	r3, r3, #1
 8004b7e:	b2da      	uxtb	r2, r3
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b8a:	0a9b      	lsrs	r3, r3, #10
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	f003 0303 	and.w	r3, r3, #3
 8004b92:	b2da      	uxtb	r2, r3
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b9e:	0a1b      	lsrs	r3, r3, #8
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	f003 0303 	and.w	r3, r3, #3
 8004ba6:	b2da      	uxtb	r2, r3
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bb2:	085b      	lsrs	r3, r3, #1
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bba:	b2da      	uxtb	r2, r3
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8004bca:	2300      	movs	r3, #0
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	370c      	adds	r7, #12
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr
 8004bd8:	004005ff 	.word	0x004005ff

08004bdc <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b083      	sub	sp, #12
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8004c26:	2300      	movs	r3, #0
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	370c      	adds	r7, #12
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr

08004c34 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b086      	sub	sp, #24
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8004c40:	f107 030c 	add.w	r3, r7, #12
 8004c44:	4619      	mov	r1, r3
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f000 fa7e 	bl	8005148 <SD_SendStatus>
 8004c4c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d005      	beq.n	8004c60 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	431a      	orrs	r2, r3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	0a5b      	lsrs	r3, r3, #9
 8004c64:	f003 030f 	and.w	r3, r3, #15
 8004c68:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8004c6a:	693b      	ldr	r3, [r7, #16]
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3718      	adds	r7, #24
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}

08004c74 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b085      	sub	sp, #20
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c80:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c90:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004c92:	bf00      	nop
 8004c94:	3714      	adds	r7, #20
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr

08004c9e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004c9e:	b580      	push	{r7, lr}
 8004ca0:	b084      	sub	sp, #16
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004caa:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb0:	2b82      	cmp	r3, #130	; 0x82
 8004cb2:	d111      	bne.n	8004cd8 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f001 fb01 	bl	80062c0 <SDMMC_CmdStopTransfer>
 8004cbe:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d008      	beq.n	8004cd8 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	431a      	orrs	r2, r3
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8004cd2:	68f8      	ldr	r0, [r7, #12]
 8004cd4:	f7ff fdd4 	bl	8004880 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f022 0208 	bic.w	r2, r2, #8
 8004ce6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f240 523a 	movw	r2, #1338	; 0x53a
 8004cf0:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8004d00:	68f8      	ldr	r0, [r7, #12]
 8004d02:	f001 ff11 	bl	8006b28 <HAL_SD_RxCpltCallback>
#endif
}
 8004d06:	bf00      	nop
 8004d08:	3710      	adds	r7, #16
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
	...

08004d10 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b086      	sub	sp, #24
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d1c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f7fe fb18 	bl	8003354 <HAL_DMA_GetError>
 8004d24:	4603      	mov	r3, r0
 8004d26:	2b02      	cmp	r3, #2
 8004d28:	d03e      	beq.n	8004da8 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d30:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d38:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d002      	beq.n	8004d46 <SD_DMAError+0x36>
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d12d      	bne.n	8004da2 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a19      	ldr	r2, [pc, #100]	; (8004db0 <SD_DMAError+0xa0>)
 8004d4c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8004d5c:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d62:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8004d6a:	6978      	ldr	r0, [r7, #20]
 8004d6c:	f7ff ff62 	bl	8004c34 <HAL_SD_GetCardState>
 8004d70:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	2b06      	cmp	r3, #6
 8004d76:	d002      	beq.n	8004d7e <SD_DMAError+0x6e>
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	2b05      	cmp	r3, #5
 8004d7c:	d10a      	bne.n	8004d94 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4618      	mov	r0, r3
 8004d84:	f001 fa9c 	bl	80062c0 <SDMMC_CmdStopTransfer>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d8e:	431a      	orrs	r2, r3
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	2201      	movs	r2, #1
 8004d98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8004da2:	6978      	ldr	r0, [r7, #20]
 8004da4:	f7ff fd6c 	bl	8004880 <HAL_SD_ErrorCallback>
#endif
  }
}
 8004da8:	bf00      	nop
 8004daa:	3718      	adds	r7, #24
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	004005ff 	.word	0x004005ff

08004db4 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b084      	sub	sp, #16
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc0:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f240 523a 	movw	r2, #1338	; 0x53a
 8004dca:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8004dcc:	68f8      	ldr	r0, [r7, #12]
 8004dce:	f7ff ff31 	bl	8004c34 <HAL_SD_GetCardState>
 8004dd2:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2200      	movs	r2, #0
 8004de0:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	2b06      	cmp	r3, #6
 8004de6:	d002      	beq.n	8004dee <SD_DMATxAbort+0x3a>
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	2b05      	cmp	r3, #5
 8004dec:	d10a      	bne.n	8004e04 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4618      	mov	r0, r3
 8004df4:	f001 fa64 	bl	80062c0 <SDMMC_CmdStopTransfer>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dfe:	431a      	orrs	r2, r3
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d103      	bne.n	8004e14 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8004e0c:	68f8      	ldr	r0, [r7, #12]
 8004e0e:	f001 fe77 	bl	8006b00 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8004e12:	e002      	b.n	8004e1a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8004e14:	68f8      	ldr	r0, [r7, #12]
 8004e16:	f7ff fd33 	bl	8004880 <HAL_SD_ErrorCallback>
}
 8004e1a:	bf00      	nop
 8004e1c:	3710      	adds	r7, #16
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}

08004e22 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8004e22:	b580      	push	{r7, lr}
 8004e24:	b084      	sub	sp, #16
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e2e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f240 523a 	movw	r2, #1338	; 0x53a
 8004e38:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8004e3a:	68f8      	ldr	r0, [r7, #12]
 8004e3c:	f7ff fefa 	bl	8004c34 <HAL_SD_GetCardState>
 8004e40:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2201      	movs	r2, #1
 8004e46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	2b06      	cmp	r3, #6
 8004e54:	d002      	beq.n	8004e5c <SD_DMARxAbort+0x3a>
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	2b05      	cmp	r3, #5
 8004e5a:	d10a      	bne.n	8004e72 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4618      	mov	r0, r3
 8004e62:	f001 fa2d 	bl	80062c0 <SDMMC_CmdStopTransfer>
 8004e66:	4602      	mov	r2, r0
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e6c:	431a      	orrs	r2, r3
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d103      	bne.n	8004e82 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8004e7a:	68f8      	ldr	r0, [r7, #12]
 8004e7c:	f001 fe40 	bl	8006b00 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8004e80:	e002      	b.n	8004e88 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8004e82:	68f8      	ldr	r0, [r7, #12]
 8004e84:	f7ff fcfc 	bl	8004880 <HAL_SD_ErrorCallback>
}
 8004e88:	bf00      	nop
 8004e8a:	3710      	adds	r7, #16
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}

08004e90 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004e90:	b5b0      	push	{r4, r5, r7, lr}
 8004e92:	b094      	sub	sp, #80	; 0x50
 8004e94:	af04      	add	r7, sp, #16
 8004e96:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f001 f8df 	bl	8006064 <SDIO_GetPowerState>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d102      	bne.n	8004eb2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004eac:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004eb0:	e0b7      	b.n	8005022 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eb6:	2b03      	cmp	r3, #3
 8004eb8:	d02f      	beq.n	8004f1a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f001 fac5 	bl	800644e <SDMMC_CmdSendCID>
 8004ec4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004ec6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d001      	beq.n	8004ed0 <SD_InitCard+0x40>
    {
      return errorstate;
 8004ecc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ece:	e0a8      	b.n	8005022 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	2100      	movs	r1, #0
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f001 f909 	bl	80060ee <SDIO_GetResponse>
 8004edc:	4602      	mov	r2, r0
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	2104      	movs	r1, #4
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f001 f900 	bl	80060ee <SDIO_GetResponse>
 8004eee:	4602      	mov	r2, r0
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	2108      	movs	r1, #8
 8004efa:	4618      	mov	r0, r3
 8004efc:	f001 f8f7 	bl	80060ee <SDIO_GetResponse>
 8004f00:	4602      	mov	r2, r0
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	210c      	movs	r1, #12
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f001 f8ee 	bl	80060ee <SDIO_GetResponse>
 8004f12:	4602      	mov	r2, r0
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f1e:	2b03      	cmp	r3, #3
 8004f20:	d00d      	beq.n	8004f3e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f107 020e 	add.w	r2, r7, #14
 8004f2a:	4611      	mov	r1, r2
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f001 facb 	bl	80064c8 <SDMMC_CmdSetRelAdd>
 8004f32:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004f34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d001      	beq.n	8004f3e <SD_InitCard+0xae>
    {
      return errorstate;
 8004f3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f3c:	e071      	b.n	8005022 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f42:	2b03      	cmp	r3, #3
 8004f44:	d036      	beq.n	8004fb4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8004f46:	89fb      	ldrh	r3, [r7, #14]
 8004f48:	461a      	mov	r2, r3
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f56:	041b      	lsls	r3, r3, #16
 8004f58:	4619      	mov	r1, r3
 8004f5a:	4610      	mov	r0, r2
 8004f5c:	f001 fa95 	bl	800648a <SDMMC_CmdSendCSD>
 8004f60:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004f62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d001      	beq.n	8004f6c <SD_InitCard+0xdc>
    {
      return errorstate;
 8004f68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f6a:	e05a      	b.n	8005022 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	2100      	movs	r1, #0
 8004f72:	4618      	mov	r0, r3
 8004f74:	f001 f8bb 	bl	80060ee <SDIO_GetResponse>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	2104      	movs	r1, #4
 8004f84:	4618      	mov	r0, r3
 8004f86:	f001 f8b2 	bl	80060ee <SDIO_GetResponse>
 8004f8a:	4602      	mov	r2, r0
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	2108      	movs	r1, #8
 8004f96:	4618      	mov	r0, r3
 8004f98:	f001 f8a9 	bl	80060ee <SDIO_GetResponse>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	210c      	movs	r1, #12
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f001 f8a0 	bl	80060ee <SDIO_GetResponse>
 8004fae:	4602      	mov	r2, r0
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	2104      	movs	r1, #4
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f001 f897 	bl	80060ee <SDIO_GetResponse>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	0d1a      	lsrs	r2, r3, #20
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8004fc8:	f107 0310 	add.w	r3, r7, #16
 8004fcc:	4619      	mov	r1, r3
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f7ff fc60 	bl	8004894 <HAL_SD_GetCardCSD>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d002      	beq.n	8004fe0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004fda:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004fde:	e020      	b.n	8005022 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6819      	ldr	r1, [r3, #0]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fe8:	041b      	lsls	r3, r3, #16
 8004fea:	f04f 0400 	mov.w	r4, #0
 8004fee:	461a      	mov	r2, r3
 8004ff0:	4623      	mov	r3, r4
 8004ff2:	4608      	mov	r0, r1
 8004ff4:	f001 f986 	bl	8006304 <SDMMC_CmdSelDesel>
 8004ff8:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8004ffa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d001      	beq.n	8005004 <SD_InitCard+0x174>
  {
    return errorstate;
 8005000:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005002:	e00e      	b.n	8005022 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681d      	ldr	r5, [r3, #0]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	466c      	mov	r4, sp
 800500c:	f103 0210 	add.w	r2, r3, #16
 8005010:	ca07      	ldmia	r2, {r0, r1, r2}
 8005012:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005016:	3304      	adds	r3, #4
 8005018:	cb0e      	ldmia	r3, {r1, r2, r3}
 800501a:	4628      	mov	r0, r5
 800501c:	f000 ffca 	bl	8005fb4 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8005020:	2300      	movs	r3, #0
}
 8005022:	4618      	mov	r0, r3
 8005024:	3740      	adds	r7, #64	; 0x40
 8005026:	46bd      	mov	sp, r7
 8005028:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800502c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b086      	sub	sp, #24
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005034:	2300      	movs	r3, #0
 8005036:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8005038:	2300      	movs	r3, #0
 800503a:	617b      	str	r3, [r7, #20]
 800503c:	2300      	movs	r3, #0
 800503e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4618      	mov	r0, r3
 8005046:	f001 f980 	bl	800634a <SDMMC_CmdGoIdleState>
 800504a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d001      	beq.n	8005056 <SD_PowerON+0x2a>
  {
    return errorstate;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	e072      	b.n	800513c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4618      	mov	r0, r3
 800505c:	f001 f993 	bl	8006386 <SDMMC_CmdOperCond>
 8005060:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d00d      	beq.n	8005084 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2200      	movs	r2, #0
 800506c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4618      	mov	r0, r3
 8005074:	f001 f969 	bl	800634a <SDMMC_CmdGoIdleState>
 8005078:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d004      	beq.n	800508a <SD_PowerON+0x5e>
    {
      return errorstate;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	e05b      	b.n	800513c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2201      	movs	r2, #1
 8005088:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800508e:	2b01      	cmp	r3, #1
 8005090:	d137      	bne.n	8005102 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	2100      	movs	r1, #0
 8005098:	4618      	mov	r0, r3
 800509a:	f001 f993 	bl	80063c4 <SDMMC_CmdAppCommand>
 800509e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d02d      	beq.n	8005102 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80050a6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80050aa:	e047      	b.n	800513c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	2100      	movs	r1, #0
 80050b2:	4618      	mov	r0, r3
 80050b4:	f001 f986 	bl	80063c4 <SDMMC_CmdAppCommand>
 80050b8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d001      	beq.n	80050c4 <SD_PowerON+0x98>
    {
      return errorstate;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	e03b      	b.n	800513c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	491e      	ldr	r1, [pc, #120]	; (8005144 <SD_PowerON+0x118>)
 80050ca:	4618      	mov	r0, r3
 80050cc:	f001 f99c 	bl	8006408 <SDMMC_CmdAppOperCommand>
 80050d0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d002      	beq.n	80050de <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80050d8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80050dc:	e02e      	b.n	800513c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	2100      	movs	r1, #0
 80050e4:	4618      	mov	r0, r3
 80050e6:	f001 f802 	bl	80060ee <SDIO_GetResponse>
 80050ea:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	0fdb      	lsrs	r3, r3, #31
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d101      	bne.n	80050f8 <SD_PowerON+0xcc>
 80050f4:	2301      	movs	r3, #1
 80050f6:	e000      	b.n	80050fa <SD_PowerON+0xce>
 80050f8:	2300      	movs	r3, #0
 80050fa:	613b      	str	r3, [r7, #16]

    count++;
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	3301      	adds	r3, #1
 8005100:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005108:	4293      	cmp	r3, r2
 800510a:	d802      	bhi.n	8005112 <SD_PowerON+0xe6>
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d0cc      	beq.n	80050ac <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005118:	4293      	cmp	r3, r2
 800511a:	d902      	bls.n	8005122 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800511c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005120:	e00c      	b.n	800513c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005128:	2b00      	cmp	r3, #0
 800512a:	d003      	beq.n	8005134 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2201      	movs	r2, #1
 8005130:	645a      	str	r2, [r3, #68]	; 0x44
 8005132:	e002      	b.n	800513a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2200      	movs	r2, #0
 8005138:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800513a:	2300      	movs	r3, #0
}
 800513c:	4618      	mov	r0, r3
 800513e:	3718      	adds	r7, #24
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}
 8005144:	c1100000 	.word	0xc1100000

08005148 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b084      	sub	sp, #16
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d102      	bne.n	800515e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8005158:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800515c:	e018      	b.n	8005190 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005166:	041b      	lsls	r3, r3, #16
 8005168:	4619      	mov	r1, r3
 800516a:	4610      	mov	r0, r2
 800516c:	f001 f9cd 	bl	800650a <SDMMC_CmdSendStatus>
 8005170:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d001      	beq.n	800517c <SD_SendStatus+0x34>
  {
    return errorstate;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	e009      	b.n	8005190 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	2100      	movs	r1, #0
 8005182:	4618      	mov	r0, r3
 8005184:	f000 ffb3 	bl	80060ee <SDIO_GetResponse>
 8005188:	4602      	mov	r2, r0
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800518e:	2300      	movs	r3, #0
}
 8005190:	4618      	mov	r0, r3
 8005192:	3710      	adds	r7, #16
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b086      	sub	sp, #24
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051a4:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051aa:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d03f      	beq.n	8005232 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80051b2:	2300      	movs	r3, #0
 80051b4:	617b      	str	r3, [r7, #20]
 80051b6:	e033      	b.n	8005220 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4618      	mov	r0, r3
 80051be:	f000 ff24 	bl	800600a <SDIO_ReadFIFO>
 80051c2:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	b2da      	uxtb	r2, r3
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	701a      	strb	r2, [r3, #0]
      tmp++;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	3301      	adds	r3, #1
 80051d0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	3b01      	subs	r3, #1
 80051d6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	0a1b      	lsrs	r3, r3, #8
 80051dc:	b2da      	uxtb	r2, r3
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	701a      	strb	r2, [r3, #0]
      tmp++;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	3301      	adds	r3, #1
 80051e6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	3b01      	subs	r3, #1
 80051ec:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	0c1b      	lsrs	r3, r3, #16
 80051f2:	b2da      	uxtb	r2, r3
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	701a      	strb	r2, [r3, #0]
      tmp++;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	3301      	adds	r3, #1
 80051fc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	3b01      	subs	r3, #1
 8005202:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	0e1b      	lsrs	r3, r3, #24
 8005208:	b2da      	uxtb	r2, r3
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	3301      	adds	r3, #1
 8005212:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	3b01      	subs	r3, #1
 8005218:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	3301      	adds	r3, #1
 800521e:	617b      	str	r3, [r7, #20]
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	2b07      	cmp	r3, #7
 8005224:	d9c8      	bls.n	80051b8 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	68fa      	ldr	r2, [r7, #12]
 800522a:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	693a      	ldr	r2, [r7, #16]
 8005230:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8005232:	bf00      	nop
 8005234:	3718      	adds	r7, #24
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}

0800523a <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800523a:	b580      	push	{r7, lr}
 800523c:	b086      	sub	sp, #24
 800523e:	af00      	add	r7, sp, #0
 8005240:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6a1b      	ldr	r3, [r3, #32]
 8005246:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d043      	beq.n	80052dc <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8005254:	2300      	movs	r3, #0
 8005256:	617b      	str	r3, [r7, #20]
 8005258:	e037      	b.n	80052ca <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	781b      	ldrb	r3, [r3, #0]
 800525e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	3301      	adds	r3, #1
 8005264:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	3b01      	subs	r3, #1
 800526a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	781b      	ldrb	r3, [r3, #0]
 8005270:	021a      	lsls	r2, r3, #8
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	4313      	orrs	r3, r2
 8005276:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	3301      	adds	r3, #1
 800527c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	3b01      	subs	r3, #1
 8005282:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	781b      	ldrb	r3, [r3, #0]
 8005288:	041a      	lsls	r2, r3, #16
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	4313      	orrs	r3, r2
 800528e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	3301      	adds	r3, #1
 8005294:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	3b01      	subs	r3, #1
 800529a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	781b      	ldrb	r3, [r3, #0]
 80052a0:	061a      	lsls	r2, r3, #24
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	4313      	orrs	r3, r2
 80052a6:	60bb      	str	r3, [r7, #8]
      tmp++;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	3301      	adds	r3, #1
 80052ac:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	3b01      	subs	r3, #1
 80052b2:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f107 0208 	add.w	r2, r7, #8
 80052bc:	4611      	mov	r1, r2
 80052be:	4618      	mov	r0, r3
 80052c0:	f000 feb0 	bl	8006024 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	3301      	adds	r3, #1
 80052c8:	617b      	str	r3, [r7, #20]
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	2b07      	cmp	r3, #7
 80052ce:	d9c4      	bls.n	800525a <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	68fa      	ldr	r2, [r7, #12]
 80052d4:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	693a      	ldr	r2, [r7, #16]
 80052da:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80052dc:	bf00      	nop
 80052de:	3718      	adds	r7, #24
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}

080052e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b082      	sub	sp, #8
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d101      	bne.n	80052f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e01d      	b.n	8005332 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d106      	bne.n	8005310 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2200      	movs	r2, #0
 8005306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f7fc fe3e 	bl	8001f8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2202      	movs	r2, #2
 8005314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	3304      	adds	r3, #4
 8005320:	4619      	mov	r1, r3
 8005322:	4610      	mov	r0, r2
 8005324:	f000 faf8 	bl	8005918 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005330:	2300      	movs	r3, #0
}
 8005332:	4618      	mov	r0, r3
 8005334:	3708      	adds	r7, #8
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}

0800533a <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800533a:	b580      	push	{r7, lr}
 800533c:	b082      	sub	sp, #8
 800533e:	af00      	add	r7, sp, #0
 8005340:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d101      	bne.n	800534c <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	e01d      	b.n	8005388 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005352:	b2db      	uxtb	r3, r3
 8005354:	2b00      	cmp	r3, #0
 8005356:	d106      	bne.n	8005366 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2200      	movs	r2, #0
 800535c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f000 f815 	bl	8005390 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2202      	movs	r2, #2
 800536a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	3304      	adds	r3, #4
 8005376:	4619      	mov	r1, r3
 8005378:	4610      	mov	r0, r2
 800537a:	f000 facd 	bl	8005918 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2201      	movs	r2, #1
 8005382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005386:	2300      	movs	r3, #0
}
 8005388:	4618      	mov	r0, r3
 800538a:	3708      	adds	r7, #8
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}

08005390 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8005390:	b480      	push	{r7}
 8005392:	b083      	sub	sp, #12
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005398:	bf00      	nop
 800539a:	370c      	adds	r7, #12
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr

080053a4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b084      	sub	sp, #16
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	2b0c      	cmp	r3, #12
 80053b2:	d841      	bhi.n	8005438 <HAL_TIM_IC_Start_IT+0x94>
 80053b4:	a201      	add	r2, pc, #4	; (adr r2, 80053bc <HAL_TIM_IC_Start_IT+0x18>)
 80053b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053ba:	bf00      	nop
 80053bc:	080053f1 	.word	0x080053f1
 80053c0:	08005439 	.word	0x08005439
 80053c4:	08005439 	.word	0x08005439
 80053c8:	08005439 	.word	0x08005439
 80053cc:	08005403 	.word	0x08005403
 80053d0:	08005439 	.word	0x08005439
 80053d4:	08005439 	.word	0x08005439
 80053d8:	08005439 	.word	0x08005439
 80053dc:	08005415 	.word	0x08005415
 80053e0:	08005439 	.word	0x08005439
 80053e4:	08005439 	.word	0x08005439
 80053e8:	08005439 	.word	0x08005439
 80053ec:	08005427 	.word	0x08005427
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	68da      	ldr	r2, [r3, #12]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f042 0202 	orr.w	r2, r2, #2
 80053fe:	60da      	str	r2, [r3, #12]
      break;
 8005400:	e01b      	b.n	800543a <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	68da      	ldr	r2, [r3, #12]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f042 0204 	orr.w	r2, r2, #4
 8005410:	60da      	str	r2, [r3, #12]
      break;
 8005412:	e012      	b.n	800543a <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	68da      	ldr	r2, [r3, #12]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f042 0208 	orr.w	r2, r2, #8
 8005422:	60da      	str	r2, [r3, #12]
      break;
 8005424:	e009      	b.n	800543a <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	68da      	ldr	r2, [r3, #12]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f042 0210 	orr.w	r2, r2, #16
 8005434:	60da      	str	r2, [r3, #12]
      break;
 8005436:	e000      	b.n	800543a <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8005438:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	2201      	movs	r2, #1
 8005440:	6839      	ldr	r1, [r7, #0]
 8005442:	4618      	mov	r0, r3
 8005444:	f000 fd0e 	bl	8005e64 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	f003 0307 	and.w	r3, r3, #7
 8005452:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2b06      	cmp	r3, #6
 8005458:	d007      	beq.n	800546a <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f042 0201 	orr.w	r2, r2, #1
 8005468:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800546a:	2300      	movs	r3, #0
}
 800546c:	4618      	mov	r0, r3
 800546e:	3710      	adds	r7, #16
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}

08005474 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b082      	sub	sp, #8
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	691b      	ldr	r3, [r3, #16]
 8005482:	f003 0302 	and.w	r3, r3, #2
 8005486:	2b02      	cmp	r3, #2
 8005488:	d122      	bne.n	80054d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	f003 0302 	and.w	r3, r3, #2
 8005494:	2b02      	cmp	r3, #2
 8005496:	d11b      	bne.n	80054d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f06f 0202 	mvn.w	r2, #2
 80054a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2201      	movs	r2, #1
 80054a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	699b      	ldr	r3, [r3, #24]
 80054ae:	f003 0303 	and.w	r3, r3, #3
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d003      	beq.n	80054be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f000 fa0f 	bl	80058da <HAL_TIM_IC_CaptureCallback>
 80054bc:	e005      	b.n	80054ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f000 fa01 	bl	80058c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f000 fa12 	bl	80058ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2200      	movs	r2, #0
 80054ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	691b      	ldr	r3, [r3, #16]
 80054d6:	f003 0304 	and.w	r3, r3, #4
 80054da:	2b04      	cmp	r3, #4
 80054dc:	d122      	bne.n	8005524 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	68db      	ldr	r3, [r3, #12]
 80054e4:	f003 0304 	and.w	r3, r3, #4
 80054e8:	2b04      	cmp	r3, #4
 80054ea:	d11b      	bne.n	8005524 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f06f 0204 	mvn.w	r2, #4
 80054f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2202      	movs	r2, #2
 80054fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	699b      	ldr	r3, [r3, #24]
 8005502:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005506:	2b00      	cmp	r3, #0
 8005508:	d003      	beq.n	8005512 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f000 f9e5 	bl	80058da <HAL_TIM_IC_CaptureCallback>
 8005510:	e005      	b.n	800551e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f000 f9d7 	bl	80058c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f000 f9e8 	bl	80058ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2200      	movs	r2, #0
 8005522:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	691b      	ldr	r3, [r3, #16]
 800552a:	f003 0308 	and.w	r3, r3, #8
 800552e:	2b08      	cmp	r3, #8
 8005530:	d122      	bne.n	8005578 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	68db      	ldr	r3, [r3, #12]
 8005538:	f003 0308 	and.w	r3, r3, #8
 800553c:	2b08      	cmp	r3, #8
 800553e:	d11b      	bne.n	8005578 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f06f 0208 	mvn.w	r2, #8
 8005548:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2204      	movs	r2, #4
 800554e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	69db      	ldr	r3, [r3, #28]
 8005556:	f003 0303 	and.w	r3, r3, #3
 800555a:	2b00      	cmp	r3, #0
 800555c:	d003      	beq.n	8005566 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f000 f9bb 	bl	80058da <HAL_TIM_IC_CaptureCallback>
 8005564:	e005      	b.n	8005572 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f000 f9ad 	bl	80058c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f000 f9be 	bl	80058ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2200      	movs	r2, #0
 8005576:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	691b      	ldr	r3, [r3, #16]
 800557e:	f003 0310 	and.w	r3, r3, #16
 8005582:	2b10      	cmp	r3, #16
 8005584:	d122      	bne.n	80055cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	68db      	ldr	r3, [r3, #12]
 800558c:	f003 0310 	and.w	r3, r3, #16
 8005590:	2b10      	cmp	r3, #16
 8005592:	d11b      	bne.n	80055cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f06f 0210 	mvn.w	r2, #16
 800559c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2208      	movs	r2, #8
 80055a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	69db      	ldr	r3, [r3, #28]
 80055aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d003      	beq.n	80055ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f000 f991 	bl	80058da <HAL_TIM_IC_CaptureCallback>
 80055b8:	e005      	b.n	80055c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f000 f983 	bl	80058c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f000 f994 	bl	80058ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2200      	movs	r2, #0
 80055ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	691b      	ldr	r3, [r3, #16]
 80055d2:	f003 0301 	and.w	r3, r3, #1
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d10e      	bne.n	80055f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	68db      	ldr	r3, [r3, #12]
 80055e0:	f003 0301 	and.w	r3, r3, #1
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d107      	bne.n	80055f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f06f 0201 	mvn.w	r2, #1
 80055f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f000 f95d 	bl	80058b2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	691b      	ldr	r3, [r3, #16]
 80055fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005602:	2b80      	cmp	r3, #128	; 0x80
 8005604:	d10e      	bne.n	8005624 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	68db      	ldr	r3, [r3, #12]
 800560c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005610:	2b80      	cmp	r3, #128	; 0x80
 8005612:	d107      	bne.n	8005624 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800561c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f000 fcbe 	bl	8005fa0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	691b      	ldr	r3, [r3, #16]
 800562a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800562e:	2b40      	cmp	r3, #64	; 0x40
 8005630:	d10e      	bne.n	8005650 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800563c:	2b40      	cmp	r3, #64	; 0x40
 800563e:	d107      	bne.n	8005650 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005648:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f000 f959 	bl	8005902 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	691b      	ldr	r3, [r3, #16]
 8005656:	f003 0320 	and.w	r3, r3, #32
 800565a:	2b20      	cmp	r3, #32
 800565c:	d10e      	bne.n	800567c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	68db      	ldr	r3, [r3, #12]
 8005664:	f003 0320 	and.w	r3, r3, #32
 8005668:	2b20      	cmp	r3, #32
 800566a:	d107      	bne.n	800567c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f06f 0220 	mvn.w	r2, #32
 8005674:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f000 fc88 	bl	8005f8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800567c:	bf00      	nop
 800567e:	3708      	adds	r7, #8
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}

08005684 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b084      	sub	sp, #16
 8005688:	af00      	add	r7, sp, #0
 800568a:	60f8      	str	r0, [r7, #12]
 800568c:	60b9      	str	r1, [r7, #8]
 800568e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005696:	2b01      	cmp	r3, #1
 8005698:	d101      	bne.n	800569e <HAL_TIM_OC_ConfigChannel+0x1a>
 800569a:	2302      	movs	r3, #2
 800569c:	e04e      	b.n	800573c <HAL_TIM_OC_ConfigChannel+0xb8>
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2201      	movs	r2, #1
 80056a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2202      	movs	r2, #2
 80056aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2b0c      	cmp	r3, #12
 80056b2:	d839      	bhi.n	8005728 <HAL_TIM_OC_ConfigChannel+0xa4>
 80056b4:	a201      	add	r2, pc, #4	; (adr r2, 80056bc <HAL_TIM_OC_ConfigChannel+0x38>)
 80056b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ba:	bf00      	nop
 80056bc:	080056f1 	.word	0x080056f1
 80056c0:	08005729 	.word	0x08005729
 80056c4:	08005729 	.word	0x08005729
 80056c8:	08005729 	.word	0x08005729
 80056cc:	080056ff 	.word	0x080056ff
 80056d0:	08005729 	.word	0x08005729
 80056d4:	08005729 	.word	0x08005729
 80056d8:	08005729 	.word	0x08005729
 80056dc:	0800570d 	.word	0x0800570d
 80056e0:	08005729 	.word	0x08005729
 80056e4:	08005729 	.word	0x08005729
 80056e8:	08005729 	.word	0x08005729
 80056ec:	0800571b 	.word	0x0800571b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	68b9      	ldr	r1, [r7, #8]
 80056f6:	4618      	mov	r0, r3
 80056f8:	f000 f98e 	bl	8005a18 <TIM_OC1_SetConfig>
      break;
 80056fc:	e015      	b.n	800572a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	68b9      	ldr	r1, [r7, #8]
 8005704:	4618      	mov	r0, r3
 8005706:	f000 f9ed 	bl	8005ae4 <TIM_OC2_SetConfig>
      break;
 800570a:	e00e      	b.n	800572a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	68b9      	ldr	r1, [r7, #8]
 8005712:	4618      	mov	r0, r3
 8005714:	f000 fa52 	bl	8005bbc <TIM_OC3_SetConfig>
      break;
 8005718:	e007      	b.n	800572a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	68b9      	ldr	r1, [r7, #8]
 8005720:	4618      	mov	r0, r3
 8005722:	f000 fab5 	bl	8005c90 <TIM_OC4_SetConfig>
      break;
 8005726:	e000      	b.n	800572a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 8005728:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2201      	movs	r2, #1
 800572e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2200      	movs	r2, #0
 8005736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800573a:	2300      	movs	r3, #0
}
 800573c:	4618      	mov	r0, r3
 800573e:	3710      	adds	r7, #16
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}

08005744 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b084      	sub	sp, #16
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005754:	2b01      	cmp	r3, #1
 8005756:	d101      	bne.n	800575c <HAL_TIM_ConfigClockSource+0x18>
 8005758:	2302      	movs	r3, #2
 800575a:	e0a6      	b.n	80058aa <HAL_TIM_ConfigClockSource+0x166>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2201      	movs	r2, #1
 8005760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2202      	movs	r2, #2
 8005768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800577a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005782:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	68fa      	ldr	r2, [r7, #12]
 800578a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	2b40      	cmp	r3, #64	; 0x40
 8005792:	d067      	beq.n	8005864 <HAL_TIM_ConfigClockSource+0x120>
 8005794:	2b40      	cmp	r3, #64	; 0x40
 8005796:	d80b      	bhi.n	80057b0 <HAL_TIM_ConfigClockSource+0x6c>
 8005798:	2b10      	cmp	r3, #16
 800579a:	d073      	beq.n	8005884 <HAL_TIM_ConfigClockSource+0x140>
 800579c:	2b10      	cmp	r3, #16
 800579e:	d802      	bhi.n	80057a6 <HAL_TIM_ConfigClockSource+0x62>
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d06f      	beq.n	8005884 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80057a4:	e078      	b.n	8005898 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80057a6:	2b20      	cmp	r3, #32
 80057a8:	d06c      	beq.n	8005884 <HAL_TIM_ConfigClockSource+0x140>
 80057aa:	2b30      	cmp	r3, #48	; 0x30
 80057ac:	d06a      	beq.n	8005884 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80057ae:	e073      	b.n	8005898 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80057b0:	2b70      	cmp	r3, #112	; 0x70
 80057b2:	d00d      	beq.n	80057d0 <HAL_TIM_ConfigClockSource+0x8c>
 80057b4:	2b70      	cmp	r3, #112	; 0x70
 80057b6:	d804      	bhi.n	80057c2 <HAL_TIM_ConfigClockSource+0x7e>
 80057b8:	2b50      	cmp	r3, #80	; 0x50
 80057ba:	d033      	beq.n	8005824 <HAL_TIM_ConfigClockSource+0xe0>
 80057bc:	2b60      	cmp	r3, #96	; 0x60
 80057be:	d041      	beq.n	8005844 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80057c0:	e06a      	b.n	8005898 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80057c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057c6:	d066      	beq.n	8005896 <HAL_TIM_ConfigClockSource+0x152>
 80057c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057cc:	d017      	beq.n	80057fe <HAL_TIM_ConfigClockSource+0xba>
      break;
 80057ce:	e063      	b.n	8005898 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6818      	ldr	r0, [r3, #0]
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	6899      	ldr	r1, [r3, #8]
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	685a      	ldr	r2, [r3, #4]
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	68db      	ldr	r3, [r3, #12]
 80057e0:	f000 fb20 	bl	8005e24 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80057f2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	68fa      	ldr	r2, [r7, #12]
 80057fa:	609a      	str	r2, [r3, #8]
      break;
 80057fc:	e04c      	b.n	8005898 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6818      	ldr	r0, [r3, #0]
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	6899      	ldr	r1, [r3, #8]
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	685a      	ldr	r2, [r3, #4]
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	68db      	ldr	r3, [r3, #12]
 800580e:	f000 fb09 	bl	8005e24 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	689a      	ldr	r2, [r3, #8]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005820:	609a      	str	r2, [r3, #8]
      break;
 8005822:	e039      	b.n	8005898 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6818      	ldr	r0, [r3, #0]
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	6859      	ldr	r1, [r3, #4]
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	68db      	ldr	r3, [r3, #12]
 8005830:	461a      	mov	r2, r3
 8005832:	f000 fa7d 	bl	8005d30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	2150      	movs	r1, #80	; 0x50
 800583c:	4618      	mov	r0, r3
 800583e:	f000 fad6 	bl	8005dee <TIM_ITRx_SetConfig>
      break;
 8005842:	e029      	b.n	8005898 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6818      	ldr	r0, [r3, #0]
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	6859      	ldr	r1, [r3, #4]
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	68db      	ldr	r3, [r3, #12]
 8005850:	461a      	mov	r2, r3
 8005852:	f000 fa9c 	bl	8005d8e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	2160      	movs	r1, #96	; 0x60
 800585c:	4618      	mov	r0, r3
 800585e:	f000 fac6 	bl	8005dee <TIM_ITRx_SetConfig>
      break;
 8005862:	e019      	b.n	8005898 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6818      	ldr	r0, [r3, #0]
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	6859      	ldr	r1, [r3, #4]
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	68db      	ldr	r3, [r3, #12]
 8005870:	461a      	mov	r2, r3
 8005872:	f000 fa5d 	bl	8005d30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	2140      	movs	r1, #64	; 0x40
 800587c:	4618      	mov	r0, r3
 800587e:	f000 fab6 	bl	8005dee <TIM_ITRx_SetConfig>
      break;
 8005882:	e009      	b.n	8005898 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4619      	mov	r1, r3
 800588e:	4610      	mov	r0, r2
 8005890:	f000 faad 	bl	8005dee <TIM_ITRx_SetConfig>
      break;
 8005894:	e000      	b.n	8005898 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005896:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2201      	movs	r2, #1
 800589c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2200      	movs	r2, #0
 80058a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058a8:	2300      	movs	r3, #0
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3710      	adds	r7, #16
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}

080058b2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058b2:	b480      	push	{r7}
 80058b4:	b083      	sub	sp, #12
 80058b6:	af00      	add	r7, sp, #0
 80058b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80058ba:	bf00      	nop
 80058bc:	370c      	adds	r7, #12
 80058be:	46bd      	mov	sp, r7
 80058c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c4:	4770      	bx	lr

080058c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058c6:	b480      	push	{r7}
 80058c8:	b083      	sub	sp, #12
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80058ce:	bf00      	nop
 80058d0:	370c      	adds	r7, #12
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr

080058da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80058da:	b480      	push	{r7}
 80058dc:	b083      	sub	sp, #12
 80058de:	af00      	add	r7, sp, #0
 80058e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80058e2:	bf00      	nop
 80058e4:	370c      	adds	r7, #12
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr

080058ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80058ee:	b480      	push	{r7}
 80058f0:	b083      	sub	sp, #12
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80058f6:	bf00      	nop
 80058f8:	370c      	adds	r7, #12
 80058fa:	46bd      	mov	sp, r7
 80058fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005900:	4770      	bx	lr

08005902 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005902:	b480      	push	{r7}
 8005904:	b083      	sub	sp, #12
 8005906:	af00      	add	r7, sp, #0
 8005908:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800590a:	bf00      	nop
 800590c:	370c      	adds	r7, #12
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr
	...

08005918 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005918:	b480      	push	{r7}
 800591a:	b085      	sub	sp, #20
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	4a34      	ldr	r2, [pc, #208]	; (80059fc <TIM_Base_SetConfig+0xe4>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d00f      	beq.n	8005950 <TIM_Base_SetConfig+0x38>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005936:	d00b      	beq.n	8005950 <TIM_Base_SetConfig+0x38>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	4a31      	ldr	r2, [pc, #196]	; (8005a00 <TIM_Base_SetConfig+0xe8>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d007      	beq.n	8005950 <TIM_Base_SetConfig+0x38>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	4a30      	ldr	r2, [pc, #192]	; (8005a04 <TIM_Base_SetConfig+0xec>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d003      	beq.n	8005950 <TIM_Base_SetConfig+0x38>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	4a2f      	ldr	r2, [pc, #188]	; (8005a08 <TIM_Base_SetConfig+0xf0>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d108      	bne.n	8005962 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005956:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	68fa      	ldr	r2, [r7, #12]
 800595e:	4313      	orrs	r3, r2
 8005960:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	4a25      	ldr	r2, [pc, #148]	; (80059fc <TIM_Base_SetConfig+0xe4>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d01b      	beq.n	80059a2 <TIM_Base_SetConfig+0x8a>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005970:	d017      	beq.n	80059a2 <TIM_Base_SetConfig+0x8a>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	4a22      	ldr	r2, [pc, #136]	; (8005a00 <TIM_Base_SetConfig+0xe8>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d013      	beq.n	80059a2 <TIM_Base_SetConfig+0x8a>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	4a21      	ldr	r2, [pc, #132]	; (8005a04 <TIM_Base_SetConfig+0xec>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d00f      	beq.n	80059a2 <TIM_Base_SetConfig+0x8a>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	4a20      	ldr	r2, [pc, #128]	; (8005a08 <TIM_Base_SetConfig+0xf0>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d00b      	beq.n	80059a2 <TIM_Base_SetConfig+0x8a>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	4a1f      	ldr	r2, [pc, #124]	; (8005a0c <TIM_Base_SetConfig+0xf4>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d007      	beq.n	80059a2 <TIM_Base_SetConfig+0x8a>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	4a1e      	ldr	r2, [pc, #120]	; (8005a10 <TIM_Base_SetConfig+0xf8>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d003      	beq.n	80059a2 <TIM_Base_SetConfig+0x8a>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	4a1d      	ldr	r2, [pc, #116]	; (8005a14 <TIM_Base_SetConfig+0xfc>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d108      	bne.n	80059b4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	68db      	ldr	r3, [r3, #12]
 80059ae:	68fa      	ldr	r2, [r7, #12]
 80059b0:	4313      	orrs	r3, r2
 80059b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	695b      	ldr	r3, [r3, #20]
 80059be:	4313      	orrs	r3, r2
 80059c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	68fa      	ldr	r2, [r7, #12]
 80059c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	689a      	ldr	r2, [r3, #8]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	681a      	ldr	r2, [r3, #0]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	4a08      	ldr	r2, [pc, #32]	; (80059fc <TIM_Base_SetConfig+0xe4>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d103      	bne.n	80059e8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	691a      	ldr	r2, [r3, #16]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2201      	movs	r2, #1
 80059ec:	615a      	str	r2, [r3, #20]
}
 80059ee:	bf00      	nop
 80059f0:	3714      	adds	r7, #20
 80059f2:	46bd      	mov	sp, r7
 80059f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f8:	4770      	bx	lr
 80059fa:	bf00      	nop
 80059fc:	40010000 	.word	0x40010000
 8005a00:	40000400 	.word	0x40000400
 8005a04:	40000800 	.word	0x40000800
 8005a08:	40000c00 	.word	0x40000c00
 8005a0c:	40014000 	.word	0x40014000
 8005a10:	40014400 	.word	0x40014400
 8005a14:	40014800 	.word	0x40014800

08005a18 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b087      	sub	sp, #28
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
 8005a20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6a1b      	ldr	r3, [r3, #32]
 8005a26:	f023 0201 	bic.w	r2, r3, #1
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6a1b      	ldr	r3, [r3, #32]
 8005a32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	699b      	ldr	r3, [r3, #24]
 8005a3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f023 0303 	bic.w	r3, r3, #3
 8005a4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	68fa      	ldr	r2, [r7, #12]
 8005a56:	4313      	orrs	r3, r2
 8005a58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	f023 0302 	bic.w	r3, r3, #2
 8005a60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	697a      	ldr	r2, [r7, #20]
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	4a1c      	ldr	r2, [pc, #112]	; (8005ae0 <TIM_OC1_SetConfig+0xc8>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d10c      	bne.n	8005a8e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	f023 0308 	bic.w	r3, r3, #8
 8005a7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	68db      	ldr	r3, [r3, #12]
 8005a80:	697a      	ldr	r2, [r7, #20]
 8005a82:	4313      	orrs	r3, r2
 8005a84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	f023 0304 	bic.w	r3, r3, #4
 8005a8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	4a13      	ldr	r2, [pc, #76]	; (8005ae0 <TIM_OC1_SetConfig+0xc8>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d111      	bne.n	8005aba <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005aa4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	695b      	ldr	r3, [r3, #20]
 8005aaa:	693a      	ldr	r2, [r7, #16]
 8005aac:	4313      	orrs	r3, r2
 8005aae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	699b      	ldr	r3, [r3, #24]
 8005ab4:	693a      	ldr	r2, [r7, #16]
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	693a      	ldr	r2, [r7, #16]
 8005abe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	68fa      	ldr	r2, [r7, #12]
 8005ac4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	685a      	ldr	r2, [r3, #4]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	697a      	ldr	r2, [r7, #20]
 8005ad2:	621a      	str	r2, [r3, #32]
}
 8005ad4:	bf00      	nop
 8005ad6:	371c      	adds	r7, #28
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr
 8005ae0:	40010000 	.word	0x40010000

08005ae4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b087      	sub	sp, #28
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6a1b      	ldr	r3, [r3, #32]
 8005af2:	f023 0210 	bic.w	r2, r3, #16
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6a1b      	ldr	r3, [r3, #32]
 8005afe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	699b      	ldr	r3, [r3, #24]
 8005b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	021b      	lsls	r3, r3, #8
 8005b22:	68fa      	ldr	r2, [r7, #12]
 8005b24:	4313      	orrs	r3, r2
 8005b26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	f023 0320 	bic.w	r3, r3, #32
 8005b2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	011b      	lsls	r3, r3, #4
 8005b36:	697a      	ldr	r2, [r7, #20]
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	4a1e      	ldr	r2, [pc, #120]	; (8005bb8 <TIM_OC2_SetConfig+0xd4>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d10d      	bne.n	8005b60 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	68db      	ldr	r3, [r3, #12]
 8005b50:	011b      	lsls	r3, r3, #4
 8005b52:	697a      	ldr	r2, [r7, #20]
 8005b54:	4313      	orrs	r3, r2
 8005b56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b5e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	4a15      	ldr	r2, [pc, #84]	; (8005bb8 <TIM_OC2_SetConfig+0xd4>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d113      	bne.n	8005b90 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b6e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b76:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	695b      	ldr	r3, [r3, #20]
 8005b7c:	009b      	lsls	r3, r3, #2
 8005b7e:	693a      	ldr	r2, [r7, #16]
 8005b80:	4313      	orrs	r3, r2
 8005b82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	699b      	ldr	r3, [r3, #24]
 8005b88:	009b      	lsls	r3, r3, #2
 8005b8a:	693a      	ldr	r2, [r7, #16]
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	693a      	ldr	r2, [r7, #16]
 8005b94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	68fa      	ldr	r2, [r7, #12]
 8005b9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	685a      	ldr	r2, [r3, #4]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	697a      	ldr	r2, [r7, #20]
 8005ba8:	621a      	str	r2, [r3, #32]
}
 8005baa:	bf00      	nop
 8005bac:	371c      	adds	r7, #28
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb4:	4770      	bx	lr
 8005bb6:	bf00      	nop
 8005bb8:	40010000 	.word	0x40010000

08005bbc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b087      	sub	sp, #28
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
 8005bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6a1b      	ldr	r3, [r3, #32]
 8005bca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6a1b      	ldr	r3, [r3, #32]
 8005bd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	69db      	ldr	r3, [r3, #28]
 8005be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	f023 0303 	bic.w	r3, r3, #3
 8005bf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	68fa      	ldr	r2, [r7, #12]
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	021b      	lsls	r3, r3, #8
 8005c0c:	697a      	ldr	r2, [r7, #20]
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	4a1d      	ldr	r2, [pc, #116]	; (8005c8c <TIM_OC3_SetConfig+0xd0>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d10d      	bne.n	8005c36 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	68db      	ldr	r3, [r3, #12]
 8005c26:	021b      	lsls	r3, r3, #8
 8005c28:	697a      	ldr	r2, [r7, #20]
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	4a14      	ldr	r2, [pc, #80]	; (8005c8c <TIM_OC3_SetConfig+0xd0>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d113      	bne.n	8005c66 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	695b      	ldr	r3, [r3, #20]
 8005c52:	011b      	lsls	r3, r3, #4
 8005c54:	693a      	ldr	r2, [r7, #16]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	699b      	ldr	r3, [r3, #24]
 8005c5e:	011b      	lsls	r3, r3, #4
 8005c60:	693a      	ldr	r2, [r7, #16]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	693a      	ldr	r2, [r7, #16]
 8005c6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	68fa      	ldr	r2, [r7, #12]
 8005c70:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	685a      	ldr	r2, [r3, #4]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	697a      	ldr	r2, [r7, #20]
 8005c7e:	621a      	str	r2, [r3, #32]
}
 8005c80:	bf00      	nop
 8005c82:	371c      	adds	r7, #28
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr
 8005c8c:	40010000 	.word	0x40010000

08005c90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b087      	sub	sp, #28
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6a1b      	ldr	r3, [r3, #32]
 8005c9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6a1b      	ldr	r3, [r3, #32]
 8005caa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	69db      	ldr	r3, [r3, #28]
 8005cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	021b      	lsls	r3, r3, #8
 8005cce:	68fa      	ldr	r2, [r7, #12]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005cda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	031b      	lsls	r3, r3, #12
 8005ce2:	693a      	ldr	r2, [r7, #16]
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	4a10      	ldr	r2, [pc, #64]	; (8005d2c <TIM_OC4_SetConfig+0x9c>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d109      	bne.n	8005d04 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005cf6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	695b      	ldr	r3, [r3, #20]
 8005cfc:	019b      	lsls	r3, r3, #6
 8005cfe:	697a      	ldr	r2, [r7, #20]
 8005d00:	4313      	orrs	r3, r2
 8005d02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	697a      	ldr	r2, [r7, #20]
 8005d08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	68fa      	ldr	r2, [r7, #12]
 8005d0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	685a      	ldr	r2, [r3, #4]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	693a      	ldr	r2, [r7, #16]
 8005d1c:	621a      	str	r2, [r3, #32]
}
 8005d1e:	bf00      	nop
 8005d20:	371c      	adds	r7, #28
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr
 8005d2a:	bf00      	nop
 8005d2c:	40010000 	.word	0x40010000

08005d30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b087      	sub	sp, #28
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	60f8      	str	r0, [r7, #12]
 8005d38:	60b9      	str	r1, [r7, #8]
 8005d3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	6a1b      	ldr	r3, [r3, #32]
 8005d40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	6a1b      	ldr	r3, [r3, #32]
 8005d46:	f023 0201 	bic.w	r2, r3, #1
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	699b      	ldr	r3, [r3, #24]
 8005d52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	011b      	lsls	r3, r3, #4
 8005d60:	693a      	ldr	r2, [r7, #16]
 8005d62:	4313      	orrs	r3, r2
 8005d64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	f023 030a 	bic.w	r3, r3, #10
 8005d6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d6e:	697a      	ldr	r2, [r7, #20]
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	4313      	orrs	r3, r2
 8005d74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	693a      	ldr	r2, [r7, #16]
 8005d7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	697a      	ldr	r2, [r7, #20]
 8005d80:	621a      	str	r2, [r3, #32]
}
 8005d82:	bf00      	nop
 8005d84:	371c      	adds	r7, #28
 8005d86:	46bd      	mov	sp, r7
 8005d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8c:	4770      	bx	lr

08005d8e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d8e:	b480      	push	{r7}
 8005d90:	b087      	sub	sp, #28
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	60f8      	str	r0, [r7, #12]
 8005d96:	60b9      	str	r1, [r7, #8]
 8005d98:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	6a1b      	ldr	r3, [r3, #32]
 8005d9e:	f023 0210 	bic.w	r2, r3, #16
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	699b      	ldr	r3, [r3, #24]
 8005daa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	6a1b      	ldr	r3, [r3, #32]
 8005db0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005db8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	031b      	lsls	r3, r3, #12
 8005dbe:	697a      	ldr	r2, [r7, #20]
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005dca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	011b      	lsls	r3, r3, #4
 8005dd0:	693a      	ldr	r2, [r7, #16]
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	697a      	ldr	r2, [r7, #20]
 8005dda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	693a      	ldr	r2, [r7, #16]
 8005de0:	621a      	str	r2, [r3, #32]
}
 8005de2:	bf00      	nop
 8005de4:	371c      	adds	r7, #28
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr

08005dee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005dee:	b480      	push	{r7}
 8005df0:	b085      	sub	sp, #20
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	6078      	str	r0, [r7, #4]
 8005df6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	689b      	ldr	r3, [r3, #8]
 8005dfc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e06:	683a      	ldr	r2, [r7, #0]
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	f043 0307 	orr.w	r3, r3, #7
 8005e10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	68fa      	ldr	r2, [r7, #12]
 8005e16:	609a      	str	r2, [r3, #8]
}
 8005e18:	bf00      	nop
 8005e1a:	3714      	adds	r7, #20
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr

08005e24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b087      	sub	sp, #28
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	60f8      	str	r0, [r7, #12]
 8005e2c:	60b9      	str	r1, [r7, #8]
 8005e2e:	607a      	str	r2, [r7, #4]
 8005e30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	021a      	lsls	r2, r3, #8
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	431a      	orrs	r2, r3
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	697a      	ldr	r2, [r7, #20]
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	697a      	ldr	r2, [r7, #20]
 8005e56:	609a      	str	r2, [r3, #8]
}
 8005e58:	bf00      	nop
 8005e5a:	371c      	adds	r7, #28
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr

08005e64 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b087      	sub	sp, #28
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	60f8      	str	r0, [r7, #12]
 8005e6c:	60b9      	str	r1, [r7, #8]
 8005e6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	f003 031f 	and.w	r3, r3, #31
 8005e76:	2201      	movs	r2, #1
 8005e78:	fa02 f303 	lsl.w	r3, r2, r3
 8005e7c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	6a1a      	ldr	r2, [r3, #32]
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	43db      	mvns	r3, r3
 8005e86:	401a      	ands	r2, r3
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	6a1a      	ldr	r2, [r3, #32]
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	f003 031f 	and.w	r3, r3, #31
 8005e96:	6879      	ldr	r1, [r7, #4]
 8005e98:	fa01 f303 	lsl.w	r3, r1, r3
 8005e9c:	431a      	orrs	r2, r3
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	621a      	str	r2, [r3, #32]
}
 8005ea2:	bf00      	nop
 8005ea4:	371c      	adds	r7, #28
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eac:	4770      	bx	lr
	...

08005eb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b085      	sub	sp, #20
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d101      	bne.n	8005ec8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ec4:	2302      	movs	r3, #2
 8005ec6:	e050      	b.n	8005f6a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2202      	movs	r2, #2
 8005ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	68fa      	ldr	r2, [r7, #12]
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	68fa      	ldr	r2, [r7, #12]
 8005f00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a1c      	ldr	r2, [pc, #112]	; (8005f78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d018      	beq.n	8005f3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f14:	d013      	beq.n	8005f3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a18      	ldr	r2, [pc, #96]	; (8005f7c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d00e      	beq.n	8005f3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a16      	ldr	r2, [pc, #88]	; (8005f80 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d009      	beq.n	8005f3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a15      	ldr	r2, [pc, #84]	; (8005f84 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d004      	beq.n	8005f3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a13      	ldr	r2, [pc, #76]	; (8005f88 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d10c      	bne.n	8005f58 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	68ba      	ldr	r2, [r7, #8]
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	68ba      	ldr	r2, [r7, #8]
 8005f56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2200      	movs	r2, #0
 8005f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f68:	2300      	movs	r3, #0
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3714      	adds	r7, #20
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f74:	4770      	bx	lr
 8005f76:	bf00      	nop
 8005f78:	40010000 	.word	0x40010000
 8005f7c:	40000400 	.word	0x40000400
 8005f80:	40000800 	.word	0x40000800
 8005f84:	40000c00 	.word	0x40000c00
 8005f88:	40014000 	.word	0x40014000

08005f8c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b083      	sub	sp, #12
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f94:	bf00      	nop
 8005f96:	370c      	adds	r7, #12
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr

08005fa0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b083      	sub	sp, #12
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005fa8:	bf00      	nop
 8005faa:	370c      	adds	r7, #12
 8005fac:	46bd      	mov	sp, r7
 8005fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb2:	4770      	bx	lr

08005fb4 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8005fb4:	b084      	sub	sp, #16
 8005fb6:	b480      	push	{r7}
 8005fb8:	b085      	sub	sp, #20
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	6078      	str	r0, [r7, #4]
 8005fbe:	f107 001c 	add.w	r0, r7, #28
 8005fc2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8005fca:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8005fcc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8005fce:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8005fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8005fd2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8005fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8005fd6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8005fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8005fda:	431a      	orrs	r2, r3
             Init.ClockDiv
 8005fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8005fde:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8005fe0:	68fa      	ldr	r2, [r7, #12]
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8005fee:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005ff2:	68fa      	ldr	r2, [r7, #12]
 8005ff4:	431a      	orrs	r2, r3
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005ffa:	2300      	movs	r3, #0
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3714      	adds	r7, #20
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	b004      	add	sp, #16
 8006008:	4770      	bx	lr

0800600a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800600a:	b480      	push	{r7}
 800600c:	b083      	sub	sp, #12
 800600e:	af00      	add	r7, sp, #0
 8006010:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8006018:	4618      	mov	r0, r3
 800601a:	370c      	adds	r7, #12
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr

08006024 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8006024:	b480      	push	{r7}
 8006026:	b083      	sub	sp, #12
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
 800602c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006038:	2300      	movs	r3, #0
}
 800603a:	4618      	mov	r0, r3
 800603c:	370c      	adds	r7, #12
 800603e:	46bd      	mov	sp, r7
 8006040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006044:	4770      	bx	lr

08006046 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8006046:	b580      	push	{r7, lr}
 8006048:	b082      	sub	sp, #8
 800604a:	af00      	add	r7, sp, #0
 800604c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2203      	movs	r2, #3
 8006052:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8006054:	2002      	movs	r0, #2
 8006056:	f7fc f901 	bl	800225c <HAL_Delay>
  
  return HAL_OK;
 800605a:	2300      	movs	r3, #0
}
 800605c:	4618      	mov	r0, r3
 800605e:	3708      	adds	r7, #8
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}

08006064 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8006064:	b480      	push	{r7}
 8006066:	b083      	sub	sp, #12
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f003 0303 	and.w	r3, r3, #3
}
 8006074:	4618      	mov	r0, r3
 8006076:	370c      	adds	r7, #12
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr

08006080 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8006080:	b480      	push	{r7}
 8006082:	b085      	sub	sp, #20
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800608a:	2300      	movs	r3, #0
 800608c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	681a      	ldr	r2, [r3, #0]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800609e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80060a4:	431a      	orrs	r2, r3
                       Command->CPSM);
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80060aa:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80060ac:	68fa      	ldr	r2, [r7, #12]
 80060ae:	4313      	orrs	r3, r2
 80060b0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	68db      	ldr	r3, [r3, #12]
 80060b6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80060ba:	f023 030f 	bic.w	r3, r3, #15
 80060be:	68fa      	ldr	r2, [r7, #12]
 80060c0:	431a      	orrs	r2, r3
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80060c6:	2300      	movs	r3, #0
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	3714      	adds	r7, #20
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr

080060d4 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b083      	sub	sp, #12
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	691b      	ldr	r3, [r3, #16]
 80060e0:	b2db      	uxtb	r3, r3
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	370c      	adds	r7, #12
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr

080060ee <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80060ee:	b480      	push	{r7}
 80060f0:	b085      	sub	sp, #20
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	6078      	str	r0, [r7, #4]
 80060f6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	3314      	adds	r3, #20
 80060fc:	461a      	mov	r2, r3
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	4413      	add	r3, r2
 8006102:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
}  
 8006108:	4618      	mov	r0, r3
 800610a:	3714      	adds	r7, #20
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr

08006114 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8006114:	b480      	push	{r7}
 8006116:	b085      	sub	sp, #20
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800611e:	2300      	movs	r3, #0
 8006120:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	681a      	ldr	r2, [r3, #0]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	685a      	ldr	r2, [r3, #4]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800613a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8006140:	431a      	orrs	r2, r3
                       Data->DPSM);
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8006146:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006148:	68fa      	ldr	r2, [r7, #12]
 800614a:	4313      	orrs	r3, r2
 800614c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006152:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	431a      	orrs	r2, r3
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800615e:	2300      	movs	r3, #0

}
 8006160:	4618      	mov	r0, r3
 8006162:	3714      	adds	r7, #20
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr

0800616c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b088      	sub	sp, #32
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800617a:	2310      	movs	r3, #16
 800617c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800617e:	2340      	movs	r3, #64	; 0x40
 8006180:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006182:	2300      	movs	r3, #0
 8006184:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006186:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800618a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800618c:	f107 0308 	add.w	r3, r7, #8
 8006190:	4619      	mov	r1, r3
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f7ff ff74 	bl	8006080 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8006198:	f241 3288 	movw	r2, #5000	; 0x1388
 800619c:	2110      	movs	r1, #16
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f000 f9fe 	bl	80065a0 <SDMMC_GetCmdResp1>
 80061a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80061a6:	69fb      	ldr	r3, [r7, #28]
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3720      	adds	r7, #32
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}

080061b0 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b088      	sub	sp, #32
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
 80061b8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80061be:	2311      	movs	r3, #17
 80061c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80061c2:	2340      	movs	r3, #64	; 0x40
 80061c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80061c6:	2300      	movs	r3, #0
 80061c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80061ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80061ce:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80061d0:	f107 0308 	add.w	r3, r7, #8
 80061d4:	4619      	mov	r1, r3
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f7ff ff52 	bl	8006080 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80061dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80061e0:	2111      	movs	r1, #17
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f000 f9dc 	bl	80065a0 <SDMMC_GetCmdResp1>
 80061e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80061ea:	69fb      	ldr	r3, [r7, #28]
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3720      	adds	r7, #32
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}

080061f4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b088      	sub	sp, #32
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
 80061fc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8006202:	2312      	movs	r3, #18
 8006204:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006206:	2340      	movs	r3, #64	; 0x40
 8006208:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800620a:	2300      	movs	r3, #0
 800620c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800620e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006212:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006214:	f107 0308 	add.w	r3, r7, #8
 8006218:	4619      	mov	r1, r3
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f7ff ff30 	bl	8006080 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8006220:	f241 3288 	movw	r2, #5000	; 0x1388
 8006224:	2112      	movs	r1, #18
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f000 f9ba 	bl	80065a0 <SDMMC_GetCmdResp1>
 800622c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800622e:	69fb      	ldr	r3, [r7, #28]
}
 8006230:	4618      	mov	r0, r3
 8006232:	3720      	adds	r7, #32
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}

08006238 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b088      	sub	sp, #32
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8006246:	2318      	movs	r3, #24
 8006248:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800624a:	2340      	movs	r3, #64	; 0x40
 800624c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800624e:	2300      	movs	r3, #0
 8006250:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006252:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006256:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006258:	f107 0308 	add.w	r3, r7, #8
 800625c:	4619      	mov	r1, r3
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f7ff ff0e 	bl	8006080 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8006264:	f241 3288 	movw	r2, #5000	; 0x1388
 8006268:	2118      	movs	r1, #24
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f000 f998 	bl	80065a0 <SDMMC_GetCmdResp1>
 8006270:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006272:	69fb      	ldr	r3, [r7, #28]
}
 8006274:	4618      	mov	r0, r3
 8006276:	3720      	adds	r7, #32
 8006278:	46bd      	mov	sp, r7
 800627a:	bd80      	pop	{r7, pc}

0800627c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b088      	sub	sp, #32
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
 8006284:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800628a:	2319      	movs	r3, #25
 800628c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800628e:	2340      	movs	r3, #64	; 0x40
 8006290:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006292:	2300      	movs	r3, #0
 8006294:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006296:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800629a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800629c:	f107 0308 	add.w	r3, r7, #8
 80062a0:	4619      	mov	r1, r3
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f7ff feec 	bl	8006080 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80062a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80062ac:	2119      	movs	r1, #25
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f000 f976 	bl	80065a0 <SDMMC_GetCmdResp1>
 80062b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80062b6:	69fb      	ldr	r3, [r7, #28]
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3720      	adds	r7, #32
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}

080062c0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b088      	sub	sp, #32
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80062c8:	2300      	movs	r3, #0
 80062ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80062cc:	230c      	movs	r3, #12
 80062ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80062d0:	2340      	movs	r3, #64	; 0x40
 80062d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80062d4:	2300      	movs	r3, #0
 80062d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80062d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80062dc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80062de:	f107 0308 	add.w	r3, r7, #8
 80062e2:	4619      	mov	r1, r3
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f7ff fecb 	bl	8006080 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80062ea:	4a05      	ldr	r2, [pc, #20]	; (8006300 <SDMMC_CmdStopTransfer+0x40>)
 80062ec:	210c      	movs	r1, #12
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f000 f956 	bl	80065a0 <SDMMC_GetCmdResp1>
 80062f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80062f6:	69fb      	ldr	r3, [r7, #28]
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	3720      	adds	r7, #32
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}
 8006300:	05f5e100 	.word	0x05f5e100

08006304 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b08a      	sub	sp, #40	; 0x28
 8006308:	af00      	add	r7, sp, #0
 800630a:	60f8      	str	r0, [r7, #12]
 800630c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8006314:	2307      	movs	r3, #7
 8006316:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006318:	2340      	movs	r3, #64	; 0x40
 800631a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800631c:	2300      	movs	r3, #0
 800631e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006320:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006324:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006326:	f107 0310 	add.w	r3, r7, #16
 800632a:	4619      	mov	r1, r3
 800632c:	68f8      	ldr	r0, [r7, #12]
 800632e:	f7ff fea7 	bl	8006080 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8006332:	f241 3288 	movw	r2, #5000	; 0x1388
 8006336:	2107      	movs	r1, #7
 8006338:	68f8      	ldr	r0, [r7, #12]
 800633a:	f000 f931 	bl	80065a0 <SDMMC_GetCmdResp1>
 800633e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8006340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006342:	4618      	mov	r0, r3
 8006344:	3728      	adds	r7, #40	; 0x28
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}

0800634a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800634a:	b580      	push	{r7, lr}
 800634c:	b088      	sub	sp, #32
 800634e:	af00      	add	r7, sp, #0
 8006350:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8006352:	2300      	movs	r3, #0
 8006354:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8006356:	2300      	movs	r3, #0
 8006358:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800635a:	2300      	movs	r3, #0
 800635c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800635e:	2300      	movs	r3, #0
 8006360:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006362:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006366:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006368:	f107 0308 	add.w	r3, r7, #8
 800636c:	4619      	mov	r1, r3
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f7ff fe86 	bl	8006080 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f000 f8eb 	bl	8006550 <SDMMC_GetCmdError>
 800637a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800637c:	69fb      	ldr	r3, [r7, #28]
}
 800637e:	4618      	mov	r0, r3
 8006380:	3720      	adds	r7, #32
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}

08006386 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8006386:	b580      	push	{r7, lr}
 8006388:	b088      	sub	sp, #32
 800638a:	af00      	add	r7, sp, #0
 800638c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800638e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8006392:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8006394:	2308      	movs	r3, #8
 8006396:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006398:	2340      	movs	r3, #64	; 0x40
 800639a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800639c:	2300      	movs	r3, #0
 800639e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80063a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80063a4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80063a6:	f107 0308 	add.w	r3, r7, #8
 80063aa:	4619      	mov	r1, r3
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f7ff fe67 	bl	8006080 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f000 fad4 	bl	8006960 <SDMMC_GetCmdResp7>
 80063b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80063ba:	69fb      	ldr	r3, [r7, #28]
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3720      	adds	r7, #32
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}

080063c4 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b088      	sub	sp, #32
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
 80063cc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80063d2:	2337      	movs	r3, #55	; 0x37
 80063d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80063d6:	2340      	movs	r3, #64	; 0x40
 80063d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80063da:	2300      	movs	r3, #0
 80063dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80063de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80063e2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80063e4:	f107 0308 	add.w	r3, r7, #8
 80063e8:	4619      	mov	r1, r3
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f7ff fe48 	bl	8006080 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80063f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80063f4:	2137      	movs	r1, #55	; 0x37
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f000 f8d2 	bl	80065a0 <SDMMC_GetCmdResp1>
 80063fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80063fe:	69fb      	ldr	r3, [r7, #28]
}
 8006400:	4618      	mov	r0, r3
 8006402:	3720      	adds	r7, #32
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}

08006408 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b088      	sub	sp, #32
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
 8006410:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006418:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800641c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800641e:	2329      	movs	r3, #41	; 0x29
 8006420:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006422:	2340      	movs	r3, #64	; 0x40
 8006424:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006426:	2300      	movs	r3, #0
 8006428:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800642a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800642e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006430:	f107 0308 	add.w	r3, r7, #8
 8006434:	4619      	mov	r1, r3
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f7ff fe22 	bl	8006080 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f000 f9e1 	bl	8006804 <SDMMC_GetCmdResp3>
 8006442:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006444:	69fb      	ldr	r3, [r7, #28]
}
 8006446:	4618      	mov	r0, r3
 8006448:	3720      	adds	r7, #32
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}

0800644e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800644e:	b580      	push	{r7, lr}
 8006450:	b088      	sub	sp, #32
 8006452:	af00      	add	r7, sp, #0
 8006454:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8006456:	2300      	movs	r3, #0
 8006458:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800645a:	2302      	movs	r3, #2
 800645c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800645e:	23c0      	movs	r3, #192	; 0xc0
 8006460:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006462:	2300      	movs	r3, #0
 8006464:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006466:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800646a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800646c:	f107 0308 	add.w	r3, r7, #8
 8006470:	4619      	mov	r1, r3
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f7ff fe04 	bl	8006080 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f000 f97d 	bl	8006778 <SDMMC_GetCmdResp2>
 800647e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006480:	69fb      	ldr	r3, [r7, #28]
}
 8006482:	4618      	mov	r0, r3
 8006484:	3720      	adds	r7, #32
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}

0800648a <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800648a:	b580      	push	{r7, lr}
 800648c:	b088      	sub	sp, #32
 800648e:	af00      	add	r7, sp, #0
 8006490:	6078      	str	r0, [r7, #4]
 8006492:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8006498:	2309      	movs	r3, #9
 800649a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800649c:	23c0      	movs	r3, #192	; 0xc0
 800649e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80064a0:	2300      	movs	r3, #0
 80064a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80064a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80064a8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80064aa:	f107 0308 	add.w	r3, r7, #8
 80064ae:	4619      	mov	r1, r3
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f7ff fde5 	bl	8006080 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f000 f95e 	bl	8006778 <SDMMC_GetCmdResp2>
 80064bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80064be:	69fb      	ldr	r3, [r7, #28]
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	3720      	adds	r7, #32
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}

080064c8 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b088      	sub	sp, #32
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80064d2:	2300      	movs	r3, #0
 80064d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80064d6:	2303      	movs	r3, #3
 80064d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80064da:	2340      	movs	r3, #64	; 0x40
 80064dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80064de:	2300      	movs	r3, #0
 80064e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80064e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80064e6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80064e8:	f107 0308 	add.w	r3, r7, #8
 80064ec:	4619      	mov	r1, r3
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f7ff fdc6 	bl	8006080 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80064f4:	683a      	ldr	r2, [r7, #0]
 80064f6:	2103      	movs	r1, #3
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f000 f9bd 	bl	8006878 <SDMMC_GetCmdResp6>
 80064fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006500:	69fb      	ldr	r3, [r7, #28]
}
 8006502:	4618      	mov	r0, r3
 8006504:	3720      	adds	r7, #32
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}

0800650a <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800650a:	b580      	push	{r7, lr}
 800650c:	b088      	sub	sp, #32
 800650e:	af00      	add	r7, sp, #0
 8006510:	6078      	str	r0, [r7, #4]
 8006512:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8006518:	230d      	movs	r3, #13
 800651a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800651c:	2340      	movs	r3, #64	; 0x40
 800651e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006520:	2300      	movs	r3, #0
 8006522:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006524:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006528:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800652a:	f107 0308 	add.w	r3, r7, #8
 800652e:	4619      	mov	r1, r3
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f7ff fda5 	bl	8006080 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8006536:	f241 3288 	movw	r2, #5000	; 0x1388
 800653a:	210d      	movs	r1, #13
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f000 f82f 	bl	80065a0 <SDMMC_GetCmdResp1>
 8006542:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006544:	69fb      	ldr	r3, [r7, #28]
}
 8006546:	4618      	mov	r0, r3
 8006548:	3720      	adds	r7, #32
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
	...

08006550 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8006550:	b490      	push	{r4, r7}
 8006552:	b082      	sub	sp, #8
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006558:	4b0f      	ldr	r3, [pc, #60]	; (8006598 <SDMMC_GetCmdError+0x48>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a0f      	ldr	r2, [pc, #60]	; (800659c <SDMMC_GetCmdError+0x4c>)
 800655e:	fba2 2303 	umull	r2, r3, r2, r3
 8006562:	0a5b      	lsrs	r3, r3, #9
 8006564:	f241 3288 	movw	r2, #5000	; 0x1388
 8006568:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800656c:	4623      	mov	r3, r4
 800656e:	1e5c      	subs	r4, r3, #1
 8006570:	2b00      	cmp	r3, #0
 8006572:	d102      	bne.n	800657a <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006574:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006578:	e009      	b.n	800658e <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800657e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006582:	2b00      	cmp	r3, #0
 8006584:	d0f2      	beq.n	800656c <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	22c5      	movs	r2, #197	; 0xc5
 800658a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800658c:	2300      	movs	r3, #0
}
 800658e:	4618      	mov	r0, r3
 8006590:	3708      	adds	r7, #8
 8006592:	46bd      	mov	sp, r7
 8006594:	bc90      	pop	{r4, r7}
 8006596:	4770      	bx	lr
 8006598:	20000008 	.word	0x20000008
 800659c:	10624dd3 	.word	0x10624dd3

080065a0 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80065a0:	b590      	push	{r4, r7, lr}
 80065a2:	b087      	sub	sp, #28
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	60f8      	str	r0, [r7, #12]
 80065a8:	460b      	mov	r3, r1
 80065aa:	607a      	str	r2, [r7, #4]
 80065ac:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80065ae:	4b6f      	ldr	r3, [pc, #444]	; (800676c <SDMMC_GetCmdResp1+0x1cc>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a6f      	ldr	r2, [pc, #444]	; (8006770 <SDMMC_GetCmdResp1+0x1d0>)
 80065b4:	fba2 2303 	umull	r2, r3, r2, r3
 80065b8:	0a5b      	lsrs	r3, r3, #9
 80065ba:	687a      	ldr	r2, [r7, #4]
 80065bc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80065c0:	4623      	mov	r3, r4
 80065c2:	1e5c      	subs	r4, r3, #1
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d102      	bne.n	80065ce <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80065c8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80065cc:	e0c9      	b.n	8006762 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065d2:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d0f0      	beq.n	80065c0 <SDMMC_GetCmdResp1+0x20>
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d1eb      	bne.n	80065c0 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065ec:	f003 0304 	and.w	r3, r3, #4
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d004      	beq.n	80065fe <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2204      	movs	r2, #4
 80065f8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80065fa:	2304      	movs	r3, #4
 80065fc:	e0b1      	b.n	8006762 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006602:	f003 0301 	and.w	r3, r3, #1
 8006606:	2b00      	cmp	r3, #0
 8006608:	d004      	beq.n	8006614 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2201      	movs	r2, #1
 800660e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006610:	2301      	movs	r3, #1
 8006612:	e0a6      	b.n	8006762 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	22c5      	movs	r2, #197	; 0xc5
 8006618:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800661a:	68f8      	ldr	r0, [r7, #12]
 800661c:	f7ff fd5a 	bl	80060d4 <SDIO_GetCommandResponse>
 8006620:	4603      	mov	r3, r0
 8006622:	461a      	mov	r2, r3
 8006624:	7afb      	ldrb	r3, [r7, #11]
 8006626:	4293      	cmp	r3, r2
 8006628:	d001      	beq.n	800662e <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800662a:	2301      	movs	r3, #1
 800662c:	e099      	b.n	8006762 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800662e:	2100      	movs	r1, #0
 8006630:	68f8      	ldr	r0, [r7, #12]
 8006632:	f7ff fd5c 	bl	80060ee <SDIO_GetResponse>
 8006636:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8006638:	693a      	ldr	r2, [r7, #16]
 800663a:	4b4e      	ldr	r3, [pc, #312]	; (8006774 <SDMMC_GetCmdResp1+0x1d4>)
 800663c:	4013      	ands	r3, r2
 800663e:	2b00      	cmp	r3, #0
 8006640:	d101      	bne.n	8006646 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8006642:	2300      	movs	r3, #0
 8006644:	e08d      	b.n	8006762 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	2b00      	cmp	r3, #0
 800664a:	da02      	bge.n	8006652 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800664c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006650:	e087      	b.n	8006762 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006658:	2b00      	cmp	r3, #0
 800665a:	d001      	beq.n	8006660 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800665c:	2340      	movs	r3, #64	; 0x40
 800665e:	e080      	b.n	8006762 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006666:	2b00      	cmp	r3, #0
 8006668:	d001      	beq.n	800666e <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800666a:	2380      	movs	r3, #128	; 0x80
 800666c:	e079      	b.n	8006762 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006674:	2b00      	cmp	r3, #0
 8006676:	d002      	beq.n	800667e <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8006678:	f44f 7380 	mov.w	r3, #256	; 0x100
 800667c:	e071      	b.n	8006762 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006684:	2b00      	cmp	r3, #0
 8006686:	d002      	beq.n	800668e <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8006688:	f44f 7300 	mov.w	r3, #512	; 0x200
 800668c:	e069      	b.n	8006762 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006694:	2b00      	cmp	r3, #0
 8006696:	d002      	beq.n	800669e <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8006698:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800669c:	e061      	b.n	8006762 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d002      	beq.n	80066ae <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80066a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80066ac:	e059      	b.n	8006762 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80066ae:	693b      	ldr	r3, [r7, #16]
 80066b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d002      	beq.n	80066be <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80066b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80066bc:	e051      	b.n	8006762 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d002      	beq.n	80066ce <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80066c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80066cc:	e049      	b.n	8006762 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d002      	beq.n	80066de <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80066d8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80066dc:	e041      	b.n	8006762 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d002      	beq.n	80066ee <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 80066e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066ec:	e039      	b.n	8006762 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d002      	beq.n	80066fe <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80066f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80066fc:	e031      	b.n	8006762 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006704:	2b00      	cmp	r3, #0
 8006706:	d002      	beq.n	800670e <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8006708:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800670c:	e029      	b.n	8006762 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006714:	2b00      	cmp	r3, #0
 8006716:	d002      	beq.n	800671e <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8006718:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800671c:	e021      	b.n	8006762 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006724:	2b00      	cmp	r3, #0
 8006726:	d002      	beq.n	800672e <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8006728:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800672c:	e019      	b.n	8006762 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006734:	2b00      	cmp	r3, #0
 8006736:	d002      	beq.n	800673e <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8006738:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800673c:	e011      	b.n	8006762 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006744:	2b00      	cmp	r3, #0
 8006746:	d002      	beq.n	800674e <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8006748:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800674c:	e009      	b.n	8006762 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	f003 0308 	and.w	r3, r3, #8
 8006754:	2b00      	cmp	r3, #0
 8006756:	d002      	beq.n	800675e <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8006758:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800675c:	e001      	b.n	8006762 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800675e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8006762:	4618      	mov	r0, r3
 8006764:	371c      	adds	r7, #28
 8006766:	46bd      	mov	sp, r7
 8006768:	bd90      	pop	{r4, r7, pc}
 800676a:	bf00      	nop
 800676c:	20000008 	.word	0x20000008
 8006770:	10624dd3 	.word	0x10624dd3
 8006774:	fdffe008 	.word	0xfdffe008

08006778 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8006778:	b490      	push	{r4, r7}
 800677a:	b084      	sub	sp, #16
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006780:	4b1e      	ldr	r3, [pc, #120]	; (80067fc <SDMMC_GetCmdResp2+0x84>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a1e      	ldr	r2, [pc, #120]	; (8006800 <SDMMC_GetCmdResp2+0x88>)
 8006786:	fba2 2303 	umull	r2, r3, r2, r3
 800678a:	0a5b      	lsrs	r3, r3, #9
 800678c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006790:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006794:	4623      	mov	r3, r4
 8006796:	1e5c      	subs	r4, r3, #1
 8006798:	2b00      	cmp	r3, #0
 800679a:	d102      	bne.n	80067a2 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800679c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80067a0:	e026      	b.n	80067f0 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067a6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d0f0      	beq.n	8006794 <SDMMC_GetCmdResp2+0x1c>
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d1eb      	bne.n	8006794 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067c0:	f003 0304 	and.w	r3, r3, #4
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d004      	beq.n	80067d2 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2204      	movs	r2, #4
 80067cc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80067ce:	2304      	movs	r3, #4
 80067d0:	e00e      	b.n	80067f0 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067d6:	f003 0301 	and.w	r3, r3, #1
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d004      	beq.n	80067e8 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2201      	movs	r2, #1
 80067e2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80067e4:	2301      	movs	r3, #1
 80067e6:	e003      	b.n	80067f0 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	22c5      	movs	r2, #197	; 0xc5
 80067ec:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80067ee:	2300      	movs	r3, #0
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	3710      	adds	r7, #16
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bc90      	pop	{r4, r7}
 80067f8:	4770      	bx	lr
 80067fa:	bf00      	nop
 80067fc:	20000008 	.word	0x20000008
 8006800:	10624dd3 	.word	0x10624dd3

08006804 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8006804:	b490      	push	{r4, r7}
 8006806:	b084      	sub	sp, #16
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800680c:	4b18      	ldr	r3, [pc, #96]	; (8006870 <SDMMC_GetCmdResp3+0x6c>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a18      	ldr	r2, [pc, #96]	; (8006874 <SDMMC_GetCmdResp3+0x70>)
 8006812:	fba2 2303 	umull	r2, r3, r2, r3
 8006816:	0a5b      	lsrs	r3, r3, #9
 8006818:	f241 3288 	movw	r2, #5000	; 0x1388
 800681c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006820:	4623      	mov	r3, r4
 8006822:	1e5c      	subs	r4, r3, #1
 8006824:	2b00      	cmp	r3, #0
 8006826:	d102      	bne.n	800682e <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006828:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800682c:	e01b      	b.n	8006866 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006832:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800683a:	2b00      	cmp	r3, #0
 800683c:	d0f0      	beq.n	8006820 <SDMMC_GetCmdResp3+0x1c>
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006844:	2b00      	cmp	r3, #0
 8006846:	d1eb      	bne.n	8006820 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800684c:	f003 0304 	and.w	r3, r3, #4
 8006850:	2b00      	cmp	r3, #0
 8006852:	d004      	beq.n	800685e <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2204      	movs	r2, #4
 8006858:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800685a:	2304      	movs	r3, #4
 800685c:	e003      	b.n	8006866 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	22c5      	movs	r2, #197	; 0xc5
 8006862:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8006864:	2300      	movs	r3, #0
}
 8006866:	4618      	mov	r0, r3
 8006868:	3710      	adds	r7, #16
 800686a:	46bd      	mov	sp, r7
 800686c:	bc90      	pop	{r4, r7}
 800686e:	4770      	bx	lr
 8006870:	20000008 	.word	0x20000008
 8006874:	10624dd3 	.word	0x10624dd3

08006878 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8006878:	b590      	push	{r4, r7, lr}
 800687a:	b087      	sub	sp, #28
 800687c:	af00      	add	r7, sp, #0
 800687e:	60f8      	str	r0, [r7, #12]
 8006880:	460b      	mov	r3, r1
 8006882:	607a      	str	r2, [r7, #4]
 8006884:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006886:	4b34      	ldr	r3, [pc, #208]	; (8006958 <SDMMC_GetCmdResp6+0xe0>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a34      	ldr	r2, [pc, #208]	; (800695c <SDMMC_GetCmdResp6+0xe4>)
 800688c:	fba2 2303 	umull	r2, r3, r2, r3
 8006890:	0a5b      	lsrs	r3, r3, #9
 8006892:	f241 3288 	movw	r2, #5000	; 0x1388
 8006896:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800689a:	4623      	mov	r3, r4
 800689c:	1e5c      	subs	r4, r3, #1
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d102      	bne.n	80068a8 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 80068a2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80068a6:	e052      	b.n	800694e <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068ac:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d0f0      	beq.n	800689a <SDMMC_GetCmdResp6+0x22>
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d1eb      	bne.n	800689a <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068c6:	f003 0304 	and.w	r3, r3, #4
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d004      	beq.n	80068d8 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2204      	movs	r2, #4
 80068d2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80068d4:	2304      	movs	r3, #4
 80068d6:	e03a      	b.n	800694e <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068dc:	f003 0301 	and.w	r3, r3, #1
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d004      	beq.n	80068ee <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2201      	movs	r2, #1
 80068e8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80068ea:	2301      	movs	r3, #1
 80068ec:	e02f      	b.n	800694e <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80068ee:	68f8      	ldr	r0, [r7, #12]
 80068f0:	f7ff fbf0 	bl	80060d4 <SDIO_GetCommandResponse>
 80068f4:	4603      	mov	r3, r0
 80068f6:	461a      	mov	r2, r3
 80068f8:	7afb      	ldrb	r3, [r7, #11]
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d001      	beq.n	8006902 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80068fe:	2301      	movs	r3, #1
 8006900:	e025      	b.n	800694e <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	22c5      	movs	r2, #197	; 0xc5
 8006906:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8006908:	2100      	movs	r1, #0
 800690a:	68f8      	ldr	r0, [r7, #12]
 800690c:	f7ff fbef 	bl	80060ee <SDIO_GetResponse>
 8006910:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8006918:	2b00      	cmp	r3, #0
 800691a:	d106      	bne.n	800692a <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	0c1b      	lsrs	r3, r3, #16
 8006920:	b29a      	uxth	r2, r3
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8006926:	2300      	movs	r3, #0
 8006928:	e011      	b.n	800694e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006930:	2b00      	cmp	r3, #0
 8006932:	d002      	beq.n	800693a <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006934:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006938:	e009      	b.n	800694e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006940:	2b00      	cmp	r3, #0
 8006942:	d002      	beq.n	800694a <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006944:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006948:	e001      	b.n	800694e <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800694a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800694e:	4618      	mov	r0, r3
 8006950:	371c      	adds	r7, #28
 8006952:	46bd      	mov	sp, r7
 8006954:	bd90      	pop	{r4, r7, pc}
 8006956:	bf00      	nop
 8006958:	20000008 	.word	0x20000008
 800695c:	10624dd3 	.word	0x10624dd3

08006960 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8006960:	b490      	push	{r4, r7}
 8006962:	b084      	sub	sp, #16
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006968:	4b21      	ldr	r3, [pc, #132]	; (80069f0 <SDMMC_GetCmdResp7+0x90>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a21      	ldr	r2, [pc, #132]	; (80069f4 <SDMMC_GetCmdResp7+0x94>)
 800696e:	fba2 2303 	umull	r2, r3, r2, r3
 8006972:	0a5b      	lsrs	r3, r3, #9
 8006974:	f241 3288 	movw	r2, #5000	; 0x1388
 8006978:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800697c:	4623      	mov	r3, r4
 800697e:	1e5c      	subs	r4, r3, #1
 8006980:	2b00      	cmp	r3, #0
 8006982:	d102      	bne.n	800698a <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006984:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006988:	e02c      	b.n	80069e4 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800698e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006996:	2b00      	cmp	r3, #0
 8006998:	d0f0      	beq.n	800697c <SDMMC_GetCmdResp7+0x1c>
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d1eb      	bne.n	800697c <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069a8:	f003 0304 	and.w	r3, r3, #4
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d004      	beq.n	80069ba <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2204      	movs	r2, #4
 80069b4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80069b6:	2304      	movs	r3, #4
 80069b8:	e014      	b.n	80069e4 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069be:	f003 0301 	and.w	r3, r3, #1
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d004      	beq.n	80069d0 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2201      	movs	r2, #1
 80069ca:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80069cc:	2301      	movs	r3, #1
 80069ce:	e009      	b.n	80069e4 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d002      	beq.n	80069e2 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2240      	movs	r2, #64	; 0x40
 80069e0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80069e2:	2300      	movs	r3, #0
  
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	3710      	adds	r7, #16
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bc90      	pop	{r4, r7}
 80069ec:	4770      	bx	lr
 80069ee:	bf00      	nop
 80069f0:	20000008 	.word	0x20000008
 80069f4:	10624dd3 	.word	0x10624dd3

080069f8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80069fc:	4904      	ldr	r1, [pc, #16]	; (8006a10 <MX_FATFS_Init+0x18>)
 80069fe:	4805      	ldr	r0, [pc, #20]	; (8006a14 <MX_FATFS_Init+0x1c>)
 8006a00:	f002 fcda 	bl	80093b8 <FATFS_LinkDriver>
 8006a04:	4603      	mov	r3, r0
 8006a06:	461a      	mov	r2, r3
 8006a08:	4b03      	ldr	r3, [pc, #12]	; (8006a18 <MX_FATFS_Init+0x20>)
 8006a0a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8006a0c:	bf00      	nop
 8006a0e:	bd80      	pop	{r7, pc}
 8006a10:	20001c34 	.word	0x20001c34
 8006a14:	0800a7a4 	.word	0x0800a7a4
 8006a18:	20001c30 	.word	0x20001c30

08006a1c <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006a20:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	46bd      	mov	sp, r7
 8006a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2a:	4770      	bx	lr

08006a2c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b082      	sub	sp, #8
 8006a30:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8006a32:	2300      	movs	r3, #0
 8006a34:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8006a36:	f000 f888 	bl	8006b4a <BSP_SD_IsDetected>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	2b01      	cmp	r3, #1
 8006a3e:	d001      	beq.n	8006a44 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8006a40:	2301      	movs	r3, #1
 8006a42:	e005      	b.n	8006a50 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8006a44:	4804      	ldr	r0, [pc, #16]	; (8006a58 <BSP_SD_Init+0x2c>)
 8006a46:	f7fd fb2b 	bl	80040a0 <HAL_SD_Init>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8006a4e:	79fb      	ldrb	r3, [r7, #7]
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	3708      	adds	r7, #8
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}
 8006a58:	20001b54 	.word	0x20001b54

08006a5c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b086      	sub	sp, #24
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	60f8      	str	r0, [r7, #12]
 8006a64:	60b9      	str	r1, [r7, #8]
 8006a66:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8006a68:	2300      	movs	r3, #0
 8006a6a:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	68ba      	ldr	r2, [r7, #8]
 8006a70:	68f9      	ldr	r1, [r7, #12]
 8006a72:	4806      	ldr	r0, [pc, #24]	; (8006a8c <BSP_SD_ReadBlocks_DMA+0x30>)
 8006a74:	f7fd fba4 	bl	80041c0 <HAL_SD_ReadBlocks_DMA>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d001      	beq.n	8006a82 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 8006a82:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	3718      	adds	r7, #24
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}
 8006a8c:	20001b54 	.word	0x20001b54

08006a90 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b086      	sub	sp, #24
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	60f8      	str	r0, [r7, #12]
 8006a98:	60b9      	str	r1, [r7, #8]
 8006a9a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	68ba      	ldr	r2, [r7, #8]
 8006aa4:	68f9      	ldr	r1, [r7, #12]
 8006aa6:	4806      	ldr	r0, [pc, #24]	; (8006ac0 <BSP_SD_WriteBlocks_DMA+0x30>)
 8006aa8:	f7fd fc74 	bl	8004394 <HAL_SD_WriteBlocks_DMA>
 8006aac:	4603      	mov	r3, r0
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d001      	beq.n	8006ab6 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 8006ab6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3718      	adds	r7, #24
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}
 8006ac0:	20001b54 	.word	0x20001b54

08006ac4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8006ac8:	4805      	ldr	r0, [pc, #20]	; (8006ae0 <BSP_SD_GetCardState+0x1c>)
 8006aca:	f7fe f8b3 	bl	8004c34 <HAL_SD_GetCardState>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	2b04      	cmp	r3, #4
 8006ad2:	bf14      	ite	ne
 8006ad4:	2301      	movne	r3, #1
 8006ad6:	2300      	moveq	r3, #0
 8006ad8:	b2db      	uxtb	r3, r3
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	bd80      	pop	{r7, pc}
 8006ade:	bf00      	nop
 8006ae0:	20001b54 	.word	0x20001b54

08006ae4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b082      	sub	sp, #8
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8006aec:	6879      	ldr	r1, [r7, #4]
 8006aee:	4803      	ldr	r0, [pc, #12]	; (8006afc <BSP_SD_GetCardInfo+0x18>)
 8006af0:	f7fe f874 	bl	8004bdc <HAL_SD_GetCardInfo>
}
 8006af4:	bf00      	nop
 8006af6:	3708      	adds	r7, #8
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}
 8006afc:	20001b54 	.word	0x20001b54

08006b00 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b082      	sub	sp, #8
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8006b08:	f000 f818 	bl	8006b3c <BSP_SD_AbortCallback>
}
 8006b0c:	bf00      	nop
 8006b0e:	3708      	adds	r7, #8
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}

08006b14 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b082      	sub	sp, #8
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8006b1c:	f000 f9a8 	bl	8006e70 <BSP_SD_WriteCpltCallback>
}
 8006b20:	bf00      	nop
 8006b22:	3708      	adds	r7, #8
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}

08006b28 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b082      	sub	sp, #8
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8006b30:	f000 f9aa 	bl	8006e88 <BSP_SD_ReadCpltCallback>
}
 8006b34:	bf00      	nop
 8006b36:	3708      	adds	r7, #8
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bd80      	pop	{r7, pc}

08006b3c <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	af00      	add	r7, sp, #0

}
 8006b40:	bf00      	nop
 8006b42:	46bd      	mov	sp, r7
 8006b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b48:	4770      	bx	lr

08006b4a <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8006b4a:	b580      	push	{r7, lr}
 8006b4c:	b082      	sub	sp, #8
 8006b4e:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8006b50:	2301      	movs	r3, #1
 8006b52:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 8006b54:	f000 f80c 	bl	8006b70 <BSP_PlatformIsDetected>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d101      	bne.n	8006b62 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8006b62:	79fb      	ldrb	r3, [r7, #7]
 8006b64:	b2db      	uxtb	r3, r3
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	3708      	adds	r7, #8
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}
	...

08006b70 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b082      	sub	sp, #8
 8006b74:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8006b76:	2301      	movs	r3, #1
 8006b78:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8006b7a:	2140      	movs	r1, #64	; 0x40
 8006b7c:	4806      	ldr	r0, [pc, #24]	; (8006b98 <BSP_PlatformIsDetected+0x28>)
 8006b7e:	f7fc fe55 	bl	800382c <HAL_GPIO_ReadPin>
 8006b82:	4603      	mov	r3, r0
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d001      	beq.n	8006b8c <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 8006b8c:	79fb      	ldrb	r3, [r7, #7]
}  
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3708      	adds	r7, #8
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}
 8006b96:	bf00      	nop
 8006b98:	40020400 	.word	0x40020400

08006b9c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b084      	sub	sp, #16
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8006ba4:	f7fb fb4e 	bl	8002244 <HAL_GetTick>
 8006ba8:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8006baa:	e006      	b.n	8006bba <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006bac:	f7ff ff8a 	bl	8006ac4 <BSP_SD_GetCardState>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d101      	bne.n	8006bba <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	e009      	b.n	8006bce <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8006bba:	f7fb fb43 	bl	8002244 <HAL_GetTick>
 8006bbe:	4602      	mov	r2, r0
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	1ad3      	subs	r3, r2, r3
 8006bc4:	687a      	ldr	r2, [r7, #4]
 8006bc6:	429a      	cmp	r2, r3
 8006bc8:	d8f0      	bhi.n	8006bac <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8006bca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3710      	adds	r7, #16
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}
	...

08006bd8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b082      	sub	sp, #8
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	4603      	mov	r3, r0
 8006be0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8006be2:	4b0b      	ldr	r3, [pc, #44]	; (8006c10 <SD_CheckStatus+0x38>)
 8006be4:	2201      	movs	r2, #1
 8006be6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8006be8:	f7ff ff6c 	bl	8006ac4 <BSP_SD_GetCardState>
 8006bec:	4603      	mov	r3, r0
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d107      	bne.n	8006c02 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8006bf2:	4b07      	ldr	r3, [pc, #28]	; (8006c10 <SD_CheckStatus+0x38>)
 8006bf4:	781b      	ldrb	r3, [r3, #0]
 8006bf6:	b2db      	uxtb	r3, r3
 8006bf8:	f023 0301 	bic.w	r3, r3, #1
 8006bfc:	b2da      	uxtb	r2, r3
 8006bfe:	4b04      	ldr	r3, [pc, #16]	; (8006c10 <SD_CheckStatus+0x38>)
 8006c00:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8006c02:	4b03      	ldr	r3, [pc, #12]	; (8006c10 <SD_CheckStatus+0x38>)
 8006c04:	781b      	ldrb	r3, [r3, #0]
 8006c06:	b2db      	uxtb	r3, r3
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3708      	adds	r7, #8
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}
 8006c10:	20000011 	.word	0x20000011

08006c14 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b082      	sub	sp, #8
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8006c1e:	f7ff ff05 	bl	8006a2c <BSP_SD_Init>
 8006c22:	4603      	mov	r3, r0
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d107      	bne.n	8006c38 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8006c28:	79fb      	ldrb	r3, [r7, #7]
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	f7ff ffd4 	bl	8006bd8 <SD_CheckStatus>
 8006c30:	4603      	mov	r3, r0
 8006c32:	461a      	mov	r2, r3
 8006c34:	4b04      	ldr	r3, [pc, #16]	; (8006c48 <SD_initialize+0x34>)
 8006c36:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8006c38:	4b03      	ldr	r3, [pc, #12]	; (8006c48 <SD_initialize+0x34>)
 8006c3a:	781b      	ldrb	r3, [r3, #0]
 8006c3c:	b2db      	uxtb	r3, r3
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3708      	adds	r7, #8
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}
 8006c46:	bf00      	nop
 8006c48:	20000011 	.word	0x20000011

08006c4c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b082      	sub	sp, #8
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	4603      	mov	r3, r0
 8006c54:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8006c56:	79fb      	ldrb	r3, [r7, #7]
 8006c58:	4618      	mov	r0, r3
 8006c5a:	f7ff ffbd 	bl	8006bd8 <SD_CheckStatus>
 8006c5e:	4603      	mov	r3, r0
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	3708      	adds	r7, #8
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}

08006c68 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b086      	sub	sp, #24
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	60b9      	str	r1, [r7, #8]
 8006c70:	607a      	str	r2, [r7, #4]
 8006c72:	603b      	str	r3, [r7, #0]
 8006c74:	4603      	mov	r3, r0
 8006c76:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006c78:	2301      	movs	r3, #1
 8006c7a:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8006c7c:	f247 5030 	movw	r0, #30000	; 0x7530
 8006c80:	f7ff ff8c 	bl	8006b9c <SD_CheckStatusWithTimeout>
 8006c84:	4603      	mov	r3, r0
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	da01      	bge.n	8006c8e <SD_read+0x26>
  {
    return res;
 8006c8a:	7dfb      	ldrb	r3, [r7, #23]
 8006c8c:	e03b      	b.n	8006d06 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8006c8e:	683a      	ldr	r2, [r7, #0]
 8006c90:	6879      	ldr	r1, [r7, #4]
 8006c92:	68b8      	ldr	r0, [r7, #8]
 8006c94:	f7ff fee2 	bl	8006a5c <BSP_SD_ReadBlocks_DMA>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d132      	bne.n	8006d04 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8006c9e:	4b1c      	ldr	r3, [pc, #112]	; (8006d10 <SD_read+0xa8>)
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8006ca4:	f7fb face 	bl	8002244 <HAL_GetTick>
 8006ca8:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8006caa:	bf00      	nop
 8006cac:	4b18      	ldr	r3, [pc, #96]	; (8006d10 <SD_read+0xa8>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d108      	bne.n	8006cc6 <SD_read+0x5e>
 8006cb4:	f7fb fac6 	bl	8002244 <HAL_GetTick>
 8006cb8:	4602      	mov	r2, r0
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	1ad3      	subs	r3, r2, r3
 8006cbe:	f247 522f 	movw	r2, #29999	; 0x752f
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d9f2      	bls.n	8006cac <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 8006cc6:	4b12      	ldr	r3, [pc, #72]	; (8006d10 <SD_read+0xa8>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d102      	bne.n	8006cd4 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	75fb      	strb	r3, [r7, #23]
 8006cd2:	e017      	b.n	8006d04 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8006cd4:	4b0e      	ldr	r3, [pc, #56]	; (8006d10 <SD_read+0xa8>)
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8006cda:	f7fb fab3 	bl	8002244 <HAL_GetTick>
 8006cde:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8006ce0:	e007      	b.n	8006cf2 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006ce2:	f7ff feef 	bl	8006ac4 <BSP_SD_GetCardState>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d102      	bne.n	8006cf2 <SD_read+0x8a>
          {
            res = RES_OK;
 8006cec:	2300      	movs	r3, #0
 8006cee:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8006cf0:	e008      	b.n	8006d04 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8006cf2:	f7fb faa7 	bl	8002244 <HAL_GetTick>
 8006cf6:	4602      	mov	r2, r0
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	1ad3      	subs	r3, r2, r3
 8006cfc:	f247 522f 	movw	r2, #29999	; 0x752f
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d9ee      	bls.n	8006ce2 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8006d04:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3718      	adds	r7, #24
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}
 8006d0e:	bf00      	nop
 8006d10:	200019a4 	.word	0x200019a4

08006d14 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b086      	sub	sp, #24
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	60b9      	str	r1, [r7, #8]
 8006d1c:	607a      	str	r2, [r7, #4]
 8006d1e:	603b      	str	r3, [r7, #0]
 8006d20:	4603      	mov	r3, r0
 8006d22:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006d24:	2301      	movs	r3, #1
 8006d26:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8006d28:	4b24      	ldr	r3, [pc, #144]	; (8006dbc <SD_write+0xa8>)
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)   
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8006d2e:	f247 5030 	movw	r0, #30000	; 0x7530
 8006d32:	f7ff ff33 	bl	8006b9c <SD_CheckStatusWithTimeout>
 8006d36:	4603      	mov	r3, r0
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	da01      	bge.n	8006d40 <SD_write+0x2c>
  {
    return res;
 8006d3c:	7dfb      	ldrb	r3, [r7, #23]
 8006d3e:	e038      	b.n	8006db2 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8006d40:	683a      	ldr	r2, [r7, #0]
 8006d42:	6879      	ldr	r1, [r7, #4]
 8006d44:	68b8      	ldr	r0, [r7, #8]
 8006d46:	f7ff fea3 	bl	8006a90 <BSP_SD_WriteBlocks_DMA>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d12f      	bne.n	8006db0 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8006d50:	f7fb fa78 	bl	8002244 <HAL_GetTick>
 8006d54:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8006d56:	bf00      	nop
 8006d58:	4b18      	ldr	r3, [pc, #96]	; (8006dbc <SD_write+0xa8>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d108      	bne.n	8006d72 <SD_write+0x5e>
 8006d60:	f7fb fa70 	bl	8002244 <HAL_GetTick>
 8006d64:	4602      	mov	r2, r0
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	1ad3      	subs	r3, r2, r3
 8006d6a:	f247 522f 	movw	r2, #29999	; 0x752f
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d9f2      	bls.n	8006d58 <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 8006d72:	4b12      	ldr	r3, [pc, #72]	; (8006dbc <SD_write+0xa8>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d102      	bne.n	8006d80 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	75fb      	strb	r3, [r7, #23]
 8006d7e:	e017      	b.n	8006db0 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8006d80:	4b0e      	ldr	r3, [pc, #56]	; (8006dbc <SD_write+0xa8>)
 8006d82:	2200      	movs	r2, #0
 8006d84:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8006d86:	f7fb fa5d 	bl	8002244 <HAL_GetTick>
 8006d8a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8006d8c:	e007      	b.n	8006d9e <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006d8e:	f7ff fe99 	bl	8006ac4 <BSP_SD_GetCardState>
 8006d92:	4603      	mov	r3, r0
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d102      	bne.n	8006d9e <SD_write+0x8a>
          {
            res = RES_OK;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	75fb      	strb	r3, [r7, #23]
            break;
 8006d9c:	e008      	b.n	8006db0 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8006d9e:	f7fb fa51 	bl	8002244 <HAL_GetTick>
 8006da2:	4602      	mov	r2, r0
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	1ad3      	subs	r3, r2, r3
 8006da8:	f247 522f 	movw	r2, #29999	; 0x752f
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d9ee      	bls.n	8006d8e <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8006db0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	3718      	adds	r7, #24
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}
 8006dba:	bf00      	nop
 8006dbc:	200019a0 	.word	0x200019a0

08006dc0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b08c      	sub	sp, #48	; 0x30
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	603a      	str	r2, [r7, #0]
 8006dca:	71fb      	strb	r3, [r7, #7]
 8006dcc:	460b      	mov	r3, r1
 8006dce:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006dd6:	4b25      	ldr	r3, [pc, #148]	; (8006e6c <SD_ioctl+0xac>)
 8006dd8:	781b      	ldrb	r3, [r3, #0]
 8006dda:	b2db      	uxtb	r3, r3
 8006ddc:	f003 0301 	and.w	r3, r3, #1
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d001      	beq.n	8006de8 <SD_ioctl+0x28>
 8006de4:	2303      	movs	r3, #3
 8006de6:	e03c      	b.n	8006e62 <SD_ioctl+0xa2>

  switch (cmd)
 8006de8:	79bb      	ldrb	r3, [r7, #6]
 8006dea:	2b03      	cmp	r3, #3
 8006dec:	d834      	bhi.n	8006e58 <SD_ioctl+0x98>
 8006dee:	a201      	add	r2, pc, #4	; (adr r2, 8006df4 <SD_ioctl+0x34>)
 8006df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006df4:	08006e05 	.word	0x08006e05
 8006df8:	08006e0d 	.word	0x08006e0d
 8006dfc:	08006e25 	.word	0x08006e25
 8006e00:	08006e3f 	.word	0x08006e3f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8006e04:	2300      	movs	r3, #0
 8006e06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006e0a:	e028      	b.n	8006e5e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8006e0c:	f107 030c 	add.w	r3, r7, #12
 8006e10:	4618      	mov	r0, r3
 8006e12:	f7ff fe67 	bl	8006ae4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8006e16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006e22:	e01c      	b.n	8006e5e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006e24:	f107 030c 	add.w	r3, r7, #12
 8006e28:	4618      	mov	r0, r3
 8006e2a:	f7ff fe5b 	bl	8006ae4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8006e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e30:	b29a      	uxth	r2, r3
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8006e36:	2300      	movs	r3, #0
 8006e38:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006e3c:	e00f      	b.n	8006e5e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006e3e:	f107 030c 	add.w	r3, r7, #12
 8006e42:	4618      	mov	r0, r3
 8006e44:	f7ff fe4e 	bl	8006ae4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8006e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e4a:	0a5a      	lsrs	r2, r3, #9
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006e50:	2300      	movs	r3, #0
 8006e52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006e56:	e002      	b.n	8006e5e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8006e58:	2304      	movs	r3, #4
 8006e5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8006e5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3730      	adds	r7, #48	; 0x30
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}
 8006e6a:	bf00      	nop
 8006e6c:	20000011 	.word	0x20000011

08006e70 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8006e70:	b480      	push	{r7}
 8006e72:	af00      	add	r7, sp, #0
             
  WriteStatus = 1;
 8006e74:	4b03      	ldr	r3, [pc, #12]	; (8006e84 <BSP_SD_WriteCpltCallback+0x14>)
 8006e76:	2201      	movs	r2, #1
 8006e78:	601a      	str	r2, [r3, #0]
}
 8006e7a:	bf00      	nop
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e82:	4770      	bx	lr
 8006e84:	200019a0 	.word	0x200019a0

08006e88 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8006e8c:	4b03      	ldr	r3, [pc, #12]	; (8006e9c <BSP_SD_ReadCpltCallback+0x14>)
 8006e8e:	2201      	movs	r2, #1
 8006e90:	601a      	str	r2, [r3, #0]
}
 8006e92:	bf00      	nop
 8006e94:	46bd      	mov	sp, r7
 8006e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9a:	4770      	bx	lr
 8006e9c:	200019a4 	.word	0x200019a4

08006ea0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b084      	sub	sp, #16
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006eaa:	79fb      	ldrb	r3, [r7, #7]
 8006eac:	4a08      	ldr	r2, [pc, #32]	; (8006ed0 <disk_status+0x30>)
 8006eae:	009b      	lsls	r3, r3, #2
 8006eb0:	4413      	add	r3, r2
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	685b      	ldr	r3, [r3, #4]
 8006eb6:	79fa      	ldrb	r2, [r7, #7]
 8006eb8:	4905      	ldr	r1, [pc, #20]	; (8006ed0 <disk_status+0x30>)
 8006eba:	440a      	add	r2, r1
 8006ebc:	7a12      	ldrb	r2, [r2, #8]
 8006ebe:	4610      	mov	r0, r2
 8006ec0:	4798      	blx	r3
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006ec6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	3710      	adds	r7, #16
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd80      	pop	{r7, pc}
 8006ed0:	200019d0 	.word	0x200019d0

08006ed4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b084      	sub	sp, #16
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	4603      	mov	r3, r0
 8006edc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8006ee2:	79fb      	ldrb	r3, [r7, #7]
 8006ee4:	4a0d      	ldr	r2, [pc, #52]	; (8006f1c <disk_initialize+0x48>)
 8006ee6:	5cd3      	ldrb	r3, [r2, r3]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d111      	bne.n	8006f10 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8006eec:	79fb      	ldrb	r3, [r7, #7]
 8006eee:	4a0b      	ldr	r2, [pc, #44]	; (8006f1c <disk_initialize+0x48>)
 8006ef0:	2101      	movs	r1, #1
 8006ef2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006ef4:	79fb      	ldrb	r3, [r7, #7]
 8006ef6:	4a09      	ldr	r2, [pc, #36]	; (8006f1c <disk_initialize+0x48>)
 8006ef8:	009b      	lsls	r3, r3, #2
 8006efa:	4413      	add	r3, r2
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	79fa      	ldrb	r2, [r7, #7]
 8006f02:	4906      	ldr	r1, [pc, #24]	; (8006f1c <disk_initialize+0x48>)
 8006f04:	440a      	add	r2, r1
 8006f06:	7a12      	ldrb	r2, [r2, #8]
 8006f08:	4610      	mov	r0, r2
 8006f0a:	4798      	blx	r3
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8006f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3710      	adds	r7, #16
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}
 8006f1a:	bf00      	nop
 8006f1c:	200019d0 	.word	0x200019d0

08006f20 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006f20:	b590      	push	{r4, r7, lr}
 8006f22:	b087      	sub	sp, #28
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	60b9      	str	r1, [r7, #8]
 8006f28:	607a      	str	r2, [r7, #4]
 8006f2a:	603b      	str	r3, [r7, #0]
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006f30:	7bfb      	ldrb	r3, [r7, #15]
 8006f32:	4a0a      	ldr	r2, [pc, #40]	; (8006f5c <disk_read+0x3c>)
 8006f34:	009b      	lsls	r3, r3, #2
 8006f36:	4413      	add	r3, r2
 8006f38:	685b      	ldr	r3, [r3, #4]
 8006f3a:	689c      	ldr	r4, [r3, #8]
 8006f3c:	7bfb      	ldrb	r3, [r7, #15]
 8006f3e:	4a07      	ldr	r2, [pc, #28]	; (8006f5c <disk_read+0x3c>)
 8006f40:	4413      	add	r3, r2
 8006f42:	7a18      	ldrb	r0, [r3, #8]
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	687a      	ldr	r2, [r7, #4]
 8006f48:	68b9      	ldr	r1, [r7, #8]
 8006f4a:	47a0      	blx	r4
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	75fb      	strb	r3, [r7, #23]
  return res;
 8006f50:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	371c      	adds	r7, #28
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd90      	pop	{r4, r7, pc}
 8006f5a:	bf00      	nop
 8006f5c:	200019d0 	.word	0x200019d0

08006f60 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006f60:	b590      	push	{r4, r7, lr}
 8006f62:	b087      	sub	sp, #28
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	60b9      	str	r1, [r7, #8]
 8006f68:	607a      	str	r2, [r7, #4]
 8006f6a:	603b      	str	r3, [r7, #0]
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006f70:	7bfb      	ldrb	r3, [r7, #15]
 8006f72:	4a0a      	ldr	r2, [pc, #40]	; (8006f9c <disk_write+0x3c>)
 8006f74:	009b      	lsls	r3, r3, #2
 8006f76:	4413      	add	r3, r2
 8006f78:	685b      	ldr	r3, [r3, #4]
 8006f7a:	68dc      	ldr	r4, [r3, #12]
 8006f7c:	7bfb      	ldrb	r3, [r7, #15]
 8006f7e:	4a07      	ldr	r2, [pc, #28]	; (8006f9c <disk_write+0x3c>)
 8006f80:	4413      	add	r3, r2
 8006f82:	7a18      	ldrb	r0, [r3, #8]
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	687a      	ldr	r2, [r7, #4]
 8006f88:	68b9      	ldr	r1, [r7, #8]
 8006f8a:	47a0      	blx	r4
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	75fb      	strb	r3, [r7, #23]
  return res;
 8006f90:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	371c      	adds	r7, #28
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd90      	pop	{r4, r7, pc}
 8006f9a:	bf00      	nop
 8006f9c:	200019d0 	.word	0x200019d0

08006fa0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b084      	sub	sp, #16
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	603a      	str	r2, [r7, #0]
 8006faa:	71fb      	strb	r3, [r7, #7]
 8006fac:	460b      	mov	r3, r1
 8006fae:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006fb0:	79fb      	ldrb	r3, [r7, #7]
 8006fb2:	4a09      	ldr	r2, [pc, #36]	; (8006fd8 <disk_ioctl+0x38>)
 8006fb4:	009b      	lsls	r3, r3, #2
 8006fb6:	4413      	add	r3, r2
 8006fb8:	685b      	ldr	r3, [r3, #4]
 8006fba:	691b      	ldr	r3, [r3, #16]
 8006fbc:	79fa      	ldrb	r2, [r7, #7]
 8006fbe:	4906      	ldr	r1, [pc, #24]	; (8006fd8 <disk_ioctl+0x38>)
 8006fc0:	440a      	add	r2, r1
 8006fc2:	7a10      	ldrb	r0, [r2, #8]
 8006fc4:	79b9      	ldrb	r1, [r7, #6]
 8006fc6:	683a      	ldr	r2, [r7, #0]
 8006fc8:	4798      	blx	r3
 8006fca:	4603      	mov	r3, r0
 8006fcc:	73fb      	strb	r3, [r7, #15]
  return res;
 8006fce:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3710      	adds	r7, #16
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}
 8006fd8:	200019d0 	.word	0x200019d0

08006fdc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b085      	sub	sp, #20
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	3301      	adds	r3, #1
 8006fe8:	781b      	ldrb	r3, [r3, #0]
 8006fea:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006fec:	89fb      	ldrh	r3, [r7, #14]
 8006fee:	021b      	lsls	r3, r3, #8
 8006ff0:	b21a      	sxth	r2, r3
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	781b      	ldrb	r3, [r3, #0]
 8006ff6:	b21b      	sxth	r3, r3
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	b21b      	sxth	r3, r3
 8006ffc:	81fb      	strh	r3, [r7, #14]
	return rv;
 8006ffe:	89fb      	ldrh	r3, [r7, #14]
}
 8007000:	4618      	mov	r0, r3
 8007002:	3714      	adds	r7, #20
 8007004:	46bd      	mov	sp, r7
 8007006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700a:	4770      	bx	lr

0800700c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800700c:	b480      	push	{r7}
 800700e:	b085      	sub	sp, #20
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	3303      	adds	r3, #3
 8007018:	781b      	ldrb	r3, [r3, #0]
 800701a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	021b      	lsls	r3, r3, #8
 8007020:	687a      	ldr	r2, [r7, #4]
 8007022:	3202      	adds	r2, #2
 8007024:	7812      	ldrb	r2, [r2, #0]
 8007026:	4313      	orrs	r3, r2
 8007028:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	021b      	lsls	r3, r3, #8
 800702e:	687a      	ldr	r2, [r7, #4]
 8007030:	3201      	adds	r2, #1
 8007032:	7812      	ldrb	r2, [r2, #0]
 8007034:	4313      	orrs	r3, r2
 8007036:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	021b      	lsls	r3, r3, #8
 800703c:	687a      	ldr	r2, [r7, #4]
 800703e:	7812      	ldrb	r2, [r2, #0]
 8007040:	4313      	orrs	r3, r2
 8007042:	60fb      	str	r3, [r7, #12]
	return rv;
 8007044:	68fb      	ldr	r3, [r7, #12]
}
 8007046:	4618      	mov	r0, r3
 8007048:	3714      	adds	r7, #20
 800704a:	46bd      	mov	sp, r7
 800704c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007050:	4770      	bx	lr

08007052 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8007052:	b480      	push	{r7}
 8007054:	b083      	sub	sp, #12
 8007056:	af00      	add	r7, sp, #0
 8007058:	6078      	str	r0, [r7, #4]
 800705a:	460b      	mov	r3, r1
 800705c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	1c5a      	adds	r2, r3, #1
 8007062:	607a      	str	r2, [r7, #4]
 8007064:	887a      	ldrh	r2, [r7, #2]
 8007066:	b2d2      	uxtb	r2, r2
 8007068:	701a      	strb	r2, [r3, #0]
 800706a:	887b      	ldrh	r3, [r7, #2]
 800706c:	0a1b      	lsrs	r3, r3, #8
 800706e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	1c5a      	adds	r2, r3, #1
 8007074:	607a      	str	r2, [r7, #4]
 8007076:	887a      	ldrh	r2, [r7, #2]
 8007078:	b2d2      	uxtb	r2, r2
 800707a:	701a      	strb	r2, [r3, #0]
}
 800707c:	bf00      	nop
 800707e:	370c      	adds	r7, #12
 8007080:	46bd      	mov	sp, r7
 8007082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007086:	4770      	bx	lr

08007088 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8007088:	b480      	push	{r7}
 800708a:	b083      	sub	sp, #12
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
 8007090:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	1c5a      	adds	r2, r3, #1
 8007096:	607a      	str	r2, [r7, #4]
 8007098:	683a      	ldr	r2, [r7, #0]
 800709a:	b2d2      	uxtb	r2, r2
 800709c:	701a      	strb	r2, [r3, #0]
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	0a1b      	lsrs	r3, r3, #8
 80070a2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	1c5a      	adds	r2, r3, #1
 80070a8:	607a      	str	r2, [r7, #4]
 80070aa:	683a      	ldr	r2, [r7, #0]
 80070ac:	b2d2      	uxtb	r2, r2
 80070ae:	701a      	strb	r2, [r3, #0]
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	0a1b      	lsrs	r3, r3, #8
 80070b4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	1c5a      	adds	r2, r3, #1
 80070ba:	607a      	str	r2, [r7, #4]
 80070bc:	683a      	ldr	r2, [r7, #0]
 80070be:	b2d2      	uxtb	r2, r2
 80070c0:	701a      	strb	r2, [r3, #0]
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	0a1b      	lsrs	r3, r3, #8
 80070c6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	1c5a      	adds	r2, r3, #1
 80070cc:	607a      	str	r2, [r7, #4]
 80070ce:	683a      	ldr	r2, [r7, #0]
 80070d0:	b2d2      	uxtb	r2, r2
 80070d2:	701a      	strb	r2, [r3, #0]
}
 80070d4:	bf00      	nop
 80070d6:	370c      	adds	r7, #12
 80070d8:	46bd      	mov	sp, r7
 80070da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070de:	4770      	bx	lr

080070e0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80070e0:	b480      	push	{r7}
 80070e2:	b087      	sub	sp, #28
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	60f8      	str	r0, [r7, #12]
 80070e8:	60b9      	str	r1, [r7, #8]
 80070ea:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d00d      	beq.n	8007116 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80070fa:	693a      	ldr	r2, [r7, #16]
 80070fc:	1c53      	adds	r3, r2, #1
 80070fe:	613b      	str	r3, [r7, #16]
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	1c59      	adds	r1, r3, #1
 8007104:	6179      	str	r1, [r7, #20]
 8007106:	7812      	ldrb	r2, [r2, #0]
 8007108:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	3b01      	subs	r3, #1
 800710e:	607b      	str	r3, [r7, #4]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d1f1      	bne.n	80070fa <mem_cpy+0x1a>
	}
}
 8007116:	bf00      	nop
 8007118:	371c      	adds	r7, #28
 800711a:	46bd      	mov	sp, r7
 800711c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007120:	4770      	bx	lr

08007122 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8007122:	b480      	push	{r7}
 8007124:	b087      	sub	sp, #28
 8007126:	af00      	add	r7, sp, #0
 8007128:	60f8      	str	r0, [r7, #12]
 800712a:	60b9      	str	r1, [r7, #8]
 800712c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	1c5a      	adds	r2, r3, #1
 8007136:	617a      	str	r2, [r7, #20]
 8007138:	68ba      	ldr	r2, [r7, #8]
 800713a:	b2d2      	uxtb	r2, r2
 800713c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	3b01      	subs	r3, #1
 8007142:	607b      	str	r3, [r7, #4]
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d1f3      	bne.n	8007132 <mem_set+0x10>
}
 800714a:	bf00      	nop
 800714c:	371c      	adds	r7, #28
 800714e:	46bd      	mov	sp, r7
 8007150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007154:	4770      	bx	lr

08007156 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8007156:	b480      	push	{r7}
 8007158:	b089      	sub	sp, #36	; 0x24
 800715a:	af00      	add	r7, sp, #0
 800715c:	60f8      	str	r0, [r7, #12]
 800715e:	60b9      	str	r1, [r7, #8]
 8007160:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	61fb      	str	r3, [r7, #28]
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800716a:	2300      	movs	r3, #0
 800716c:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800716e:	69fb      	ldr	r3, [r7, #28]
 8007170:	1c5a      	adds	r2, r3, #1
 8007172:	61fa      	str	r2, [r7, #28]
 8007174:	781b      	ldrb	r3, [r3, #0]
 8007176:	4619      	mov	r1, r3
 8007178:	69bb      	ldr	r3, [r7, #24]
 800717a:	1c5a      	adds	r2, r3, #1
 800717c:	61ba      	str	r2, [r7, #24]
 800717e:	781b      	ldrb	r3, [r3, #0]
 8007180:	1acb      	subs	r3, r1, r3
 8007182:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	3b01      	subs	r3, #1
 8007188:	607b      	str	r3, [r7, #4]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d002      	beq.n	8007196 <mem_cmp+0x40>
 8007190:	697b      	ldr	r3, [r7, #20]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d0eb      	beq.n	800716e <mem_cmp+0x18>

	return r;
 8007196:	697b      	ldr	r3, [r7, #20]
}
 8007198:	4618      	mov	r0, r3
 800719a:	3724      	adds	r7, #36	; 0x24
 800719c:	46bd      	mov	sp, r7
 800719e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a2:	4770      	bx	lr

080071a4 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80071a4:	b480      	push	{r7}
 80071a6:	b083      	sub	sp, #12
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
 80071ac:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80071ae:	e002      	b.n	80071b6 <chk_chr+0x12>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	3301      	adds	r3, #1
 80071b4:	607b      	str	r3, [r7, #4]
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	781b      	ldrb	r3, [r3, #0]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d005      	beq.n	80071ca <chk_chr+0x26>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	781b      	ldrb	r3, [r3, #0]
 80071c2:	461a      	mov	r2, r3
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d1f2      	bne.n	80071b0 <chk_chr+0xc>
	return *str;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	781b      	ldrb	r3, [r3, #0]
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	370c      	adds	r7, #12
 80071d2:	46bd      	mov	sp, r7
 80071d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d8:	4770      	bx	lr
	...

080071dc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80071dc:	b480      	push	{r7}
 80071de:	b085      	sub	sp, #20
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
 80071e4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80071e6:	2300      	movs	r3, #0
 80071e8:	60bb      	str	r3, [r7, #8]
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	60fb      	str	r3, [r7, #12]
 80071ee:	e029      	b.n	8007244 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80071f0:	4a27      	ldr	r2, [pc, #156]	; (8007290 <chk_lock+0xb4>)
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	011b      	lsls	r3, r3, #4
 80071f6:	4413      	add	r3, r2
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d01d      	beq.n	800723a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80071fe:	4a24      	ldr	r2, [pc, #144]	; (8007290 <chk_lock+0xb4>)
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	011b      	lsls	r3, r3, #4
 8007204:	4413      	add	r3, r2
 8007206:	681a      	ldr	r2, [r3, #0]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	429a      	cmp	r2, r3
 800720e:	d116      	bne.n	800723e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8007210:	4a1f      	ldr	r2, [pc, #124]	; (8007290 <chk_lock+0xb4>)
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	011b      	lsls	r3, r3, #4
 8007216:	4413      	add	r3, r2
 8007218:	3304      	adds	r3, #4
 800721a:	681a      	ldr	r2, [r3, #0]
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007220:	429a      	cmp	r2, r3
 8007222:	d10c      	bne.n	800723e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007224:	4a1a      	ldr	r2, [pc, #104]	; (8007290 <chk_lock+0xb4>)
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	011b      	lsls	r3, r3, #4
 800722a:	4413      	add	r3, r2
 800722c:	3308      	adds	r3, #8
 800722e:	681a      	ldr	r2, [r3, #0]
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8007234:	429a      	cmp	r2, r3
 8007236:	d102      	bne.n	800723e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007238:	e007      	b.n	800724a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800723a:	2301      	movs	r3, #1
 800723c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	3301      	adds	r3, #1
 8007242:	60fb      	str	r3, [r7, #12]
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	2b01      	cmp	r3, #1
 8007248:	d9d2      	bls.n	80071f0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	2b02      	cmp	r3, #2
 800724e:	d109      	bne.n	8007264 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d102      	bne.n	800725c <chk_lock+0x80>
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	2b02      	cmp	r3, #2
 800725a:	d101      	bne.n	8007260 <chk_lock+0x84>
 800725c:	2300      	movs	r3, #0
 800725e:	e010      	b.n	8007282 <chk_lock+0xa6>
 8007260:	2312      	movs	r3, #18
 8007262:	e00e      	b.n	8007282 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d108      	bne.n	800727c <chk_lock+0xa0>
 800726a:	4a09      	ldr	r2, [pc, #36]	; (8007290 <chk_lock+0xb4>)
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	011b      	lsls	r3, r3, #4
 8007270:	4413      	add	r3, r2
 8007272:	330c      	adds	r3, #12
 8007274:	881b      	ldrh	r3, [r3, #0]
 8007276:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800727a:	d101      	bne.n	8007280 <chk_lock+0xa4>
 800727c:	2310      	movs	r3, #16
 800727e:	e000      	b.n	8007282 <chk_lock+0xa6>
 8007280:	2300      	movs	r3, #0
}
 8007282:	4618      	mov	r0, r3
 8007284:	3714      	adds	r7, #20
 8007286:	46bd      	mov	sp, r7
 8007288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728c:	4770      	bx	lr
 800728e:	bf00      	nop
 8007290:	200019b0 	.word	0x200019b0

08007294 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8007294:	b480      	push	{r7}
 8007296:	b083      	sub	sp, #12
 8007298:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800729a:	2300      	movs	r3, #0
 800729c:	607b      	str	r3, [r7, #4]
 800729e:	e002      	b.n	80072a6 <enq_lock+0x12>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	3301      	adds	r3, #1
 80072a4:	607b      	str	r3, [r7, #4]
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2b01      	cmp	r3, #1
 80072aa:	d806      	bhi.n	80072ba <enq_lock+0x26>
 80072ac:	4a09      	ldr	r2, [pc, #36]	; (80072d4 <enq_lock+0x40>)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	011b      	lsls	r3, r3, #4
 80072b2:	4413      	add	r3, r2
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d1f2      	bne.n	80072a0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2b02      	cmp	r3, #2
 80072be:	bf14      	ite	ne
 80072c0:	2301      	movne	r3, #1
 80072c2:	2300      	moveq	r3, #0
 80072c4:	b2db      	uxtb	r3, r3
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	370c      	adds	r7, #12
 80072ca:	46bd      	mov	sp, r7
 80072cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d0:	4770      	bx	lr
 80072d2:	bf00      	nop
 80072d4:	200019b0 	.word	0x200019b0

080072d8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80072d8:	b480      	push	{r7}
 80072da:	b085      	sub	sp, #20
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
 80072e0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80072e2:	2300      	movs	r3, #0
 80072e4:	60fb      	str	r3, [r7, #12]
 80072e6:	e01f      	b.n	8007328 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80072e8:	4a41      	ldr	r2, [pc, #260]	; (80073f0 <inc_lock+0x118>)
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	011b      	lsls	r3, r3, #4
 80072ee:	4413      	add	r3, r2
 80072f0:	681a      	ldr	r2, [r3, #0]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	429a      	cmp	r2, r3
 80072f8:	d113      	bne.n	8007322 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80072fa:	4a3d      	ldr	r2, [pc, #244]	; (80073f0 <inc_lock+0x118>)
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	011b      	lsls	r3, r3, #4
 8007300:	4413      	add	r3, r2
 8007302:	3304      	adds	r3, #4
 8007304:	681a      	ldr	r2, [r3, #0]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800730a:	429a      	cmp	r2, r3
 800730c:	d109      	bne.n	8007322 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800730e:	4a38      	ldr	r2, [pc, #224]	; (80073f0 <inc_lock+0x118>)
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	011b      	lsls	r3, r3, #4
 8007314:	4413      	add	r3, r2
 8007316:	3308      	adds	r3, #8
 8007318:	681a      	ldr	r2, [r3, #0]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800731e:	429a      	cmp	r2, r3
 8007320:	d006      	beq.n	8007330 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	3301      	adds	r3, #1
 8007326:	60fb      	str	r3, [r7, #12]
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	2b01      	cmp	r3, #1
 800732c:	d9dc      	bls.n	80072e8 <inc_lock+0x10>
 800732e:	e000      	b.n	8007332 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8007330:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	2b02      	cmp	r3, #2
 8007336:	d132      	bne.n	800739e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007338:	2300      	movs	r3, #0
 800733a:	60fb      	str	r3, [r7, #12]
 800733c:	e002      	b.n	8007344 <inc_lock+0x6c>
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	3301      	adds	r3, #1
 8007342:	60fb      	str	r3, [r7, #12]
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	2b01      	cmp	r3, #1
 8007348:	d806      	bhi.n	8007358 <inc_lock+0x80>
 800734a:	4a29      	ldr	r2, [pc, #164]	; (80073f0 <inc_lock+0x118>)
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	011b      	lsls	r3, r3, #4
 8007350:	4413      	add	r3, r2
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d1f2      	bne.n	800733e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	2b02      	cmp	r3, #2
 800735c:	d101      	bne.n	8007362 <inc_lock+0x8a>
 800735e:	2300      	movs	r3, #0
 8007360:	e040      	b.n	80073e4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681a      	ldr	r2, [r3, #0]
 8007366:	4922      	ldr	r1, [pc, #136]	; (80073f0 <inc_lock+0x118>)
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	011b      	lsls	r3, r3, #4
 800736c:	440b      	add	r3, r1
 800736e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	689a      	ldr	r2, [r3, #8]
 8007374:	491e      	ldr	r1, [pc, #120]	; (80073f0 <inc_lock+0x118>)
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	011b      	lsls	r3, r3, #4
 800737a:	440b      	add	r3, r1
 800737c:	3304      	adds	r3, #4
 800737e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	695a      	ldr	r2, [r3, #20]
 8007384:	491a      	ldr	r1, [pc, #104]	; (80073f0 <inc_lock+0x118>)
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	011b      	lsls	r3, r3, #4
 800738a:	440b      	add	r3, r1
 800738c:	3308      	adds	r3, #8
 800738e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8007390:	4a17      	ldr	r2, [pc, #92]	; (80073f0 <inc_lock+0x118>)
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	011b      	lsls	r3, r3, #4
 8007396:	4413      	add	r3, r2
 8007398:	330c      	adds	r3, #12
 800739a:	2200      	movs	r2, #0
 800739c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d009      	beq.n	80073b8 <inc_lock+0xe0>
 80073a4:	4a12      	ldr	r2, [pc, #72]	; (80073f0 <inc_lock+0x118>)
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	011b      	lsls	r3, r3, #4
 80073aa:	4413      	add	r3, r2
 80073ac:	330c      	adds	r3, #12
 80073ae:	881b      	ldrh	r3, [r3, #0]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d001      	beq.n	80073b8 <inc_lock+0xe0>
 80073b4:	2300      	movs	r3, #0
 80073b6:	e015      	b.n	80073e4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d108      	bne.n	80073d0 <inc_lock+0xf8>
 80073be:	4a0c      	ldr	r2, [pc, #48]	; (80073f0 <inc_lock+0x118>)
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	011b      	lsls	r3, r3, #4
 80073c4:	4413      	add	r3, r2
 80073c6:	330c      	adds	r3, #12
 80073c8:	881b      	ldrh	r3, [r3, #0]
 80073ca:	3301      	adds	r3, #1
 80073cc:	b29a      	uxth	r2, r3
 80073ce:	e001      	b.n	80073d4 <inc_lock+0xfc>
 80073d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80073d4:	4906      	ldr	r1, [pc, #24]	; (80073f0 <inc_lock+0x118>)
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	011b      	lsls	r3, r3, #4
 80073da:	440b      	add	r3, r1
 80073dc:	330c      	adds	r3, #12
 80073de:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	3301      	adds	r3, #1
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	3714      	adds	r7, #20
 80073e8:	46bd      	mov	sp, r7
 80073ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ee:	4770      	bx	lr
 80073f0:	200019b0 	.word	0x200019b0

080073f4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80073f4:	b480      	push	{r7}
 80073f6:	b085      	sub	sp, #20
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	3b01      	subs	r3, #1
 8007400:	607b      	str	r3, [r7, #4]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2b01      	cmp	r3, #1
 8007406:	d825      	bhi.n	8007454 <dec_lock+0x60>
		n = Files[i].ctr;
 8007408:	4a17      	ldr	r2, [pc, #92]	; (8007468 <dec_lock+0x74>)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	011b      	lsls	r3, r3, #4
 800740e:	4413      	add	r3, r2
 8007410:	330c      	adds	r3, #12
 8007412:	881b      	ldrh	r3, [r3, #0]
 8007414:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8007416:	89fb      	ldrh	r3, [r7, #14]
 8007418:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800741c:	d101      	bne.n	8007422 <dec_lock+0x2e>
 800741e:	2300      	movs	r3, #0
 8007420:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8007422:	89fb      	ldrh	r3, [r7, #14]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d002      	beq.n	800742e <dec_lock+0x3a>
 8007428:	89fb      	ldrh	r3, [r7, #14]
 800742a:	3b01      	subs	r3, #1
 800742c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800742e:	4a0e      	ldr	r2, [pc, #56]	; (8007468 <dec_lock+0x74>)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	011b      	lsls	r3, r3, #4
 8007434:	4413      	add	r3, r2
 8007436:	330c      	adds	r3, #12
 8007438:	89fa      	ldrh	r2, [r7, #14]
 800743a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800743c:	89fb      	ldrh	r3, [r7, #14]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d105      	bne.n	800744e <dec_lock+0x5a>
 8007442:	4a09      	ldr	r2, [pc, #36]	; (8007468 <dec_lock+0x74>)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	011b      	lsls	r3, r3, #4
 8007448:	4413      	add	r3, r2
 800744a:	2200      	movs	r2, #0
 800744c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800744e:	2300      	movs	r3, #0
 8007450:	737b      	strb	r3, [r7, #13]
 8007452:	e001      	b.n	8007458 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8007454:	2302      	movs	r3, #2
 8007456:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007458:	7b7b      	ldrb	r3, [r7, #13]
}
 800745a:	4618      	mov	r0, r3
 800745c:	3714      	adds	r7, #20
 800745e:	46bd      	mov	sp, r7
 8007460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007464:	4770      	bx	lr
 8007466:	bf00      	nop
 8007468:	200019b0 	.word	0x200019b0

0800746c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800746c:	b480      	push	{r7}
 800746e:	b085      	sub	sp, #20
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007474:	2300      	movs	r3, #0
 8007476:	60fb      	str	r3, [r7, #12]
 8007478:	e010      	b.n	800749c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800747a:	4a0d      	ldr	r2, [pc, #52]	; (80074b0 <clear_lock+0x44>)
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	011b      	lsls	r3, r3, #4
 8007480:	4413      	add	r3, r2
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	687a      	ldr	r2, [r7, #4]
 8007486:	429a      	cmp	r2, r3
 8007488:	d105      	bne.n	8007496 <clear_lock+0x2a>
 800748a:	4a09      	ldr	r2, [pc, #36]	; (80074b0 <clear_lock+0x44>)
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	011b      	lsls	r3, r3, #4
 8007490:	4413      	add	r3, r2
 8007492:	2200      	movs	r2, #0
 8007494:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	3301      	adds	r3, #1
 800749a:	60fb      	str	r3, [r7, #12]
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	2b01      	cmp	r3, #1
 80074a0:	d9eb      	bls.n	800747a <clear_lock+0xe>
	}
}
 80074a2:	bf00      	nop
 80074a4:	3714      	adds	r7, #20
 80074a6:	46bd      	mov	sp, r7
 80074a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ac:	4770      	bx	lr
 80074ae:	bf00      	nop
 80074b0:	200019b0 	.word	0x200019b0

080074b4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b086      	sub	sp, #24
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80074bc:	2300      	movs	r3, #0
 80074be:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	78db      	ldrb	r3, [r3, #3]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d034      	beq.n	8007532 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074cc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	7858      	ldrb	r0, [r3, #1]
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80074d8:	2301      	movs	r3, #1
 80074da:	697a      	ldr	r2, [r7, #20]
 80074dc:	f7ff fd40 	bl	8006f60 <disk_write>
 80074e0:	4603      	mov	r3, r0
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d002      	beq.n	80074ec <sync_window+0x38>
			res = FR_DISK_ERR;
 80074e6:	2301      	movs	r3, #1
 80074e8:	73fb      	strb	r3, [r7, #15]
 80074ea:	e022      	b.n	8007532 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2200      	movs	r2, #0
 80074f0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f6:	697a      	ldr	r2, [r7, #20]
 80074f8:	1ad2      	subs	r2, r2, r3
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	69db      	ldr	r3, [r3, #28]
 80074fe:	429a      	cmp	r2, r3
 8007500:	d217      	bcs.n	8007532 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	789b      	ldrb	r3, [r3, #2]
 8007506:	613b      	str	r3, [r7, #16]
 8007508:	e010      	b.n	800752c <sync_window+0x78>
					wsect += fs->fsize;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	69db      	ldr	r3, [r3, #28]
 800750e:	697a      	ldr	r2, [r7, #20]
 8007510:	4413      	add	r3, r2
 8007512:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	7858      	ldrb	r0, [r3, #1]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800751e:	2301      	movs	r3, #1
 8007520:	697a      	ldr	r2, [r7, #20]
 8007522:	f7ff fd1d 	bl	8006f60 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	3b01      	subs	r3, #1
 800752a:	613b      	str	r3, [r7, #16]
 800752c:	693b      	ldr	r3, [r7, #16]
 800752e:	2b01      	cmp	r3, #1
 8007530:	d8eb      	bhi.n	800750a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8007532:	7bfb      	ldrb	r3, [r7, #15]
}
 8007534:	4618      	mov	r0, r3
 8007536:	3718      	adds	r7, #24
 8007538:	46bd      	mov	sp, r7
 800753a:	bd80      	pop	{r7, pc}

0800753c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b084      	sub	sp, #16
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
 8007544:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8007546:	2300      	movs	r3, #0
 8007548:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800754e:	683a      	ldr	r2, [r7, #0]
 8007550:	429a      	cmp	r2, r3
 8007552:	d01b      	beq.n	800758c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f7ff ffad 	bl	80074b4 <sync_window>
 800755a:	4603      	mov	r3, r0
 800755c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800755e:	7bfb      	ldrb	r3, [r7, #15]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d113      	bne.n	800758c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	7858      	ldrb	r0, [r3, #1]
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800756e:	2301      	movs	r3, #1
 8007570:	683a      	ldr	r2, [r7, #0]
 8007572:	f7ff fcd5 	bl	8006f20 <disk_read>
 8007576:	4603      	mov	r3, r0
 8007578:	2b00      	cmp	r3, #0
 800757a:	d004      	beq.n	8007586 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800757c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007580:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8007582:	2301      	movs	r3, #1
 8007584:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	683a      	ldr	r2, [r7, #0]
 800758a:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800758c:	7bfb      	ldrb	r3, [r7, #15]
}
 800758e:	4618      	mov	r0, r3
 8007590:	3710      	adds	r7, #16
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}
	...

08007598 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b084      	sub	sp, #16
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	f7ff ff87 	bl	80074b4 <sync_window>
 80075a6:	4603      	mov	r3, r0
 80075a8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80075aa:	7bfb      	ldrb	r3, [r7, #15]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d159      	bne.n	8007664 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	781b      	ldrb	r3, [r3, #0]
 80075b4:	2b03      	cmp	r3, #3
 80075b6:	d149      	bne.n	800764c <sync_fs+0xb4>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	791b      	ldrb	r3, [r3, #4]
 80075bc:	2b01      	cmp	r3, #1
 80075be:	d145      	bne.n	800764c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f103 0034 	add.w	r0, r3, #52	; 0x34
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	899b      	ldrh	r3, [r3, #12]
 80075ca:	461a      	mov	r2, r3
 80075cc:	2100      	movs	r1, #0
 80075ce:	f7ff fda8 	bl	8007122 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	3334      	adds	r3, #52	; 0x34
 80075d6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80075da:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80075de:	4618      	mov	r0, r3
 80075e0:	f7ff fd37 	bl	8007052 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	3334      	adds	r3, #52	; 0x34
 80075e8:	4921      	ldr	r1, [pc, #132]	; (8007670 <sync_fs+0xd8>)
 80075ea:	4618      	mov	r0, r3
 80075ec:	f7ff fd4c 	bl	8007088 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	3334      	adds	r3, #52	; 0x34
 80075f4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80075f8:	491e      	ldr	r1, [pc, #120]	; (8007674 <sync_fs+0xdc>)
 80075fa:	4618      	mov	r0, r3
 80075fc:	f7ff fd44 	bl	8007088 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	3334      	adds	r3, #52	; 0x34
 8007604:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	695b      	ldr	r3, [r3, #20]
 800760c:	4619      	mov	r1, r3
 800760e:	4610      	mov	r0, r2
 8007610:	f7ff fd3a 	bl	8007088 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	3334      	adds	r3, #52	; 0x34
 8007618:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	691b      	ldr	r3, [r3, #16]
 8007620:	4619      	mov	r1, r3
 8007622:	4610      	mov	r0, r2
 8007624:	f7ff fd30 	bl	8007088 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6a1b      	ldr	r3, [r3, #32]
 800762c:	1c5a      	adds	r2, r3, #1
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	7858      	ldrb	r0, [r3, #1]
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007640:	2301      	movs	r3, #1
 8007642:	f7ff fc8d 	bl	8006f60 <disk_write>
			fs->fsi_flag = 0;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2200      	movs	r2, #0
 800764a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	785b      	ldrb	r3, [r3, #1]
 8007650:	2200      	movs	r2, #0
 8007652:	2100      	movs	r1, #0
 8007654:	4618      	mov	r0, r3
 8007656:	f7ff fca3 	bl	8006fa0 <disk_ioctl>
 800765a:	4603      	mov	r3, r0
 800765c:	2b00      	cmp	r3, #0
 800765e:	d001      	beq.n	8007664 <sync_fs+0xcc>
 8007660:	2301      	movs	r3, #1
 8007662:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007664:	7bfb      	ldrb	r3, [r7, #15]
}
 8007666:	4618      	mov	r0, r3
 8007668:	3710      	adds	r7, #16
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}
 800766e:	bf00      	nop
 8007670:	41615252 	.word	0x41615252
 8007674:	61417272 	.word	0x61417272

08007678 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8007678:	b480      	push	{r7}
 800767a:	b083      	sub	sp, #12
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
 8007680:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	3b02      	subs	r3, #2
 8007686:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	699b      	ldr	r3, [r3, #24]
 800768c:	3b02      	subs	r3, #2
 800768e:	683a      	ldr	r2, [r7, #0]
 8007690:	429a      	cmp	r2, r3
 8007692:	d301      	bcc.n	8007698 <clust2sect+0x20>
 8007694:	2300      	movs	r3, #0
 8007696:	e008      	b.n	80076aa <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	895b      	ldrh	r3, [r3, #10]
 800769c:	461a      	mov	r2, r3
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	fb03 f202 	mul.w	r2, r3, r2
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076a8:	4413      	add	r3, r2
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	370c      	adds	r7, #12
 80076ae:	46bd      	mov	sp, r7
 80076b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b4:	4770      	bx	lr

080076b6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80076b6:	b580      	push	{r7, lr}
 80076b8:	b086      	sub	sp, #24
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	6078      	str	r0, [r7, #4]
 80076be:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	2b01      	cmp	r3, #1
 80076ca:	d904      	bls.n	80076d6 <get_fat+0x20>
 80076cc:	693b      	ldr	r3, [r7, #16]
 80076ce:	699b      	ldr	r3, [r3, #24]
 80076d0:	683a      	ldr	r2, [r7, #0]
 80076d2:	429a      	cmp	r2, r3
 80076d4:	d302      	bcc.n	80076dc <get_fat+0x26>
		val = 1;	/* Internal error */
 80076d6:	2301      	movs	r3, #1
 80076d8:	617b      	str	r3, [r7, #20]
 80076da:	e0b7      	b.n	800784c <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80076dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80076e0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80076e2:	693b      	ldr	r3, [r7, #16]
 80076e4:	781b      	ldrb	r3, [r3, #0]
 80076e6:	2b02      	cmp	r3, #2
 80076e8:	d05a      	beq.n	80077a0 <get_fat+0xea>
 80076ea:	2b03      	cmp	r3, #3
 80076ec:	d07d      	beq.n	80077ea <get_fat+0x134>
 80076ee:	2b01      	cmp	r3, #1
 80076f0:	f040 80a2 	bne.w	8007838 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	60fb      	str	r3, [r7, #12]
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	085b      	lsrs	r3, r3, #1
 80076fc:	68fa      	ldr	r2, [r7, #12]
 80076fe:	4413      	add	r3, r2
 8007700:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007702:	693b      	ldr	r3, [r7, #16]
 8007704:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007706:	693b      	ldr	r3, [r7, #16]
 8007708:	899b      	ldrh	r3, [r3, #12]
 800770a:	4619      	mov	r1, r3
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007712:	4413      	add	r3, r2
 8007714:	4619      	mov	r1, r3
 8007716:	6938      	ldr	r0, [r7, #16]
 8007718:	f7ff ff10 	bl	800753c <move_window>
 800771c:	4603      	mov	r3, r0
 800771e:	2b00      	cmp	r3, #0
 8007720:	f040 808d 	bne.w	800783e <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	1c5a      	adds	r2, r3, #1
 8007728:	60fa      	str	r2, [r7, #12]
 800772a:	693a      	ldr	r2, [r7, #16]
 800772c:	8992      	ldrh	r2, [r2, #12]
 800772e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007732:	fb02 f201 	mul.w	r2, r2, r1
 8007736:	1a9b      	subs	r3, r3, r2
 8007738:	693a      	ldr	r2, [r7, #16]
 800773a:	4413      	add	r3, r2
 800773c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007740:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007742:	693b      	ldr	r3, [r7, #16]
 8007744:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007746:	693b      	ldr	r3, [r7, #16]
 8007748:	899b      	ldrh	r3, [r3, #12]
 800774a:	4619      	mov	r1, r3
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007752:	4413      	add	r3, r2
 8007754:	4619      	mov	r1, r3
 8007756:	6938      	ldr	r0, [r7, #16]
 8007758:	f7ff fef0 	bl	800753c <move_window>
 800775c:	4603      	mov	r3, r0
 800775e:	2b00      	cmp	r3, #0
 8007760:	d16f      	bne.n	8007842 <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007762:	693b      	ldr	r3, [r7, #16]
 8007764:	899b      	ldrh	r3, [r3, #12]
 8007766:	461a      	mov	r2, r3
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	fbb3 f1f2 	udiv	r1, r3, r2
 800776e:	fb02 f201 	mul.w	r2, r2, r1
 8007772:	1a9b      	subs	r3, r3, r2
 8007774:	693a      	ldr	r2, [r7, #16]
 8007776:	4413      	add	r3, r2
 8007778:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800777c:	021b      	lsls	r3, r3, #8
 800777e:	461a      	mov	r2, r3
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	4313      	orrs	r3, r2
 8007784:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	f003 0301 	and.w	r3, r3, #1
 800778c:	2b00      	cmp	r3, #0
 800778e:	d002      	beq.n	8007796 <get_fat+0xe0>
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	091b      	lsrs	r3, r3, #4
 8007794:	e002      	b.n	800779c <get_fat+0xe6>
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800779c:	617b      	str	r3, [r7, #20]
			break;
 800779e:	e055      	b.n	800784c <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80077a4:	693b      	ldr	r3, [r7, #16]
 80077a6:	899b      	ldrh	r3, [r3, #12]
 80077a8:	085b      	lsrs	r3, r3, #1
 80077aa:	b29b      	uxth	r3, r3
 80077ac:	4619      	mov	r1, r3
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	fbb3 f3f1 	udiv	r3, r3, r1
 80077b4:	4413      	add	r3, r2
 80077b6:	4619      	mov	r1, r3
 80077b8:	6938      	ldr	r0, [r7, #16]
 80077ba:	f7ff febf 	bl	800753c <move_window>
 80077be:	4603      	mov	r3, r0
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d140      	bne.n	8007846 <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80077c4:	693b      	ldr	r3, [r7, #16]
 80077c6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	005b      	lsls	r3, r3, #1
 80077ce:	693a      	ldr	r2, [r7, #16]
 80077d0:	8992      	ldrh	r2, [r2, #12]
 80077d2:	fbb3 f0f2 	udiv	r0, r3, r2
 80077d6:	fb02 f200 	mul.w	r2, r2, r0
 80077da:	1a9b      	subs	r3, r3, r2
 80077dc:	440b      	add	r3, r1
 80077de:	4618      	mov	r0, r3
 80077e0:	f7ff fbfc 	bl	8006fdc <ld_word>
 80077e4:	4603      	mov	r3, r0
 80077e6:	617b      	str	r3, [r7, #20]
			break;
 80077e8:	e030      	b.n	800784c <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80077ee:	693b      	ldr	r3, [r7, #16]
 80077f0:	899b      	ldrh	r3, [r3, #12]
 80077f2:	089b      	lsrs	r3, r3, #2
 80077f4:	b29b      	uxth	r3, r3
 80077f6:	4619      	mov	r1, r3
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80077fe:	4413      	add	r3, r2
 8007800:	4619      	mov	r1, r3
 8007802:	6938      	ldr	r0, [r7, #16]
 8007804:	f7ff fe9a 	bl	800753c <move_window>
 8007808:	4603      	mov	r3, r0
 800780a:	2b00      	cmp	r3, #0
 800780c:	d11d      	bne.n	800784a <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800780e:	693b      	ldr	r3, [r7, #16]
 8007810:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	009b      	lsls	r3, r3, #2
 8007818:	693a      	ldr	r2, [r7, #16]
 800781a:	8992      	ldrh	r2, [r2, #12]
 800781c:	fbb3 f0f2 	udiv	r0, r3, r2
 8007820:	fb02 f200 	mul.w	r2, r2, r0
 8007824:	1a9b      	subs	r3, r3, r2
 8007826:	440b      	add	r3, r1
 8007828:	4618      	mov	r0, r3
 800782a:	f7ff fbef 	bl	800700c <ld_dword>
 800782e:	4603      	mov	r3, r0
 8007830:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007834:	617b      	str	r3, [r7, #20]
			break;
 8007836:	e009      	b.n	800784c <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8007838:	2301      	movs	r3, #1
 800783a:	617b      	str	r3, [r7, #20]
 800783c:	e006      	b.n	800784c <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800783e:	bf00      	nop
 8007840:	e004      	b.n	800784c <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007842:	bf00      	nop
 8007844:	e002      	b.n	800784c <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007846:	bf00      	nop
 8007848:	e000      	b.n	800784c <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800784a:	bf00      	nop
		}
	}

	return val;
 800784c:	697b      	ldr	r3, [r7, #20]
}
 800784e:	4618      	mov	r0, r3
 8007850:	3718      	adds	r7, #24
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}

08007856 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8007856:	b590      	push	{r4, r7, lr}
 8007858:	b089      	sub	sp, #36	; 0x24
 800785a:	af00      	add	r7, sp, #0
 800785c:	60f8      	str	r0, [r7, #12]
 800785e:	60b9      	str	r1, [r7, #8]
 8007860:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007862:	2302      	movs	r3, #2
 8007864:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	2b01      	cmp	r3, #1
 800786a:	f240 8106 	bls.w	8007a7a <put_fat+0x224>
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	699b      	ldr	r3, [r3, #24]
 8007872:	68ba      	ldr	r2, [r7, #8]
 8007874:	429a      	cmp	r2, r3
 8007876:	f080 8100 	bcs.w	8007a7a <put_fat+0x224>
		switch (fs->fs_type) {
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	781b      	ldrb	r3, [r3, #0]
 800787e:	2b02      	cmp	r3, #2
 8007880:	f000 8088 	beq.w	8007994 <put_fat+0x13e>
 8007884:	2b03      	cmp	r3, #3
 8007886:	f000 80b0 	beq.w	80079ea <put_fat+0x194>
 800788a:	2b01      	cmp	r3, #1
 800788c:	f040 80f5 	bne.w	8007a7a <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	61bb      	str	r3, [r7, #24]
 8007894:	69bb      	ldr	r3, [r7, #24]
 8007896:	085b      	lsrs	r3, r3, #1
 8007898:	69ba      	ldr	r2, [r7, #24]
 800789a:	4413      	add	r3, r2
 800789c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	899b      	ldrh	r3, [r3, #12]
 80078a6:	4619      	mov	r1, r3
 80078a8:	69bb      	ldr	r3, [r7, #24]
 80078aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80078ae:	4413      	add	r3, r2
 80078b0:	4619      	mov	r1, r3
 80078b2:	68f8      	ldr	r0, [r7, #12]
 80078b4:	f7ff fe42 	bl	800753c <move_window>
 80078b8:	4603      	mov	r3, r0
 80078ba:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80078bc:	7ffb      	ldrb	r3, [r7, #31]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	f040 80d4 	bne.w	8007a6c <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80078ca:	69bb      	ldr	r3, [r7, #24]
 80078cc:	1c5a      	adds	r2, r3, #1
 80078ce:	61ba      	str	r2, [r7, #24]
 80078d0:	68fa      	ldr	r2, [r7, #12]
 80078d2:	8992      	ldrh	r2, [r2, #12]
 80078d4:	fbb3 f0f2 	udiv	r0, r3, r2
 80078d8:	fb02 f200 	mul.w	r2, r2, r0
 80078dc:	1a9b      	subs	r3, r3, r2
 80078de:	440b      	add	r3, r1
 80078e0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	f003 0301 	and.w	r3, r3, #1
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d00d      	beq.n	8007908 <put_fat+0xb2>
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	781b      	ldrb	r3, [r3, #0]
 80078f0:	b25b      	sxtb	r3, r3
 80078f2:	f003 030f 	and.w	r3, r3, #15
 80078f6:	b25a      	sxtb	r2, r3
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	b2db      	uxtb	r3, r3
 80078fc:	011b      	lsls	r3, r3, #4
 80078fe:	b25b      	sxtb	r3, r3
 8007900:	4313      	orrs	r3, r2
 8007902:	b25b      	sxtb	r3, r3
 8007904:	b2db      	uxtb	r3, r3
 8007906:	e001      	b.n	800790c <put_fat+0xb6>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	b2db      	uxtb	r3, r3
 800790c:	697a      	ldr	r2, [r7, #20]
 800790e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	2201      	movs	r2, #1
 8007914:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	899b      	ldrh	r3, [r3, #12]
 800791e:	4619      	mov	r1, r3
 8007920:	69bb      	ldr	r3, [r7, #24]
 8007922:	fbb3 f3f1 	udiv	r3, r3, r1
 8007926:	4413      	add	r3, r2
 8007928:	4619      	mov	r1, r3
 800792a:	68f8      	ldr	r0, [r7, #12]
 800792c:	f7ff fe06 	bl	800753c <move_window>
 8007930:	4603      	mov	r3, r0
 8007932:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007934:	7ffb      	ldrb	r3, [r7, #31]
 8007936:	2b00      	cmp	r3, #0
 8007938:	f040 809a 	bne.w	8007a70 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	899b      	ldrh	r3, [r3, #12]
 8007946:	461a      	mov	r2, r3
 8007948:	69bb      	ldr	r3, [r7, #24]
 800794a:	fbb3 f0f2 	udiv	r0, r3, r2
 800794e:	fb02 f200 	mul.w	r2, r2, r0
 8007952:	1a9b      	subs	r3, r3, r2
 8007954:	440b      	add	r3, r1
 8007956:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	f003 0301 	and.w	r3, r3, #1
 800795e:	2b00      	cmp	r3, #0
 8007960:	d003      	beq.n	800796a <put_fat+0x114>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	091b      	lsrs	r3, r3, #4
 8007966:	b2db      	uxtb	r3, r3
 8007968:	e00e      	b.n	8007988 <put_fat+0x132>
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	781b      	ldrb	r3, [r3, #0]
 800796e:	b25b      	sxtb	r3, r3
 8007970:	f023 030f 	bic.w	r3, r3, #15
 8007974:	b25a      	sxtb	r2, r3
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	0a1b      	lsrs	r3, r3, #8
 800797a:	b25b      	sxtb	r3, r3
 800797c:	f003 030f 	and.w	r3, r3, #15
 8007980:	b25b      	sxtb	r3, r3
 8007982:	4313      	orrs	r3, r2
 8007984:	b25b      	sxtb	r3, r3
 8007986:	b2db      	uxtb	r3, r3
 8007988:	697a      	ldr	r2, [r7, #20]
 800798a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	2201      	movs	r2, #1
 8007990:	70da      	strb	r2, [r3, #3]
			break;
 8007992:	e072      	b.n	8007a7a <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	899b      	ldrh	r3, [r3, #12]
 800799c:	085b      	lsrs	r3, r3, #1
 800799e:	b29b      	uxth	r3, r3
 80079a0:	4619      	mov	r1, r3
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	fbb3 f3f1 	udiv	r3, r3, r1
 80079a8:	4413      	add	r3, r2
 80079aa:	4619      	mov	r1, r3
 80079ac:	68f8      	ldr	r0, [r7, #12]
 80079ae:	f7ff fdc5 	bl	800753c <move_window>
 80079b2:	4603      	mov	r3, r0
 80079b4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80079b6:	7ffb      	ldrb	r3, [r7, #31]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d15b      	bne.n	8007a74 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	005b      	lsls	r3, r3, #1
 80079c6:	68fa      	ldr	r2, [r7, #12]
 80079c8:	8992      	ldrh	r2, [r2, #12]
 80079ca:	fbb3 f0f2 	udiv	r0, r3, r2
 80079ce:	fb02 f200 	mul.w	r2, r2, r0
 80079d2:	1a9b      	subs	r3, r3, r2
 80079d4:	440b      	add	r3, r1
 80079d6:	687a      	ldr	r2, [r7, #4]
 80079d8:	b292      	uxth	r2, r2
 80079da:	4611      	mov	r1, r2
 80079dc:	4618      	mov	r0, r3
 80079de:	f7ff fb38 	bl	8007052 <st_word>
			fs->wflag = 1;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	2201      	movs	r2, #1
 80079e6:	70da      	strb	r2, [r3, #3]
			break;
 80079e8:	e047      	b.n	8007a7a <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	899b      	ldrh	r3, [r3, #12]
 80079f2:	089b      	lsrs	r3, r3, #2
 80079f4:	b29b      	uxth	r3, r3
 80079f6:	4619      	mov	r1, r3
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80079fe:	4413      	add	r3, r2
 8007a00:	4619      	mov	r1, r3
 8007a02:	68f8      	ldr	r0, [r7, #12]
 8007a04:	f7ff fd9a 	bl	800753c <move_window>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007a0c:	7ffb      	ldrb	r3, [r7, #31]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d132      	bne.n	8007a78 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	009b      	lsls	r3, r3, #2
 8007a22:	68fa      	ldr	r2, [r7, #12]
 8007a24:	8992      	ldrh	r2, [r2, #12]
 8007a26:	fbb3 f0f2 	udiv	r0, r3, r2
 8007a2a:	fb02 f200 	mul.w	r2, r2, r0
 8007a2e:	1a9b      	subs	r3, r3, r2
 8007a30:	440b      	add	r3, r1
 8007a32:	4618      	mov	r0, r3
 8007a34:	f7ff faea 	bl	800700c <ld_dword>
 8007a38:	4603      	mov	r3, r0
 8007a3a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007a3e:	4323      	orrs	r3, r4
 8007a40:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	009b      	lsls	r3, r3, #2
 8007a4c:	68fa      	ldr	r2, [r7, #12]
 8007a4e:	8992      	ldrh	r2, [r2, #12]
 8007a50:	fbb3 f0f2 	udiv	r0, r3, r2
 8007a54:	fb02 f200 	mul.w	r2, r2, r0
 8007a58:	1a9b      	subs	r3, r3, r2
 8007a5a:	440b      	add	r3, r1
 8007a5c:	6879      	ldr	r1, [r7, #4]
 8007a5e:	4618      	mov	r0, r3
 8007a60:	f7ff fb12 	bl	8007088 <st_dword>
			fs->wflag = 1;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	2201      	movs	r2, #1
 8007a68:	70da      	strb	r2, [r3, #3]
			break;
 8007a6a:	e006      	b.n	8007a7a <put_fat+0x224>
			if (res != FR_OK) break;
 8007a6c:	bf00      	nop
 8007a6e:	e004      	b.n	8007a7a <put_fat+0x224>
			if (res != FR_OK) break;
 8007a70:	bf00      	nop
 8007a72:	e002      	b.n	8007a7a <put_fat+0x224>
			if (res != FR_OK) break;
 8007a74:	bf00      	nop
 8007a76:	e000      	b.n	8007a7a <put_fat+0x224>
			if (res != FR_OK) break;
 8007a78:	bf00      	nop
		}
	}
	return res;
 8007a7a:	7ffb      	ldrb	r3, [r7, #31]
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	3724      	adds	r7, #36	; 0x24
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd90      	pop	{r4, r7, pc}

08007a84 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b088      	sub	sp, #32
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	60f8      	str	r0, [r7, #12]
 8007a8c:	60b9      	str	r1, [r7, #8]
 8007a8e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007a90:	2300      	movs	r3, #0
 8007a92:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	2b01      	cmp	r3, #1
 8007a9e:	d904      	bls.n	8007aaa <remove_chain+0x26>
 8007aa0:	69bb      	ldr	r3, [r7, #24]
 8007aa2:	699b      	ldr	r3, [r3, #24]
 8007aa4:	68ba      	ldr	r2, [r7, #8]
 8007aa6:	429a      	cmp	r2, r3
 8007aa8:	d301      	bcc.n	8007aae <remove_chain+0x2a>
 8007aaa:	2302      	movs	r3, #2
 8007aac:	e04b      	b.n	8007b46 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d00c      	beq.n	8007ace <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007ab4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007ab8:	6879      	ldr	r1, [r7, #4]
 8007aba:	69b8      	ldr	r0, [r7, #24]
 8007abc:	f7ff fecb 	bl	8007856 <put_fat>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8007ac4:	7ffb      	ldrb	r3, [r7, #31]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d001      	beq.n	8007ace <remove_chain+0x4a>
 8007aca:	7ffb      	ldrb	r3, [r7, #31]
 8007acc:	e03b      	b.n	8007b46 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007ace:	68b9      	ldr	r1, [r7, #8]
 8007ad0:	68f8      	ldr	r0, [r7, #12]
 8007ad2:	f7ff fdf0 	bl	80076b6 <get_fat>
 8007ad6:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d031      	beq.n	8007b42 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007ade:	697b      	ldr	r3, [r7, #20]
 8007ae0:	2b01      	cmp	r3, #1
 8007ae2:	d101      	bne.n	8007ae8 <remove_chain+0x64>
 8007ae4:	2302      	movs	r3, #2
 8007ae6:	e02e      	b.n	8007b46 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007aee:	d101      	bne.n	8007af4 <remove_chain+0x70>
 8007af0:	2301      	movs	r3, #1
 8007af2:	e028      	b.n	8007b46 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007af4:	2200      	movs	r2, #0
 8007af6:	68b9      	ldr	r1, [r7, #8]
 8007af8:	69b8      	ldr	r0, [r7, #24]
 8007afa:	f7ff feac 	bl	8007856 <put_fat>
 8007afe:	4603      	mov	r3, r0
 8007b00:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8007b02:	7ffb      	ldrb	r3, [r7, #31]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d001      	beq.n	8007b0c <remove_chain+0x88>
 8007b08:	7ffb      	ldrb	r3, [r7, #31]
 8007b0a:	e01c      	b.n	8007b46 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8007b0c:	69bb      	ldr	r3, [r7, #24]
 8007b0e:	695a      	ldr	r2, [r3, #20]
 8007b10:	69bb      	ldr	r3, [r7, #24]
 8007b12:	699b      	ldr	r3, [r3, #24]
 8007b14:	3b02      	subs	r3, #2
 8007b16:	429a      	cmp	r2, r3
 8007b18:	d20b      	bcs.n	8007b32 <remove_chain+0xae>
			fs->free_clst++;
 8007b1a:	69bb      	ldr	r3, [r7, #24]
 8007b1c:	695b      	ldr	r3, [r3, #20]
 8007b1e:	1c5a      	adds	r2, r3, #1
 8007b20:	69bb      	ldr	r3, [r7, #24]
 8007b22:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8007b24:	69bb      	ldr	r3, [r7, #24]
 8007b26:	791b      	ldrb	r3, [r3, #4]
 8007b28:	f043 0301 	orr.w	r3, r3, #1
 8007b2c:	b2da      	uxtb	r2, r3
 8007b2e:	69bb      	ldr	r3, [r7, #24]
 8007b30:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007b36:	69bb      	ldr	r3, [r7, #24]
 8007b38:	699b      	ldr	r3, [r3, #24]
 8007b3a:	68ba      	ldr	r2, [r7, #8]
 8007b3c:	429a      	cmp	r2, r3
 8007b3e:	d3c6      	bcc.n	8007ace <remove_chain+0x4a>
 8007b40:	e000      	b.n	8007b44 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8007b42:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8007b44:	2300      	movs	r3, #0
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	3720      	adds	r7, #32
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}

08007b4e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8007b4e:	b580      	push	{r7, lr}
 8007b50:	b088      	sub	sp, #32
 8007b52:	af00      	add	r7, sp, #0
 8007b54:	6078      	str	r0, [r7, #4]
 8007b56:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d10d      	bne.n	8007b80 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007b64:	693b      	ldr	r3, [r7, #16]
 8007b66:	691b      	ldr	r3, [r3, #16]
 8007b68:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007b6a:	69bb      	ldr	r3, [r7, #24]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d004      	beq.n	8007b7a <create_chain+0x2c>
 8007b70:	693b      	ldr	r3, [r7, #16]
 8007b72:	699b      	ldr	r3, [r3, #24]
 8007b74:	69ba      	ldr	r2, [r7, #24]
 8007b76:	429a      	cmp	r2, r3
 8007b78:	d31b      	bcc.n	8007bb2 <create_chain+0x64>
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	61bb      	str	r3, [r7, #24]
 8007b7e:	e018      	b.n	8007bb2 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007b80:	6839      	ldr	r1, [r7, #0]
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f7ff fd97 	bl	80076b6 <get_fat>
 8007b88:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	2b01      	cmp	r3, #1
 8007b8e:	d801      	bhi.n	8007b94 <create_chain+0x46>
 8007b90:	2301      	movs	r3, #1
 8007b92:	e070      	b.n	8007c76 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b9a:	d101      	bne.n	8007ba0 <create_chain+0x52>
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	e06a      	b.n	8007c76 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007ba0:	693b      	ldr	r3, [r7, #16]
 8007ba2:	699b      	ldr	r3, [r3, #24]
 8007ba4:	68fa      	ldr	r2, [r7, #12]
 8007ba6:	429a      	cmp	r2, r3
 8007ba8:	d201      	bcs.n	8007bae <create_chain+0x60>
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	e063      	b.n	8007c76 <create_chain+0x128>
		scl = clst;
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007bb2:	69bb      	ldr	r3, [r7, #24]
 8007bb4:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8007bb6:	69fb      	ldr	r3, [r7, #28]
 8007bb8:	3301      	adds	r3, #1
 8007bba:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007bbc:	693b      	ldr	r3, [r7, #16]
 8007bbe:	699b      	ldr	r3, [r3, #24]
 8007bc0:	69fa      	ldr	r2, [r7, #28]
 8007bc2:	429a      	cmp	r2, r3
 8007bc4:	d307      	bcc.n	8007bd6 <create_chain+0x88>
				ncl = 2;
 8007bc6:	2302      	movs	r3, #2
 8007bc8:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8007bca:	69fa      	ldr	r2, [r7, #28]
 8007bcc:	69bb      	ldr	r3, [r7, #24]
 8007bce:	429a      	cmp	r2, r3
 8007bd0:	d901      	bls.n	8007bd6 <create_chain+0x88>
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	e04f      	b.n	8007c76 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007bd6:	69f9      	ldr	r1, [r7, #28]
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f7ff fd6c 	bl	80076b6 <get_fat>
 8007bde:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d00e      	beq.n	8007c04 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	2b01      	cmp	r3, #1
 8007bea:	d003      	beq.n	8007bf4 <create_chain+0xa6>
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007bf2:	d101      	bne.n	8007bf8 <create_chain+0xaa>
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	e03e      	b.n	8007c76 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8007bf8:	69fa      	ldr	r2, [r7, #28]
 8007bfa:	69bb      	ldr	r3, [r7, #24]
 8007bfc:	429a      	cmp	r2, r3
 8007bfe:	d1da      	bne.n	8007bb6 <create_chain+0x68>
 8007c00:	2300      	movs	r3, #0
 8007c02:	e038      	b.n	8007c76 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8007c04:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007c06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007c0a:	69f9      	ldr	r1, [r7, #28]
 8007c0c:	6938      	ldr	r0, [r7, #16]
 8007c0e:	f7ff fe22 	bl	8007856 <put_fat>
 8007c12:	4603      	mov	r3, r0
 8007c14:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8007c16:	7dfb      	ldrb	r3, [r7, #23]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d109      	bne.n	8007c30 <create_chain+0xe2>
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d006      	beq.n	8007c30 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8007c22:	69fa      	ldr	r2, [r7, #28]
 8007c24:	6839      	ldr	r1, [r7, #0]
 8007c26:	6938      	ldr	r0, [r7, #16]
 8007c28:	f7ff fe15 	bl	8007856 <put_fat>
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8007c30:	7dfb      	ldrb	r3, [r7, #23]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d116      	bne.n	8007c64 <create_chain+0x116>
		fs->last_clst = ncl;
 8007c36:	693b      	ldr	r3, [r7, #16]
 8007c38:	69fa      	ldr	r2, [r7, #28]
 8007c3a:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8007c3c:	693b      	ldr	r3, [r7, #16]
 8007c3e:	695a      	ldr	r2, [r3, #20]
 8007c40:	693b      	ldr	r3, [r7, #16]
 8007c42:	699b      	ldr	r3, [r3, #24]
 8007c44:	3b02      	subs	r3, #2
 8007c46:	429a      	cmp	r2, r3
 8007c48:	d804      	bhi.n	8007c54 <create_chain+0x106>
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	695b      	ldr	r3, [r3, #20]
 8007c4e:	1e5a      	subs	r2, r3, #1
 8007c50:	693b      	ldr	r3, [r7, #16]
 8007c52:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8007c54:	693b      	ldr	r3, [r7, #16]
 8007c56:	791b      	ldrb	r3, [r3, #4]
 8007c58:	f043 0301 	orr.w	r3, r3, #1
 8007c5c:	b2da      	uxtb	r2, r3
 8007c5e:	693b      	ldr	r3, [r7, #16]
 8007c60:	711a      	strb	r2, [r3, #4]
 8007c62:	e007      	b.n	8007c74 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007c64:	7dfb      	ldrb	r3, [r7, #23]
 8007c66:	2b01      	cmp	r3, #1
 8007c68:	d102      	bne.n	8007c70 <create_chain+0x122>
 8007c6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007c6e:	e000      	b.n	8007c72 <create_chain+0x124>
 8007c70:	2301      	movs	r3, #1
 8007c72:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8007c74:	69fb      	ldr	r3, [r7, #28]
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	3720      	adds	r7, #32
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}

08007c7e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8007c7e:	b480      	push	{r7}
 8007c80:	b087      	sub	sp, #28
 8007c82:	af00      	add	r7, sp, #0
 8007c84:	6078      	str	r0, [r7, #4]
 8007c86:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c92:	3304      	adds	r3, #4
 8007c94:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	899b      	ldrh	r3, [r3, #12]
 8007c9a:	461a      	mov	r2, r3
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ca2:	68fa      	ldr	r2, [r7, #12]
 8007ca4:	8952      	ldrh	r2, [r2, #10]
 8007ca6:	fbb3 f3f2 	udiv	r3, r3, r2
 8007caa:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007cac:	693b      	ldr	r3, [r7, #16]
 8007cae:	1d1a      	adds	r2, r3, #4
 8007cb0:	613a      	str	r2, [r7, #16]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d101      	bne.n	8007cc0 <clmt_clust+0x42>
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	e010      	b.n	8007ce2 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8007cc0:	697a      	ldr	r2, [r7, #20]
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	429a      	cmp	r2, r3
 8007cc6:	d307      	bcc.n	8007cd8 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8007cc8:	697a      	ldr	r2, [r7, #20]
 8007cca:	68bb      	ldr	r3, [r7, #8]
 8007ccc:	1ad3      	subs	r3, r2, r3
 8007cce:	617b      	str	r3, [r7, #20]
 8007cd0:	693b      	ldr	r3, [r7, #16]
 8007cd2:	3304      	adds	r3, #4
 8007cd4:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007cd6:	e7e9      	b.n	8007cac <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8007cd8:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007cda:	693b      	ldr	r3, [r7, #16]
 8007cdc:	681a      	ldr	r2, [r3, #0]
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	4413      	add	r3, r2
}
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	371c      	adds	r7, #28
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cec:	4770      	bx	lr

08007cee <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007cee:	b580      	push	{r7, lr}
 8007cf0:	b086      	sub	sp, #24
 8007cf2:	af00      	add	r7, sp, #0
 8007cf4:	6078      	str	r0, [r7, #4]
 8007cf6:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007d04:	d204      	bcs.n	8007d10 <dir_sdi+0x22>
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	f003 031f 	and.w	r3, r3, #31
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d001      	beq.n	8007d14 <dir_sdi+0x26>
		return FR_INT_ERR;
 8007d10:	2302      	movs	r3, #2
 8007d12:	e071      	b.n	8007df8 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	683a      	ldr	r2, [r7, #0]
 8007d18:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	689b      	ldr	r3, [r3, #8]
 8007d1e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007d20:	697b      	ldr	r3, [r7, #20]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d106      	bne.n	8007d34 <dir_sdi+0x46>
 8007d26:	693b      	ldr	r3, [r7, #16]
 8007d28:	781b      	ldrb	r3, [r3, #0]
 8007d2a:	2b02      	cmp	r3, #2
 8007d2c:	d902      	bls.n	8007d34 <dir_sdi+0x46>
		clst = fs->dirbase;
 8007d2e:	693b      	ldr	r3, [r7, #16]
 8007d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d32:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007d34:	697b      	ldr	r3, [r7, #20]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d10c      	bne.n	8007d54 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	095b      	lsrs	r3, r3, #5
 8007d3e:	693a      	ldr	r2, [r7, #16]
 8007d40:	8912      	ldrh	r2, [r2, #8]
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d301      	bcc.n	8007d4a <dir_sdi+0x5c>
 8007d46:	2302      	movs	r3, #2
 8007d48:	e056      	b.n	8007df8 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8007d4a:	693b      	ldr	r3, [r7, #16]
 8007d4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	61da      	str	r2, [r3, #28]
 8007d52:	e02d      	b.n	8007db0 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	895b      	ldrh	r3, [r3, #10]
 8007d58:	461a      	mov	r2, r3
 8007d5a:	693b      	ldr	r3, [r7, #16]
 8007d5c:	899b      	ldrh	r3, [r3, #12]
 8007d5e:	fb03 f302 	mul.w	r3, r3, r2
 8007d62:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007d64:	e019      	b.n	8007d9a <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6979      	ldr	r1, [r7, #20]
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f7ff fca3 	bl	80076b6 <get_fat>
 8007d70:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d78:	d101      	bne.n	8007d7e <dir_sdi+0x90>
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	e03c      	b.n	8007df8 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	2b01      	cmp	r3, #1
 8007d82:	d904      	bls.n	8007d8e <dir_sdi+0xa0>
 8007d84:	693b      	ldr	r3, [r7, #16]
 8007d86:	699b      	ldr	r3, [r3, #24]
 8007d88:	697a      	ldr	r2, [r7, #20]
 8007d8a:	429a      	cmp	r2, r3
 8007d8c:	d301      	bcc.n	8007d92 <dir_sdi+0xa4>
 8007d8e:	2302      	movs	r3, #2
 8007d90:	e032      	b.n	8007df8 <dir_sdi+0x10a>
			ofs -= csz;
 8007d92:	683a      	ldr	r2, [r7, #0]
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	1ad3      	subs	r3, r2, r3
 8007d98:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007d9a:	683a      	ldr	r2, [r7, #0]
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	429a      	cmp	r2, r3
 8007da0:	d2e1      	bcs.n	8007d66 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8007da2:	6979      	ldr	r1, [r7, #20]
 8007da4:	6938      	ldr	r0, [r7, #16]
 8007da6:	f7ff fc67 	bl	8007678 <clust2sect>
 8007daa:	4602      	mov	r2, r0
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	697a      	ldr	r2, [r7, #20]
 8007db4:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	69db      	ldr	r3, [r3, #28]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d101      	bne.n	8007dc2 <dir_sdi+0xd4>
 8007dbe:	2302      	movs	r3, #2
 8007dc0:	e01a      	b.n	8007df8 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	69da      	ldr	r2, [r3, #28]
 8007dc6:	693b      	ldr	r3, [r7, #16]
 8007dc8:	899b      	ldrh	r3, [r3, #12]
 8007dca:	4619      	mov	r1, r3
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	fbb3 f3f1 	udiv	r3, r3, r1
 8007dd2:	441a      	add	r2, r3
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007dd8:	693b      	ldr	r3, [r7, #16]
 8007dda:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007dde:	693b      	ldr	r3, [r7, #16]
 8007de0:	899b      	ldrh	r3, [r3, #12]
 8007de2:	461a      	mov	r2, r3
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	fbb3 f0f2 	udiv	r0, r3, r2
 8007dea:	fb02 f200 	mul.w	r2, r2, r0
 8007dee:	1a9b      	subs	r3, r3, r2
 8007df0:	18ca      	adds	r2, r1, r3
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007df6:	2300      	movs	r3, #0
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	3718      	adds	r7, #24
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd80      	pop	{r7, pc}

08007e00 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b086      	sub	sp, #24
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
 8007e08:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	695b      	ldr	r3, [r3, #20]
 8007e14:	3320      	adds	r3, #32
 8007e16:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	69db      	ldr	r3, [r3, #28]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d003      	beq.n	8007e28 <dir_next+0x28>
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007e26:	d301      	bcc.n	8007e2c <dir_next+0x2c>
 8007e28:	2304      	movs	r3, #4
 8007e2a:	e0bb      	b.n	8007fa4 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	899b      	ldrh	r3, [r3, #12]
 8007e30:	461a      	mov	r2, r3
 8007e32:	68bb      	ldr	r3, [r7, #8]
 8007e34:	fbb3 f1f2 	udiv	r1, r3, r2
 8007e38:	fb02 f201 	mul.w	r2, r2, r1
 8007e3c:	1a9b      	subs	r3, r3, r2
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	f040 809d 	bne.w	8007f7e <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	69db      	ldr	r3, [r3, #28]
 8007e48:	1c5a      	adds	r2, r3, #1
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	699b      	ldr	r3, [r3, #24]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d10b      	bne.n	8007e6e <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	095b      	lsrs	r3, r3, #5
 8007e5a:	68fa      	ldr	r2, [r7, #12]
 8007e5c:	8912      	ldrh	r2, [r2, #8]
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	f0c0 808d 	bcc.w	8007f7e <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2200      	movs	r2, #0
 8007e68:	61da      	str	r2, [r3, #28]
 8007e6a:	2304      	movs	r3, #4
 8007e6c:	e09a      	b.n	8007fa4 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	899b      	ldrh	r3, [r3, #12]
 8007e72:	461a      	mov	r2, r3
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e7a:	68fa      	ldr	r2, [r7, #12]
 8007e7c:	8952      	ldrh	r2, [r2, #10]
 8007e7e:	3a01      	subs	r2, #1
 8007e80:	4013      	ands	r3, r2
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d17b      	bne.n	8007f7e <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007e86:	687a      	ldr	r2, [r7, #4]
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	699b      	ldr	r3, [r3, #24]
 8007e8c:	4619      	mov	r1, r3
 8007e8e:	4610      	mov	r0, r2
 8007e90:	f7ff fc11 	bl	80076b6 <get_fat>
 8007e94:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007e96:	697b      	ldr	r3, [r7, #20]
 8007e98:	2b01      	cmp	r3, #1
 8007e9a:	d801      	bhi.n	8007ea0 <dir_next+0xa0>
 8007e9c:	2302      	movs	r3, #2
 8007e9e:	e081      	b.n	8007fa4 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007ea0:	697b      	ldr	r3, [r7, #20]
 8007ea2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ea6:	d101      	bne.n	8007eac <dir_next+0xac>
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	e07b      	b.n	8007fa4 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	699b      	ldr	r3, [r3, #24]
 8007eb0:	697a      	ldr	r2, [r7, #20]
 8007eb2:	429a      	cmp	r2, r3
 8007eb4:	d359      	bcc.n	8007f6a <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d104      	bne.n	8007ec6 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	61da      	str	r2, [r3, #28]
 8007ec2:	2304      	movs	r3, #4
 8007ec4:	e06e      	b.n	8007fa4 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007ec6:	687a      	ldr	r2, [r7, #4]
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	699b      	ldr	r3, [r3, #24]
 8007ecc:	4619      	mov	r1, r3
 8007ece:	4610      	mov	r0, r2
 8007ed0:	f7ff fe3d 	bl	8007b4e <create_chain>
 8007ed4:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007ed6:	697b      	ldr	r3, [r7, #20]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d101      	bne.n	8007ee0 <dir_next+0xe0>
 8007edc:	2307      	movs	r3, #7
 8007ede:	e061      	b.n	8007fa4 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	2b01      	cmp	r3, #1
 8007ee4:	d101      	bne.n	8007eea <dir_next+0xea>
 8007ee6:	2302      	movs	r3, #2
 8007ee8:	e05c      	b.n	8007fa4 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ef0:	d101      	bne.n	8007ef6 <dir_next+0xf6>
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	e056      	b.n	8007fa4 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007ef6:	68f8      	ldr	r0, [r7, #12]
 8007ef8:	f7ff fadc 	bl	80074b4 <sync_window>
 8007efc:	4603      	mov	r3, r0
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d001      	beq.n	8007f06 <dir_next+0x106>
 8007f02:	2301      	movs	r3, #1
 8007f04:	e04e      	b.n	8007fa4 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	899b      	ldrh	r3, [r3, #12]
 8007f10:	461a      	mov	r2, r3
 8007f12:	2100      	movs	r1, #0
 8007f14:	f7ff f905 	bl	8007122 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007f18:	2300      	movs	r3, #0
 8007f1a:	613b      	str	r3, [r7, #16]
 8007f1c:	6979      	ldr	r1, [r7, #20]
 8007f1e:	68f8      	ldr	r0, [r7, #12]
 8007f20:	f7ff fbaa 	bl	8007678 <clust2sect>
 8007f24:	4602      	mov	r2, r0
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	631a      	str	r2, [r3, #48]	; 0x30
 8007f2a:	e012      	b.n	8007f52 <dir_next+0x152>
						fs->wflag = 1;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	2201      	movs	r2, #1
 8007f30:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007f32:	68f8      	ldr	r0, [r7, #12]
 8007f34:	f7ff fabe 	bl	80074b4 <sync_window>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d001      	beq.n	8007f42 <dir_next+0x142>
 8007f3e:	2301      	movs	r3, #1
 8007f40:	e030      	b.n	8007fa4 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007f42:	693b      	ldr	r3, [r7, #16]
 8007f44:	3301      	adds	r3, #1
 8007f46:	613b      	str	r3, [r7, #16]
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f4c:	1c5a      	adds	r2, r3, #1
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	631a      	str	r2, [r3, #48]	; 0x30
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	895b      	ldrh	r3, [r3, #10]
 8007f56:	461a      	mov	r2, r3
 8007f58:	693b      	ldr	r3, [r7, #16]
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d3e6      	bcc.n	8007f2c <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f62:	693b      	ldr	r3, [r7, #16]
 8007f64:	1ad2      	subs	r2, r2, r3
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	697a      	ldr	r2, [r7, #20]
 8007f6e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8007f70:	6979      	ldr	r1, [r7, #20]
 8007f72:	68f8      	ldr	r0, [r7, #12]
 8007f74:	f7ff fb80 	bl	8007678 <clust2sect>
 8007f78:	4602      	mov	r2, r0
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	68ba      	ldr	r2, [r7, #8]
 8007f82:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	899b      	ldrh	r3, [r3, #12]
 8007f8e:	461a      	mov	r2, r3
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	fbb3 f0f2 	udiv	r0, r3, r2
 8007f96:	fb02 f200 	mul.w	r2, r2, r0
 8007f9a:	1a9b      	subs	r3, r3, r2
 8007f9c:	18ca      	adds	r2, r1, r3
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007fa2:	2300      	movs	r3, #0
}
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	3718      	adds	r7, #24
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bd80      	pop	{r7, pc}

08007fac <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b086      	sub	sp, #24
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
 8007fb4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007fbc:	2100      	movs	r1, #0
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f7ff fe95 	bl	8007cee <dir_sdi>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007fc8:	7dfb      	ldrb	r3, [r7, #23]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d12b      	bne.n	8008026 <dir_alloc+0x7a>
		n = 0;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	69db      	ldr	r3, [r3, #28]
 8007fd6:	4619      	mov	r1, r3
 8007fd8:	68f8      	ldr	r0, [r7, #12]
 8007fda:	f7ff faaf 	bl	800753c <move_window>
 8007fde:	4603      	mov	r3, r0
 8007fe0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007fe2:	7dfb      	ldrb	r3, [r7, #23]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d11d      	bne.n	8008024 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6a1b      	ldr	r3, [r3, #32]
 8007fec:	781b      	ldrb	r3, [r3, #0]
 8007fee:	2be5      	cmp	r3, #229	; 0xe5
 8007ff0:	d004      	beq.n	8007ffc <dir_alloc+0x50>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6a1b      	ldr	r3, [r3, #32]
 8007ff6:	781b      	ldrb	r3, [r3, #0]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d107      	bne.n	800800c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007ffc:	693b      	ldr	r3, [r7, #16]
 8007ffe:	3301      	adds	r3, #1
 8008000:	613b      	str	r3, [r7, #16]
 8008002:	693a      	ldr	r2, [r7, #16]
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	429a      	cmp	r2, r3
 8008008:	d102      	bne.n	8008010 <dir_alloc+0x64>
 800800a:	e00c      	b.n	8008026 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800800c:	2300      	movs	r3, #0
 800800e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8008010:	2101      	movs	r1, #1
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f7ff fef4 	bl	8007e00 <dir_next>
 8008018:	4603      	mov	r3, r0
 800801a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800801c:	7dfb      	ldrb	r3, [r7, #23]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d0d7      	beq.n	8007fd2 <dir_alloc+0x26>
 8008022:	e000      	b.n	8008026 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8008024:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008026:	7dfb      	ldrb	r3, [r7, #23]
 8008028:	2b04      	cmp	r3, #4
 800802a:	d101      	bne.n	8008030 <dir_alloc+0x84>
 800802c:	2307      	movs	r3, #7
 800802e:	75fb      	strb	r3, [r7, #23]
	return res;
 8008030:	7dfb      	ldrb	r3, [r7, #23]
}
 8008032:	4618      	mov	r0, r3
 8008034:	3718      	adds	r7, #24
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}

0800803a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800803a:	b580      	push	{r7, lr}
 800803c:	b084      	sub	sp, #16
 800803e:	af00      	add	r7, sp, #0
 8008040:	6078      	str	r0, [r7, #4]
 8008042:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	331a      	adds	r3, #26
 8008048:	4618      	mov	r0, r3
 800804a:	f7fe ffc7 	bl	8006fdc <ld_word>
 800804e:	4603      	mov	r3, r0
 8008050:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	781b      	ldrb	r3, [r3, #0]
 8008056:	2b03      	cmp	r3, #3
 8008058:	d109      	bne.n	800806e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	3314      	adds	r3, #20
 800805e:	4618      	mov	r0, r3
 8008060:	f7fe ffbc 	bl	8006fdc <ld_word>
 8008064:	4603      	mov	r3, r0
 8008066:	041b      	lsls	r3, r3, #16
 8008068:	68fa      	ldr	r2, [r7, #12]
 800806a:	4313      	orrs	r3, r2
 800806c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800806e:	68fb      	ldr	r3, [r7, #12]
}
 8008070:	4618      	mov	r0, r3
 8008072:	3710      	adds	r7, #16
 8008074:	46bd      	mov	sp, r7
 8008076:	bd80      	pop	{r7, pc}

08008078 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b084      	sub	sp, #16
 800807c:	af00      	add	r7, sp, #0
 800807e:	60f8      	str	r0, [r7, #12]
 8008080:	60b9      	str	r1, [r7, #8]
 8008082:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	331a      	adds	r3, #26
 8008088:	687a      	ldr	r2, [r7, #4]
 800808a:	b292      	uxth	r2, r2
 800808c:	4611      	mov	r1, r2
 800808e:	4618      	mov	r0, r3
 8008090:	f7fe ffdf 	bl	8007052 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	781b      	ldrb	r3, [r3, #0]
 8008098:	2b03      	cmp	r3, #3
 800809a:	d109      	bne.n	80080b0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	f103 0214 	add.w	r2, r3, #20
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	0c1b      	lsrs	r3, r3, #16
 80080a6:	b29b      	uxth	r3, r3
 80080a8:	4619      	mov	r1, r3
 80080aa:	4610      	mov	r0, r2
 80080ac:	f7fe ffd1 	bl	8007052 <st_word>
	}
}
 80080b0:	bf00      	nop
 80080b2:	3710      	adds	r7, #16
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}

080080b8 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b086      	sub	sp, #24
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80080c6:	2100      	movs	r1, #0
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f7ff fe10 	bl	8007cee <dir_sdi>
 80080ce:	4603      	mov	r3, r0
 80080d0:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80080d2:	7dfb      	ldrb	r3, [r7, #23]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d001      	beq.n	80080dc <dir_find+0x24>
 80080d8:	7dfb      	ldrb	r3, [r7, #23]
 80080da:	e03e      	b.n	800815a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	69db      	ldr	r3, [r3, #28]
 80080e0:	4619      	mov	r1, r3
 80080e2:	6938      	ldr	r0, [r7, #16]
 80080e4:	f7ff fa2a 	bl	800753c <move_window>
 80080e8:	4603      	mov	r3, r0
 80080ea:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80080ec:	7dfb      	ldrb	r3, [r7, #23]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d12f      	bne.n	8008152 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6a1b      	ldr	r3, [r3, #32]
 80080f6:	781b      	ldrb	r3, [r3, #0]
 80080f8:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80080fa:	7bfb      	ldrb	r3, [r7, #15]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d102      	bne.n	8008106 <dir_find+0x4e>
 8008100:	2304      	movs	r3, #4
 8008102:	75fb      	strb	r3, [r7, #23]
 8008104:	e028      	b.n	8008158 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6a1b      	ldr	r3, [r3, #32]
 800810a:	330b      	adds	r3, #11
 800810c:	781b      	ldrb	r3, [r3, #0]
 800810e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008112:	b2da      	uxtb	r2, r3
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6a1b      	ldr	r3, [r3, #32]
 800811c:	330b      	adds	r3, #11
 800811e:	781b      	ldrb	r3, [r3, #0]
 8008120:	f003 0308 	and.w	r3, r3, #8
 8008124:	2b00      	cmp	r3, #0
 8008126:	d10a      	bne.n	800813e <dir_find+0x86>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6a18      	ldr	r0, [r3, #32]
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	3324      	adds	r3, #36	; 0x24
 8008130:	220b      	movs	r2, #11
 8008132:	4619      	mov	r1, r3
 8008134:	f7ff f80f 	bl	8007156 <mem_cmp>
 8008138:	4603      	mov	r3, r0
 800813a:	2b00      	cmp	r3, #0
 800813c:	d00b      	beq.n	8008156 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800813e:	2100      	movs	r1, #0
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	f7ff fe5d 	bl	8007e00 <dir_next>
 8008146:	4603      	mov	r3, r0
 8008148:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800814a:	7dfb      	ldrb	r3, [r7, #23]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d0c5      	beq.n	80080dc <dir_find+0x24>
 8008150:	e002      	b.n	8008158 <dir_find+0xa0>
		if (res != FR_OK) break;
 8008152:	bf00      	nop
 8008154:	e000      	b.n	8008158 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008156:	bf00      	nop

	return res;
 8008158:	7dfb      	ldrb	r3, [r7, #23]
}
 800815a:	4618      	mov	r0, r3
 800815c:	3718      	adds	r7, #24
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}

08008162 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8008162:	b580      	push	{r7, lr}
 8008164:	b084      	sub	sp, #16
 8008166:	af00      	add	r7, sp, #0
 8008168:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8008170:	2101      	movs	r1, #1
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f7ff ff1a 	bl	8007fac <dir_alloc>
 8008178:	4603      	mov	r3, r0
 800817a:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800817c:	7bfb      	ldrb	r3, [r7, #15]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d11c      	bne.n	80081bc <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	69db      	ldr	r3, [r3, #28]
 8008186:	4619      	mov	r1, r3
 8008188:	68b8      	ldr	r0, [r7, #8]
 800818a:	f7ff f9d7 	bl	800753c <move_window>
 800818e:	4603      	mov	r3, r0
 8008190:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008192:	7bfb      	ldrb	r3, [r7, #15]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d111      	bne.n	80081bc <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6a1b      	ldr	r3, [r3, #32]
 800819c:	2220      	movs	r2, #32
 800819e:	2100      	movs	r1, #0
 80081a0:	4618      	mov	r0, r3
 80081a2:	f7fe ffbe 	bl	8007122 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6a18      	ldr	r0, [r3, #32]
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	3324      	adds	r3, #36	; 0x24
 80081ae:	220b      	movs	r2, #11
 80081b0:	4619      	mov	r1, r3
 80081b2:	f7fe ff95 	bl	80070e0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	2201      	movs	r2, #1
 80081ba:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80081bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80081be:	4618      	mov	r0, r3
 80081c0:	3710      	adds	r7, #16
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}
	...

080081c8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b088      	sub	sp, #32
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
 80081d0:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	60fb      	str	r3, [r7, #12]
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	3324      	adds	r3, #36	; 0x24
 80081dc:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80081de:	220b      	movs	r2, #11
 80081e0:	2120      	movs	r1, #32
 80081e2:	68b8      	ldr	r0, [r7, #8]
 80081e4:	f7fe ff9d 	bl	8007122 <mem_set>
	si = i = 0; ni = 8;
 80081e8:	2300      	movs	r3, #0
 80081ea:	613b      	str	r3, [r7, #16]
 80081ec:	693b      	ldr	r3, [r7, #16]
 80081ee:	617b      	str	r3, [r7, #20]
 80081f0:	2308      	movs	r3, #8
 80081f2:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80081f4:	697b      	ldr	r3, [r7, #20]
 80081f6:	1c5a      	adds	r2, r3, #1
 80081f8:	617a      	str	r2, [r7, #20]
 80081fa:	68fa      	ldr	r2, [r7, #12]
 80081fc:	4413      	add	r3, r2
 80081fe:	781b      	ldrb	r3, [r3, #0]
 8008200:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008202:	7ffb      	ldrb	r3, [r7, #31]
 8008204:	2b20      	cmp	r3, #32
 8008206:	d94e      	bls.n	80082a6 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8008208:	7ffb      	ldrb	r3, [r7, #31]
 800820a:	2b2f      	cmp	r3, #47	; 0x2f
 800820c:	d006      	beq.n	800821c <create_name+0x54>
 800820e:	7ffb      	ldrb	r3, [r7, #31]
 8008210:	2b5c      	cmp	r3, #92	; 0x5c
 8008212:	d110      	bne.n	8008236 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8008214:	e002      	b.n	800821c <create_name+0x54>
 8008216:	697b      	ldr	r3, [r7, #20]
 8008218:	3301      	adds	r3, #1
 800821a:	617b      	str	r3, [r7, #20]
 800821c:	68fa      	ldr	r2, [r7, #12]
 800821e:	697b      	ldr	r3, [r7, #20]
 8008220:	4413      	add	r3, r2
 8008222:	781b      	ldrb	r3, [r3, #0]
 8008224:	2b2f      	cmp	r3, #47	; 0x2f
 8008226:	d0f6      	beq.n	8008216 <create_name+0x4e>
 8008228:	68fa      	ldr	r2, [r7, #12]
 800822a:	697b      	ldr	r3, [r7, #20]
 800822c:	4413      	add	r3, r2
 800822e:	781b      	ldrb	r3, [r3, #0]
 8008230:	2b5c      	cmp	r3, #92	; 0x5c
 8008232:	d0f0      	beq.n	8008216 <create_name+0x4e>
			break;
 8008234:	e038      	b.n	80082a8 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8008236:	7ffb      	ldrb	r3, [r7, #31]
 8008238:	2b2e      	cmp	r3, #46	; 0x2e
 800823a:	d003      	beq.n	8008244 <create_name+0x7c>
 800823c:	693a      	ldr	r2, [r7, #16]
 800823e:	69bb      	ldr	r3, [r7, #24]
 8008240:	429a      	cmp	r2, r3
 8008242:	d30c      	bcc.n	800825e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8008244:	69bb      	ldr	r3, [r7, #24]
 8008246:	2b0b      	cmp	r3, #11
 8008248:	d002      	beq.n	8008250 <create_name+0x88>
 800824a:	7ffb      	ldrb	r3, [r7, #31]
 800824c:	2b2e      	cmp	r3, #46	; 0x2e
 800824e:	d001      	beq.n	8008254 <create_name+0x8c>
 8008250:	2306      	movs	r3, #6
 8008252:	e044      	b.n	80082de <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8008254:	2308      	movs	r3, #8
 8008256:	613b      	str	r3, [r7, #16]
 8008258:	230b      	movs	r3, #11
 800825a:	61bb      	str	r3, [r7, #24]
			continue;
 800825c:	e022      	b.n	80082a4 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800825e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008262:	2b00      	cmp	r3, #0
 8008264:	da04      	bge.n	8008270 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8008266:	7ffb      	ldrb	r3, [r7, #31]
 8008268:	3b80      	subs	r3, #128	; 0x80
 800826a:	4a1f      	ldr	r2, [pc, #124]	; (80082e8 <create_name+0x120>)
 800826c:	5cd3      	ldrb	r3, [r2, r3]
 800826e:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8008270:	7ffb      	ldrb	r3, [r7, #31]
 8008272:	4619      	mov	r1, r3
 8008274:	481d      	ldr	r0, [pc, #116]	; (80082ec <create_name+0x124>)
 8008276:	f7fe ff95 	bl	80071a4 <chk_chr>
 800827a:	4603      	mov	r3, r0
 800827c:	2b00      	cmp	r3, #0
 800827e:	d001      	beq.n	8008284 <create_name+0xbc>
 8008280:	2306      	movs	r3, #6
 8008282:	e02c      	b.n	80082de <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8008284:	7ffb      	ldrb	r3, [r7, #31]
 8008286:	2b60      	cmp	r3, #96	; 0x60
 8008288:	d905      	bls.n	8008296 <create_name+0xce>
 800828a:	7ffb      	ldrb	r3, [r7, #31]
 800828c:	2b7a      	cmp	r3, #122	; 0x7a
 800828e:	d802      	bhi.n	8008296 <create_name+0xce>
 8008290:	7ffb      	ldrb	r3, [r7, #31]
 8008292:	3b20      	subs	r3, #32
 8008294:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8008296:	693b      	ldr	r3, [r7, #16]
 8008298:	1c5a      	adds	r2, r3, #1
 800829a:	613a      	str	r2, [r7, #16]
 800829c:	68ba      	ldr	r2, [r7, #8]
 800829e:	4413      	add	r3, r2
 80082a0:	7ffa      	ldrb	r2, [r7, #31]
 80082a2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80082a4:	e7a6      	b.n	80081f4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80082a6:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80082a8:	68fa      	ldr	r2, [r7, #12]
 80082aa:	697b      	ldr	r3, [r7, #20]
 80082ac:	441a      	add	r2, r3
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80082b2:	693b      	ldr	r3, [r7, #16]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d101      	bne.n	80082bc <create_name+0xf4>
 80082b8:	2306      	movs	r3, #6
 80082ba:	e010      	b.n	80082de <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	781b      	ldrb	r3, [r3, #0]
 80082c0:	2be5      	cmp	r3, #229	; 0xe5
 80082c2:	d102      	bne.n	80082ca <create_name+0x102>
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	2205      	movs	r2, #5
 80082c8:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80082ca:	7ffb      	ldrb	r3, [r7, #31]
 80082cc:	2b20      	cmp	r3, #32
 80082ce:	d801      	bhi.n	80082d4 <create_name+0x10c>
 80082d0:	2204      	movs	r2, #4
 80082d2:	e000      	b.n	80082d6 <create_name+0x10e>
 80082d4:	2200      	movs	r2, #0
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	330b      	adds	r3, #11
 80082da:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80082dc:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80082de:	4618      	mov	r0, r3
 80082e0:	3720      	adds	r7, #32
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}
 80082e6:	bf00      	nop
 80082e8:	0800a7b8 	.word	0x0800a7b8
 80082ec:	0800a748 	.word	0x0800a748

080082f0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b086      	sub	sp, #24
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
 80082f8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80082fe:	693b      	ldr	r3, [r7, #16]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8008304:	e002      	b.n	800830c <follow_path+0x1c>
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	3301      	adds	r3, #1
 800830a:	603b      	str	r3, [r7, #0]
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	781b      	ldrb	r3, [r3, #0]
 8008310:	2b2f      	cmp	r3, #47	; 0x2f
 8008312:	d0f8      	beq.n	8008306 <follow_path+0x16>
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	781b      	ldrb	r3, [r3, #0]
 8008318:	2b5c      	cmp	r3, #92	; 0x5c
 800831a:	d0f4      	beq.n	8008306 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800831c:	693b      	ldr	r3, [r7, #16]
 800831e:	2200      	movs	r2, #0
 8008320:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	781b      	ldrb	r3, [r3, #0]
 8008326:	2b1f      	cmp	r3, #31
 8008328:	d80a      	bhi.n	8008340 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2280      	movs	r2, #128	; 0x80
 800832e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8008332:	2100      	movs	r1, #0
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f7ff fcda 	bl	8007cee <dir_sdi>
 800833a:	4603      	mov	r3, r0
 800833c:	75fb      	strb	r3, [r7, #23]
 800833e:	e048      	b.n	80083d2 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008340:	463b      	mov	r3, r7
 8008342:	4619      	mov	r1, r3
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f7ff ff3f 	bl	80081c8 <create_name>
 800834a:	4603      	mov	r3, r0
 800834c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800834e:	7dfb      	ldrb	r3, [r7, #23]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d139      	bne.n	80083c8 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f7ff feaf 	bl	80080b8 <dir_find>
 800835a:	4603      	mov	r3, r0
 800835c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008364:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8008366:	7dfb      	ldrb	r3, [r7, #23]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d00a      	beq.n	8008382 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800836c:	7dfb      	ldrb	r3, [r7, #23]
 800836e:	2b04      	cmp	r3, #4
 8008370:	d12c      	bne.n	80083cc <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008372:	7afb      	ldrb	r3, [r7, #11]
 8008374:	f003 0304 	and.w	r3, r3, #4
 8008378:	2b00      	cmp	r3, #0
 800837a:	d127      	bne.n	80083cc <follow_path+0xdc>
 800837c:	2305      	movs	r3, #5
 800837e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008380:	e024      	b.n	80083cc <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008382:	7afb      	ldrb	r3, [r7, #11]
 8008384:	f003 0304 	and.w	r3, r3, #4
 8008388:	2b00      	cmp	r3, #0
 800838a:	d121      	bne.n	80083d0 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800838c:	693b      	ldr	r3, [r7, #16]
 800838e:	799b      	ldrb	r3, [r3, #6]
 8008390:	f003 0310 	and.w	r3, r3, #16
 8008394:	2b00      	cmp	r3, #0
 8008396:	d102      	bne.n	800839e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8008398:	2305      	movs	r3, #5
 800839a:	75fb      	strb	r3, [r7, #23]
 800839c:	e019      	b.n	80083d2 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	695b      	ldr	r3, [r3, #20]
 80083a8:	68fa      	ldr	r2, [r7, #12]
 80083aa:	8992      	ldrh	r2, [r2, #12]
 80083ac:	fbb3 f0f2 	udiv	r0, r3, r2
 80083b0:	fb02 f200 	mul.w	r2, r2, r0
 80083b4:	1a9b      	subs	r3, r3, r2
 80083b6:	440b      	add	r3, r1
 80083b8:	4619      	mov	r1, r3
 80083ba:	68f8      	ldr	r0, [r7, #12]
 80083bc:	f7ff fe3d 	bl	800803a <ld_clust>
 80083c0:	4602      	mov	r2, r0
 80083c2:	693b      	ldr	r3, [r7, #16]
 80083c4:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80083c6:	e7bb      	b.n	8008340 <follow_path+0x50>
			if (res != FR_OK) break;
 80083c8:	bf00      	nop
 80083ca:	e002      	b.n	80083d2 <follow_path+0xe2>
				break;
 80083cc:	bf00      	nop
 80083ce:	e000      	b.n	80083d2 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80083d0:	bf00      	nop
			}
		}
	}

	return res;
 80083d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	3718      	adds	r7, #24
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}

080083dc <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80083dc:	b480      	push	{r7}
 80083de:	b087      	sub	sp, #28
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80083e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80083e8:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d031      	beq.n	8008456 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	617b      	str	r3, [r7, #20]
 80083f8:	e002      	b.n	8008400 <get_ldnumber+0x24>
 80083fa:	697b      	ldr	r3, [r7, #20]
 80083fc:	3301      	adds	r3, #1
 80083fe:	617b      	str	r3, [r7, #20]
 8008400:	697b      	ldr	r3, [r7, #20]
 8008402:	781b      	ldrb	r3, [r3, #0]
 8008404:	2b20      	cmp	r3, #32
 8008406:	d903      	bls.n	8008410 <get_ldnumber+0x34>
 8008408:	697b      	ldr	r3, [r7, #20]
 800840a:	781b      	ldrb	r3, [r3, #0]
 800840c:	2b3a      	cmp	r3, #58	; 0x3a
 800840e:	d1f4      	bne.n	80083fa <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	781b      	ldrb	r3, [r3, #0]
 8008414:	2b3a      	cmp	r3, #58	; 0x3a
 8008416:	d11c      	bne.n	8008452 <get_ldnumber+0x76>
			tp = *path;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	1c5a      	adds	r2, r3, #1
 8008422:	60fa      	str	r2, [r7, #12]
 8008424:	781b      	ldrb	r3, [r3, #0]
 8008426:	3b30      	subs	r3, #48	; 0x30
 8008428:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	2b09      	cmp	r3, #9
 800842e:	d80e      	bhi.n	800844e <get_ldnumber+0x72>
 8008430:	68fa      	ldr	r2, [r7, #12]
 8008432:	697b      	ldr	r3, [r7, #20]
 8008434:	429a      	cmp	r2, r3
 8008436:	d10a      	bne.n	800844e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d107      	bne.n	800844e <get_ldnumber+0x72>
					vol = (int)i;
 800843e:	68bb      	ldr	r3, [r7, #8]
 8008440:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8008442:	697b      	ldr	r3, [r7, #20]
 8008444:	3301      	adds	r3, #1
 8008446:	617b      	str	r3, [r7, #20]
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	697a      	ldr	r2, [r7, #20]
 800844c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800844e:	693b      	ldr	r3, [r7, #16]
 8008450:	e002      	b.n	8008458 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008452:	2300      	movs	r3, #0
 8008454:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008456:	693b      	ldr	r3, [r7, #16]
}
 8008458:	4618      	mov	r0, r3
 800845a:	371c      	adds	r7, #28
 800845c:	46bd      	mov	sp, r7
 800845e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008462:	4770      	bx	lr

08008464 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b082      	sub	sp, #8
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
 800846c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2200      	movs	r2, #0
 8008472:	70da      	strb	r2, [r3, #3]
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800847a:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800847c:	6839      	ldr	r1, [r7, #0]
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f7ff f85c 	bl	800753c <move_window>
 8008484:	4603      	mov	r3, r0
 8008486:	2b00      	cmp	r3, #0
 8008488:	d001      	beq.n	800848e <check_fs+0x2a>
 800848a:	2304      	movs	r3, #4
 800848c:	e038      	b.n	8008500 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	3334      	adds	r3, #52	; 0x34
 8008492:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008496:	4618      	mov	r0, r3
 8008498:	f7fe fda0 	bl	8006fdc <ld_word>
 800849c:	4603      	mov	r3, r0
 800849e:	461a      	mov	r2, r3
 80084a0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80084a4:	429a      	cmp	r2, r3
 80084a6:	d001      	beq.n	80084ac <check_fs+0x48>
 80084a8:	2303      	movs	r3, #3
 80084aa:	e029      	b.n	8008500 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80084b2:	2be9      	cmp	r3, #233	; 0xe9
 80084b4:	d009      	beq.n	80084ca <check_fs+0x66>
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80084bc:	2beb      	cmp	r3, #235	; 0xeb
 80084be:	d11e      	bne.n	80084fe <check_fs+0x9a>
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80084c6:	2b90      	cmp	r3, #144	; 0x90
 80084c8:	d119      	bne.n	80084fe <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	3334      	adds	r3, #52	; 0x34
 80084ce:	3336      	adds	r3, #54	; 0x36
 80084d0:	4618      	mov	r0, r3
 80084d2:	f7fe fd9b 	bl	800700c <ld_dword>
 80084d6:	4603      	mov	r3, r0
 80084d8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80084dc:	4a0a      	ldr	r2, [pc, #40]	; (8008508 <check_fs+0xa4>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	d101      	bne.n	80084e6 <check_fs+0x82>
 80084e2:	2300      	movs	r3, #0
 80084e4:	e00c      	b.n	8008500 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	3334      	adds	r3, #52	; 0x34
 80084ea:	3352      	adds	r3, #82	; 0x52
 80084ec:	4618      	mov	r0, r3
 80084ee:	f7fe fd8d 	bl	800700c <ld_dword>
 80084f2:	4602      	mov	r2, r0
 80084f4:	4b05      	ldr	r3, [pc, #20]	; (800850c <check_fs+0xa8>)
 80084f6:	429a      	cmp	r2, r3
 80084f8:	d101      	bne.n	80084fe <check_fs+0x9a>
 80084fa:	2300      	movs	r3, #0
 80084fc:	e000      	b.n	8008500 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80084fe:	2302      	movs	r3, #2
}
 8008500:	4618      	mov	r0, r3
 8008502:	3708      	adds	r7, #8
 8008504:	46bd      	mov	sp, r7
 8008506:	bd80      	pop	{r7, pc}
 8008508:	00544146 	.word	0x00544146
 800850c:	33544146 	.word	0x33544146

08008510 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b096      	sub	sp, #88	; 0x58
 8008514:	af00      	add	r7, sp, #0
 8008516:	60f8      	str	r0, [r7, #12]
 8008518:	60b9      	str	r1, [r7, #8]
 800851a:	4613      	mov	r3, r2
 800851c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800851e:	68bb      	ldr	r3, [r7, #8]
 8008520:	2200      	movs	r2, #0
 8008522:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008524:	68f8      	ldr	r0, [r7, #12]
 8008526:	f7ff ff59 	bl	80083dc <get_ldnumber>
 800852a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800852c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800852e:	2b00      	cmp	r3, #0
 8008530:	da01      	bge.n	8008536 <find_volume+0x26>
 8008532:	230b      	movs	r3, #11
 8008534:	e265      	b.n	8008a02 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008536:	4ab0      	ldr	r2, [pc, #704]	; (80087f8 <find_volume+0x2e8>)
 8008538:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800853a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800853e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008542:	2b00      	cmp	r3, #0
 8008544:	d101      	bne.n	800854a <find_volume+0x3a>
 8008546:	230c      	movs	r3, #12
 8008548:	e25b      	b.n	8008a02 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800854e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008550:	79fb      	ldrb	r3, [r7, #7]
 8008552:	f023 0301 	bic.w	r3, r3, #1
 8008556:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800855a:	781b      	ldrb	r3, [r3, #0]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d01a      	beq.n	8008596 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8008560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008562:	785b      	ldrb	r3, [r3, #1]
 8008564:	4618      	mov	r0, r3
 8008566:	f7fe fc9b 	bl	8006ea0 <disk_status>
 800856a:	4603      	mov	r3, r0
 800856c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008570:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008574:	f003 0301 	and.w	r3, r3, #1
 8008578:	2b00      	cmp	r3, #0
 800857a:	d10c      	bne.n	8008596 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800857c:	79fb      	ldrb	r3, [r7, #7]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d007      	beq.n	8008592 <find_volume+0x82>
 8008582:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008586:	f003 0304 	and.w	r3, r3, #4
 800858a:	2b00      	cmp	r3, #0
 800858c:	d001      	beq.n	8008592 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800858e:	230a      	movs	r3, #10
 8008590:	e237      	b.n	8008a02 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8008592:	2300      	movs	r3, #0
 8008594:	e235      	b.n	8008a02 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008598:	2200      	movs	r2, #0
 800859a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800859c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800859e:	b2da      	uxtb	r2, r3
 80085a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085a2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80085a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085a6:	785b      	ldrb	r3, [r3, #1]
 80085a8:	4618      	mov	r0, r3
 80085aa:	f7fe fc93 	bl	8006ed4 <disk_initialize>
 80085ae:	4603      	mov	r3, r0
 80085b0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80085b4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80085b8:	f003 0301 	and.w	r3, r3, #1
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d001      	beq.n	80085c4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80085c0:	2303      	movs	r3, #3
 80085c2:	e21e      	b.n	8008a02 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80085c4:	79fb      	ldrb	r3, [r7, #7]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d007      	beq.n	80085da <find_volume+0xca>
 80085ca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80085ce:	f003 0304 	and.w	r3, r3, #4
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d001      	beq.n	80085da <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80085d6:	230a      	movs	r3, #10
 80085d8:	e213      	b.n	8008a02 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80085da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085dc:	7858      	ldrb	r0, [r3, #1]
 80085de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085e0:	330c      	adds	r3, #12
 80085e2:	461a      	mov	r2, r3
 80085e4:	2102      	movs	r1, #2
 80085e6:	f7fe fcdb 	bl	8006fa0 <disk_ioctl>
 80085ea:	4603      	mov	r3, r0
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d001      	beq.n	80085f4 <find_volume+0xe4>
 80085f0:	2301      	movs	r3, #1
 80085f2:	e206      	b.n	8008a02 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80085f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085f6:	899b      	ldrh	r3, [r3, #12]
 80085f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085fc:	d80d      	bhi.n	800861a <find_volume+0x10a>
 80085fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008600:	899b      	ldrh	r3, [r3, #12]
 8008602:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008606:	d308      	bcc.n	800861a <find_volume+0x10a>
 8008608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800860a:	899b      	ldrh	r3, [r3, #12]
 800860c:	461a      	mov	r2, r3
 800860e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008610:	899b      	ldrh	r3, [r3, #12]
 8008612:	3b01      	subs	r3, #1
 8008614:	4013      	ands	r3, r2
 8008616:	2b00      	cmp	r3, #0
 8008618:	d001      	beq.n	800861e <find_volume+0x10e>
 800861a:	2301      	movs	r3, #1
 800861c:	e1f1      	b.n	8008a02 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800861e:	2300      	movs	r3, #0
 8008620:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8008622:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008624:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008626:	f7ff ff1d 	bl	8008464 <check_fs>
 800862a:	4603      	mov	r3, r0
 800862c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8008630:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008634:	2b02      	cmp	r3, #2
 8008636:	d14b      	bne.n	80086d0 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008638:	2300      	movs	r3, #0
 800863a:	643b      	str	r3, [r7, #64]	; 0x40
 800863c:	e01f      	b.n	800867e <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800863e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008640:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008644:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008646:	011b      	lsls	r3, r3, #4
 8008648:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800864c:	4413      	add	r3, r2
 800864e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008652:	3304      	adds	r3, #4
 8008654:	781b      	ldrb	r3, [r3, #0]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d006      	beq.n	8008668 <find_volume+0x158>
 800865a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800865c:	3308      	adds	r3, #8
 800865e:	4618      	mov	r0, r3
 8008660:	f7fe fcd4 	bl	800700c <ld_dword>
 8008664:	4602      	mov	r2, r0
 8008666:	e000      	b.n	800866a <find_volume+0x15a>
 8008668:	2200      	movs	r2, #0
 800866a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800866c:	009b      	lsls	r3, r3, #2
 800866e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8008672:	440b      	add	r3, r1
 8008674:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008678:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800867a:	3301      	adds	r3, #1
 800867c:	643b      	str	r3, [r7, #64]	; 0x40
 800867e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008680:	2b03      	cmp	r3, #3
 8008682:	d9dc      	bls.n	800863e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8008684:	2300      	movs	r3, #0
 8008686:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8008688:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800868a:	2b00      	cmp	r3, #0
 800868c:	d002      	beq.n	8008694 <find_volume+0x184>
 800868e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008690:	3b01      	subs	r3, #1
 8008692:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8008694:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008696:	009b      	lsls	r3, r3, #2
 8008698:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800869c:	4413      	add	r3, r2
 800869e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80086a2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80086a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d005      	beq.n	80086b6 <find_volume+0x1a6>
 80086aa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80086ac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80086ae:	f7ff fed9 	bl	8008464 <check_fs>
 80086b2:	4603      	mov	r3, r0
 80086b4:	e000      	b.n	80086b8 <find_volume+0x1a8>
 80086b6:	2303      	movs	r3, #3
 80086b8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80086bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80086c0:	2b01      	cmp	r3, #1
 80086c2:	d905      	bls.n	80086d0 <find_volume+0x1c0>
 80086c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086c6:	3301      	adds	r3, #1
 80086c8:	643b      	str	r3, [r7, #64]	; 0x40
 80086ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086cc:	2b03      	cmp	r3, #3
 80086ce:	d9e1      	bls.n	8008694 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80086d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80086d4:	2b04      	cmp	r3, #4
 80086d6:	d101      	bne.n	80086dc <find_volume+0x1cc>
 80086d8:	2301      	movs	r3, #1
 80086da:	e192      	b.n	8008a02 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80086dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80086e0:	2b01      	cmp	r3, #1
 80086e2:	d901      	bls.n	80086e8 <find_volume+0x1d8>
 80086e4:	230d      	movs	r3, #13
 80086e6:	e18c      	b.n	8008a02 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80086e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ea:	3334      	adds	r3, #52	; 0x34
 80086ec:	330b      	adds	r3, #11
 80086ee:	4618      	mov	r0, r3
 80086f0:	f7fe fc74 	bl	8006fdc <ld_word>
 80086f4:	4603      	mov	r3, r0
 80086f6:	461a      	mov	r2, r3
 80086f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086fa:	899b      	ldrh	r3, [r3, #12]
 80086fc:	429a      	cmp	r2, r3
 80086fe:	d001      	beq.n	8008704 <find_volume+0x1f4>
 8008700:	230d      	movs	r3, #13
 8008702:	e17e      	b.n	8008a02 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008706:	3334      	adds	r3, #52	; 0x34
 8008708:	3316      	adds	r3, #22
 800870a:	4618      	mov	r0, r3
 800870c:	f7fe fc66 	bl	8006fdc <ld_word>
 8008710:	4603      	mov	r3, r0
 8008712:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008714:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008716:	2b00      	cmp	r3, #0
 8008718:	d106      	bne.n	8008728 <find_volume+0x218>
 800871a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800871c:	3334      	adds	r3, #52	; 0x34
 800871e:	3324      	adds	r3, #36	; 0x24
 8008720:	4618      	mov	r0, r3
 8008722:	f7fe fc73 	bl	800700c <ld_dword>
 8008726:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8008728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800872a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800872c:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800872e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008730:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8008734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008736:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800873a:	789b      	ldrb	r3, [r3, #2]
 800873c:	2b01      	cmp	r3, #1
 800873e:	d005      	beq.n	800874c <find_volume+0x23c>
 8008740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008742:	789b      	ldrb	r3, [r3, #2]
 8008744:	2b02      	cmp	r3, #2
 8008746:	d001      	beq.n	800874c <find_volume+0x23c>
 8008748:	230d      	movs	r3, #13
 800874a:	e15a      	b.n	8008a02 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800874c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800874e:	789b      	ldrb	r3, [r3, #2]
 8008750:	461a      	mov	r2, r3
 8008752:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008754:	fb02 f303 	mul.w	r3, r2, r3
 8008758:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800875a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800875c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008760:	b29a      	uxth	r2, r3
 8008762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008764:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008768:	895b      	ldrh	r3, [r3, #10]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d008      	beq.n	8008780 <find_volume+0x270>
 800876e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008770:	895b      	ldrh	r3, [r3, #10]
 8008772:	461a      	mov	r2, r3
 8008774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008776:	895b      	ldrh	r3, [r3, #10]
 8008778:	3b01      	subs	r3, #1
 800877a:	4013      	ands	r3, r2
 800877c:	2b00      	cmp	r3, #0
 800877e:	d001      	beq.n	8008784 <find_volume+0x274>
 8008780:	230d      	movs	r3, #13
 8008782:	e13e      	b.n	8008a02 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008786:	3334      	adds	r3, #52	; 0x34
 8008788:	3311      	adds	r3, #17
 800878a:	4618      	mov	r0, r3
 800878c:	f7fe fc26 	bl	8006fdc <ld_word>
 8008790:	4603      	mov	r3, r0
 8008792:	461a      	mov	r2, r3
 8008794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008796:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800879a:	891b      	ldrh	r3, [r3, #8]
 800879c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800879e:	8992      	ldrh	r2, [r2, #12]
 80087a0:	0952      	lsrs	r2, r2, #5
 80087a2:	b292      	uxth	r2, r2
 80087a4:	fbb3 f1f2 	udiv	r1, r3, r2
 80087a8:	fb02 f201 	mul.w	r2, r2, r1
 80087ac:	1a9b      	subs	r3, r3, r2
 80087ae:	b29b      	uxth	r3, r3
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d001      	beq.n	80087b8 <find_volume+0x2a8>
 80087b4:	230d      	movs	r3, #13
 80087b6:	e124      	b.n	8008a02 <find_volume+0x4f2>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80087b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087ba:	3334      	adds	r3, #52	; 0x34
 80087bc:	3313      	adds	r3, #19
 80087be:	4618      	mov	r0, r3
 80087c0:	f7fe fc0c 	bl	8006fdc <ld_word>
 80087c4:	4603      	mov	r3, r0
 80087c6:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80087c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d106      	bne.n	80087dc <find_volume+0x2cc>
 80087ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087d0:	3334      	adds	r3, #52	; 0x34
 80087d2:	3320      	adds	r3, #32
 80087d4:	4618      	mov	r0, r3
 80087d6:	f7fe fc19 	bl	800700c <ld_dword>
 80087da:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80087dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087de:	3334      	adds	r3, #52	; 0x34
 80087e0:	330e      	adds	r3, #14
 80087e2:	4618      	mov	r0, r3
 80087e4:	f7fe fbfa 	bl	8006fdc <ld_word>
 80087e8:	4603      	mov	r3, r0
 80087ea:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80087ec:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d104      	bne.n	80087fc <find_volume+0x2ec>
 80087f2:	230d      	movs	r3, #13
 80087f4:	e105      	b.n	8008a02 <find_volume+0x4f2>
 80087f6:	bf00      	nop
 80087f8:	200019a8 	.word	0x200019a8

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80087fc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80087fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008800:	4413      	add	r3, r2
 8008802:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008804:	8911      	ldrh	r1, [r2, #8]
 8008806:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008808:	8992      	ldrh	r2, [r2, #12]
 800880a:	0952      	lsrs	r2, r2, #5
 800880c:	b292      	uxth	r2, r2
 800880e:	fbb1 f2f2 	udiv	r2, r1, r2
 8008812:	b292      	uxth	r2, r2
 8008814:	4413      	add	r3, r2
 8008816:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8008818:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800881a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800881c:	429a      	cmp	r2, r3
 800881e:	d201      	bcs.n	8008824 <find_volume+0x314>
 8008820:	230d      	movs	r3, #13
 8008822:	e0ee      	b.n	8008a02 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8008824:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008828:	1ad3      	subs	r3, r2, r3
 800882a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800882c:	8952      	ldrh	r2, [r2, #10]
 800882e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008832:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008836:	2b00      	cmp	r3, #0
 8008838:	d101      	bne.n	800883e <find_volume+0x32e>
 800883a:	230d      	movs	r3, #13
 800883c:	e0e1      	b.n	8008a02 <find_volume+0x4f2>
		fmt = FS_FAT32;
 800883e:	2303      	movs	r3, #3
 8008840:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008846:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800884a:	4293      	cmp	r3, r2
 800884c:	d802      	bhi.n	8008854 <find_volume+0x344>
 800884e:	2302      	movs	r3, #2
 8008850:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008856:	f640 72f5 	movw	r2, #4085	; 0xff5
 800885a:	4293      	cmp	r3, r2
 800885c:	d802      	bhi.n	8008864 <find_volume+0x354>
 800885e:	2301      	movs	r3, #1
 8008860:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008866:	1c9a      	adds	r2, r3, #2
 8008868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800886a:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800886c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800886e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008870:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008872:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008874:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008876:	441a      	add	r2, r3
 8008878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800887a:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800887c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800887e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008880:	441a      	add	r2, r3
 8008882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008884:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8008886:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800888a:	2b03      	cmp	r3, #3
 800888c:	d11e      	bne.n	80088cc <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800888e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008890:	3334      	adds	r3, #52	; 0x34
 8008892:	332a      	adds	r3, #42	; 0x2a
 8008894:	4618      	mov	r0, r3
 8008896:	f7fe fba1 	bl	8006fdc <ld_word>
 800889a:	4603      	mov	r3, r0
 800889c:	2b00      	cmp	r3, #0
 800889e:	d001      	beq.n	80088a4 <find_volume+0x394>
 80088a0:	230d      	movs	r3, #13
 80088a2:	e0ae      	b.n	8008a02 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80088a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088a6:	891b      	ldrh	r3, [r3, #8]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d001      	beq.n	80088b0 <find_volume+0x3a0>
 80088ac:	230d      	movs	r3, #13
 80088ae:	e0a8      	b.n	8008a02 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80088b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088b2:	3334      	adds	r3, #52	; 0x34
 80088b4:	332c      	adds	r3, #44	; 0x2c
 80088b6:	4618      	mov	r0, r3
 80088b8:	f7fe fba8 	bl	800700c <ld_dword>
 80088bc:	4602      	mov	r2, r0
 80088be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088c0:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80088c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088c4:	699b      	ldr	r3, [r3, #24]
 80088c6:	009b      	lsls	r3, r3, #2
 80088c8:	647b      	str	r3, [r7, #68]	; 0x44
 80088ca:	e01f      	b.n	800890c <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80088cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088ce:	891b      	ldrh	r3, [r3, #8]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d101      	bne.n	80088d8 <find_volume+0x3c8>
 80088d4:	230d      	movs	r3, #13
 80088d6:	e094      	b.n	8008a02 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80088d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80088dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088de:	441a      	add	r2, r3
 80088e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088e2:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80088e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80088e8:	2b02      	cmp	r3, #2
 80088ea:	d103      	bne.n	80088f4 <find_volume+0x3e4>
 80088ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088ee:	699b      	ldr	r3, [r3, #24]
 80088f0:	005b      	lsls	r3, r3, #1
 80088f2:	e00a      	b.n	800890a <find_volume+0x3fa>
 80088f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088f6:	699a      	ldr	r2, [r3, #24]
 80088f8:	4613      	mov	r3, r2
 80088fa:	005b      	lsls	r3, r3, #1
 80088fc:	4413      	add	r3, r2
 80088fe:	085a      	lsrs	r2, r3, #1
 8008900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008902:	699b      	ldr	r3, [r3, #24]
 8008904:	f003 0301 	and.w	r3, r3, #1
 8008908:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800890a:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800890c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800890e:	69da      	ldr	r2, [r3, #28]
 8008910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008912:	899b      	ldrh	r3, [r3, #12]
 8008914:	4619      	mov	r1, r3
 8008916:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008918:	440b      	add	r3, r1
 800891a:	3b01      	subs	r3, #1
 800891c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800891e:	8989      	ldrh	r1, [r1, #12]
 8008920:	fbb3 f3f1 	udiv	r3, r3, r1
 8008924:	429a      	cmp	r2, r3
 8008926:	d201      	bcs.n	800892c <find_volume+0x41c>
 8008928:	230d      	movs	r3, #13
 800892a:	e06a      	b.n	8008a02 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800892c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800892e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008932:	615a      	str	r2, [r3, #20]
 8008934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008936:	695a      	ldr	r2, [r3, #20]
 8008938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800893a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800893c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800893e:	2280      	movs	r2, #128	; 0x80
 8008940:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008942:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008946:	2b03      	cmp	r3, #3
 8008948:	d149      	bne.n	80089de <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800894a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800894c:	3334      	adds	r3, #52	; 0x34
 800894e:	3330      	adds	r3, #48	; 0x30
 8008950:	4618      	mov	r0, r3
 8008952:	f7fe fb43 	bl	8006fdc <ld_word>
 8008956:	4603      	mov	r3, r0
 8008958:	2b01      	cmp	r3, #1
 800895a:	d140      	bne.n	80089de <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 800895c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800895e:	3301      	adds	r3, #1
 8008960:	4619      	mov	r1, r3
 8008962:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008964:	f7fe fdea 	bl	800753c <move_window>
 8008968:	4603      	mov	r3, r0
 800896a:	2b00      	cmp	r3, #0
 800896c:	d137      	bne.n	80089de <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 800896e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008970:	2200      	movs	r2, #0
 8008972:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008976:	3334      	adds	r3, #52	; 0x34
 8008978:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800897c:	4618      	mov	r0, r3
 800897e:	f7fe fb2d 	bl	8006fdc <ld_word>
 8008982:	4603      	mov	r3, r0
 8008984:	461a      	mov	r2, r3
 8008986:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800898a:	429a      	cmp	r2, r3
 800898c:	d127      	bne.n	80089de <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800898e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008990:	3334      	adds	r3, #52	; 0x34
 8008992:	4618      	mov	r0, r3
 8008994:	f7fe fb3a 	bl	800700c <ld_dword>
 8008998:	4602      	mov	r2, r0
 800899a:	4b1c      	ldr	r3, [pc, #112]	; (8008a0c <find_volume+0x4fc>)
 800899c:	429a      	cmp	r2, r3
 800899e:	d11e      	bne.n	80089de <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80089a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089a2:	3334      	adds	r3, #52	; 0x34
 80089a4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80089a8:	4618      	mov	r0, r3
 80089aa:	f7fe fb2f 	bl	800700c <ld_dword>
 80089ae:	4602      	mov	r2, r0
 80089b0:	4b17      	ldr	r3, [pc, #92]	; (8008a10 <find_volume+0x500>)
 80089b2:	429a      	cmp	r2, r3
 80089b4:	d113      	bne.n	80089de <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80089b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089b8:	3334      	adds	r3, #52	; 0x34
 80089ba:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80089be:	4618      	mov	r0, r3
 80089c0:	f7fe fb24 	bl	800700c <ld_dword>
 80089c4:	4602      	mov	r2, r0
 80089c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089c8:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80089ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089cc:	3334      	adds	r3, #52	; 0x34
 80089ce:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80089d2:	4618      	mov	r0, r3
 80089d4:	f7fe fb1a 	bl	800700c <ld_dword>
 80089d8:	4602      	mov	r2, r0
 80089da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089dc:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80089de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089e0:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80089e4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80089e6:	4b0b      	ldr	r3, [pc, #44]	; (8008a14 <find_volume+0x504>)
 80089e8:	881b      	ldrh	r3, [r3, #0]
 80089ea:	3301      	adds	r3, #1
 80089ec:	b29a      	uxth	r2, r3
 80089ee:	4b09      	ldr	r3, [pc, #36]	; (8008a14 <find_volume+0x504>)
 80089f0:	801a      	strh	r2, [r3, #0]
 80089f2:	4b08      	ldr	r3, [pc, #32]	; (8008a14 <find_volume+0x504>)
 80089f4:	881a      	ldrh	r2, [r3, #0]
 80089f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089f8:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80089fa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80089fc:	f7fe fd36 	bl	800746c <clear_lock>
#endif
	return FR_OK;
 8008a00:	2300      	movs	r3, #0
}
 8008a02:	4618      	mov	r0, r3
 8008a04:	3758      	adds	r7, #88	; 0x58
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}
 8008a0a:	bf00      	nop
 8008a0c:	41615252 	.word	0x41615252
 8008a10:	61417272 	.word	0x61417272
 8008a14:	200019ac 	.word	0x200019ac

08008a18 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b084      	sub	sp, #16
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
 8008a20:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8008a22:	2309      	movs	r3, #9
 8008a24:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d01c      	beq.n	8008a66 <validate+0x4e>
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d018      	beq.n	8008a66 <validate+0x4e>
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	781b      	ldrb	r3, [r3, #0]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d013      	beq.n	8008a66 <validate+0x4e>
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	889a      	ldrh	r2, [r3, #4]
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	88db      	ldrh	r3, [r3, #6]
 8008a48:	429a      	cmp	r2, r3
 8008a4a:	d10c      	bne.n	8008a66 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	785b      	ldrb	r3, [r3, #1]
 8008a52:	4618      	mov	r0, r3
 8008a54:	f7fe fa24 	bl	8006ea0 <disk_status>
 8008a58:	4603      	mov	r3, r0
 8008a5a:	f003 0301 	and.w	r3, r3, #1
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d101      	bne.n	8008a66 <validate+0x4e>
			res = FR_OK;
 8008a62:	2300      	movs	r3, #0
 8008a64:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008a66:	7bfb      	ldrb	r3, [r7, #15]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d102      	bne.n	8008a72 <validate+0x5a>
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	e000      	b.n	8008a74 <validate+0x5c>
 8008a72:	2300      	movs	r3, #0
 8008a74:	683a      	ldr	r2, [r7, #0]
 8008a76:	6013      	str	r3, [r2, #0]
	return res;
 8008a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	3710      	adds	r7, #16
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}
	...

08008a84 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b088      	sub	sp, #32
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	60f8      	str	r0, [r7, #12]
 8008a8c:	60b9      	str	r1, [r7, #8]
 8008a8e:	4613      	mov	r3, r2
 8008a90:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8008a96:	f107 0310 	add.w	r3, r7, #16
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	f7ff fc9e 	bl	80083dc <get_ldnumber>
 8008aa0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008aa2:	69fb      	ldr	r3, [r7, #28]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	da01      	bge.n	8008aac <f_mount+0x28>
 8008aa8:	230b      	movs	r3, #11
 8008aaa:	e02b      	b.n	8008b04 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008aac:	4a17      	ldr	r2, [pc, #92]	; (8008b0c <f_mount+0x88>)
 8008aae:	69fb      	ldr	r3, [r7, #28]
 8008ab0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ab4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008ab6:	69bb      	ldr	r3, [r7, #24]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d005      	beq.n	8008ac8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008abc:	69b8      	ldr	r0, [r7, #24]
 8008abe:	f7fe fcd5 	bl	800746c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008ac2:	69bb      	ldr	r3, [r7, #24]
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d002      	beq.n	8008ad4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008ad4:	68fa      	ldr	r2, [r7, #12]
 8008ad6:	490d      	ldr	r1, [pc, #52]	; (8008b0c <f_mount+0x88>)
 8008ad8:	69fb      	ldr	r3, [r7, #28]
 8008ada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d002      	beq.n	8008aea <f_mount+0x66>
 8008ae4:	79fb      	ldrb	r3, [r7, #7]
 8008ae6:	2b01      	cmp	r3, #1
 8008ae8:	d001      	beq.n	8008aee <f_mount+0x6a>
 8008aea:	2300      	movs	r3, #0
 8008aec:	e00a      	b.n	8008b04 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008aee:	f107 010c 	add.w	r1, r7, #12
 8008af2:	f107 0308 	add.w	r3, r7, #8
 8008af6:	2200      	movs	r2, #0
 8008af8:	4618      	mov	r0, r3
 8008afa:	f7ff fd09 	bl	8008510 <find_volume>
 8008afe:	4603      	mov	r3, r0
 8008b00:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008b02:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b04:	4618      	mov	r0, r3
 8008b06:	3720      	adds	r7, #32
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bd80      	pop	{r7, pc}
 8008b0c:	200019a8 	.word	0x200019a8

08008b10 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b098      	sub	sp, #96	; 0x60
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	60f8      	str	r0, [r7, #12]
 8008b18:	60b9      	str	r1, [r7, #8]
 8008b1a:	4613      	mov	r3, r2
 8008b1c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d101      	bne.n	8008b28 <f_open+0x18>
 8008b24:	2309      	movs	r3, #9
 8008b26:	e1bb      	b.n	8008ea0 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008b28:	79fb      	ldrb	r3, [r7, #7]
 8008b2a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008b2e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8008b30:	79fa      	ldrb	r2, [r7, #7]
 8008b32:	f107 0110 	add.w	r1, r7, #16
 8008b36:	f107 0308 	add.w	r3, r7, #8
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f7ff fce8 	bl	8008510 <find_volume>
 8008b40:	4603      	mov	r3, r0
 8008b42:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8008b46:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	f040 819f 	bne.w	8008e8e <f_open+0x37e>
		dj.obj.fs = fs;
 8008b50:	693b      	ldr	r3, [r7, #16]
 8008b52:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008b54:	68ba      	ldr	r2, [r7, #8]
 8008b56:	f107 0314 	add.w	r3, r7, #20
 8008b5a:	4611      	mov	r1, r2
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	f7ff fbc7 	bl	80082f0 <follow_path>
 8008b62:	4603      	mov	r3, r0
 8008b64:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008b68:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d11a      	bne.n	8008ba6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008b70:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008b74:	b25b      	sxtb	r3, r3
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	da03      	bge.n	8008b82 <f_open+0x72>
				res = FR_INVALID_NAME;
 8008b7a:	2306      	movs	r3, #6
 8008b7c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008b80:	e011      	b.n	8008ba6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008b82:	79fb      	ldrb	r3, [r7, #7]
 8008b84:	f023 0301 	bic.w	r3, r3, #1
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	bf14      	ite	ne
 8008b8c:	2301      	movne	r3, #1
 8008b8e:	2300      	moveq	r3, #0
 8008b90:	b2db      	uxtb	r3, r3
 8008b92:	461a      	mov	r2, r3
 8008b94:	f107 0314 	add.w	r3, r7, #20
 8008b98:	4611      	mov	r1, r2
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f7fe fb1e 	bl	80071dc <chk_lock>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008ba6:	79fb      	ldrb	r3, [r7, #7]
 8008ba8:	f003 031c 	and.w	r3, r3, #28
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d07f      	beq.n	8008cb0 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8008bb0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d017      	beq.n	8008be8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008bb8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008bbc:	2b04      	cmp	r3, #4
 8008bbe:	d10e      	bne.n	8008bde <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008bc0:	f7fe fb68 	bl	8007294 <enq_lock>
 8008bc4:	4603      	mov	r3, r0
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d006      	beq.n	8008bd8 <f_open+0xc8>
 8008bca:	f107 0314 	add.w	r3, r7, #20
 8008bce:	4618      	mov	r0, r3
 8008bd0:	f7ff fac7 	bl	8008162 <dir_register>
 8008bd4:	4603      	mov	r3, r0
 8008bd6:	e000      	b.n	8008bda <f_open+0xca>
 8008bd8:	2312      	movs	r3, #18
 8008bda:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008bde:	79fb      	ldrb	r3, [r7, #7]
 8008be0:	f043 0308 	orr.w	r3, r3, #8
 8008be4:	71fb      	strb	r3, [r7, #7]
 8008be6:	e010      	b.n	8008c0a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008be8:	7ebb      	ldrb	r3, [r7, #26]
 8008bea:	f003 0311 	and.w	r3, r3, #17
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d003      	beq.n	8008bfa <f_open+0xea>
					res = FR_DENIED;
 8008bf2:	2307      	movs	r3, #7
 8008bf4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008bf8:	e007      	b.n	8008c0a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8008bfa:	79fb      	ldrb	r3, [r7, #7]
 8008bfc:	f003 0304 	and.w	r3, r3, #4
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d002      	beq.n	8008c0a <f_open+0xfa>
 8008c04:	2308      	movs	r3, #8
 8008c06:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008c0a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d168      	bne.n	8008ce4 <f_open+0x1d4>
 8008c12:	79fb      	ldrb	r3, [r7, #7]
 8008c14:	f003 0308 	and.w	r3, r3, #8
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d063      	beq.n	8008ce4 <f_open+0x1d4>
				dw = GET_FATTIME();
 8008c1c:	f7fd fefe 	bl	8006a1c <get_fattime>
 8008c20:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8008c22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c24:	330e      	adds	r3, #14
 8008c26:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008c28:	4618      	mov	r0, r3
 8008c2a:	f7fe fa2d 	bl	8007088 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8008c2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c30:	3316      	adds	r3, #22
 8008c32:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008c34:	4618      	mov	r0, r3
 8008c36:	f7fe fa27 	bl	8007088 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8008c3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c3c:	330b      	adds	r3, #11
 8008c3e:	2220      	movs	r2, #32
 8008c40:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8008c42:	693b      	ldr	r3, [r7, #16]
 8008c44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c46:	4611      	mov	r1, r2
 8008c48:	4618      	mov	r0, r3
 8008c4a:	f7ff f9f6 	bl	800803a <ld_clust>
 8008c4e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008c50:	693b      	ldr	r3, [r7, #16]
 8008c52:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008c54:	2200      	movs	r2, #0
 8008c56:	4618      	mov	r0, r3
 8008c58:	f7ff fa0e 	bl	8008078 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008c5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c5e:	331c      	adds	r3, #28
 8008c60:	2100      	movs	r1, #0
 8008c62:	4618      	mov	r0, r3
 8008c64:	f7fe fa10 	bl	8007088 <st_dword>
					fs->wflag = 1;
 8008c68:	693b      	ldr	r3, [r7, #16]
 8008c6a:	2201      	movs	r2, #1
 8008c6c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8008c6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d037      	beq.n	8008ce4 <f_open+0x1d4>
						dw = fs->winsect;
 8008c74:	693b      	ldr	r3, [r7, #16]
 8008c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c78:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8008c7a:	f107 0314 	add.w	r3, r7, #20
 8008c7e:	2200      	movs	r2, #0
 8008c80:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8008c82:	4618      	mov	r0, r3
 8008c84:	f7fe fefe 	bl	8007a84 <remove_chain>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8008c8e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d126      	bne.n	8008ce4 <f_open+0x1d4>
							res = move_window(fs, dw);
 8008c96:	693b      	ldr	r3, [r7, #16]
 8008c98:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	f7fe fc4e 	bl	800753c <move_window>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8008ca6:	693b      	ldr	r3, [r7, #16]
 8008ca8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008caa:	3a01      	subs	r2, #1
 8008cac:	611a      	str	r2, [r3, #16]
 8008cae:	e019      	b.n	8008ce4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008cb0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d115      	bne.n	8008ce4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008cb8:	7ebb      	ldrb	r3, [r7, #26]
 8008cba:	f003 0310 	and.w	r3, r3, #16
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d003      	beq.n	8008cca <f_open+0x1ba>
					res = FR_NO_FILE;
 8008cc2:	2304      	movs	r3, #4
 8008cc4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008cc8:	e00c      	b.n	8008ce4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8008cca:	79fb      	ldrb	r3, [r7, #7]
 8008ccc:	f003 0302 	and.w	r3, r3, #2
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d007      	beq.n	8008ce4 <f_open+0x1d4>
 8008cd4:	7ebb      	ldrb	r3, [r7, #26]
 8008cd6:	f003 0301 	and.w	r3, r3, #1
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d002      	beq.n	8008ce4 <f_open+0x1d4>
						res = FR_DENIED;
 8008cde:	2307      	movs	r3, #7
 8008ce0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8008ce4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d128      	bne.n	8008d3e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008cec:	79fb      	ldrb	r3, [r7, #7]
 8008cee:	f003 0308 	and.w	r3, r3, #8
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d003      	beq.n	8008cfe <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8008cf6:	79fb      	ldrb	r3, [r7, #7]
 8008cf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008cfc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8008cfe:	693b      	ldr	r3, [r7, #16]
 8008d00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8008d06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008d0c:	79fb      	ldrb	r3, [r7, #7]
 8008d0e:	f023 0301 	bic.w	r3, r3, #1
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	bf14      	ite	ne
 8008d16:	2301      	movne	r3, #1
 8008d18:	2300      	moveq	r3, #0
 8008d1a:	b2db      	uxtb	r3, r3
 8008d1c:	461a      	mov	r2, r3
 8008d1e:	f107 0314 	add.w	r3, r7, #20
 8008d22:	4611      	mov	r1, r2
 8008d24:	4618      	mov	r0, r3
 8008d26:	f7fe fad7 	bl	80072d8 <inc_lock>
 8008d2a:	4602      	mov	r2, r0
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	691b      	ldr	r3, [r3, #16]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d102      	bne.n	8008d3e <f_open+0x22e>
 8008d38:	2302      	movs	r3, #2
 8008d3a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8008d3e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	f040 80a3 	bne.w	8008e8e <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008d48:	693b      	ldr	r3, [r7, #16]
 8008d4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d4c:	4611      	mov	r1, r2
 8008d4e:	4618      	mov	r0, r3
 8008d50:	f7ff f973 	bl	800803a <ld_clust>
 8008d54:	4602      	mov	r2, r0
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008d5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d5c:	331c      	adds	r3, #28
 8008d5e:	4618      	mov	r0, r3
 8008d60:	f7fe f954 	bl	800700c <ld_dword>
 8008d64:	4602      	mov	r2, r0
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008d70:	693a      	ldr	r2, [r7, #16]
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8008d76:	693b      	ldr	r3, [r7, #16]
 8008d78:	88da      	ldrh	r2, [r3, #6]
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	79fa      	ldrb	r2, [r7, #7]
 8008d82:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	2200      	movs	r2, #0
 8008d88:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	2200      	movs	r2, #0
 8008d94:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	3330      	adds	r3, #48	; 0x30
 8008d9a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008d9e:	2100      	movs	r1, #0
 8008da0:	4618      	mov	r0, r3
 8008da2:	f7fe f9be 	bl	8007122 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008da6:	79fb      	ldrb	r3, [r7, #7]
 8008da8:	f003 0320 	and.w	r3, r3, #32
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d06e      	beq.n	8008e8e <f_open+0x37e>
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	68db      	ldr	r3, [r3, #12]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d06a      	beq.n	8008e8e <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	68da      	ldr	r2, [r3, #12]
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008dc0:	693b      	ldr	r3, [r7, #16]
 8008dc2:	895b      	ldrh	r3, [r3, #10]
 8008dc4:	461a      	mov	r2, r3
 8008dc6:	693b      	ldr	r3, [r7, #16]
 8008dc8:	899b      	ldrh	r3, [r3, #12]
 8008dca:	fb03 f302 	mul.w	r3, r3, r2
 8008dce:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	689b      	ldr	r3, [r3, #8]
 8008dd4:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	68db      	ldr	r3, [r3, #12]
 8008dda:	657b      	str	r3, [r7, #84]	; 0x54
 8008ddc:	e016      	b.n	8008e0c <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008de2:	4618      	mov	r0, r3
 8008de4:	f7fe fc67 	bl	80076b6 <get_fat>
 8008de8:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8008dea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008dec:	2b01      	cmp	r3, #1
 8008dee:	d802      	bhi.n	8008df6 <f_open+0x2e6>
 8008df0:	2302      	movs	r3, #2
 8008df2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008df6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008df8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008dfc:	d102      	bne.n	8008e04 <f_open+0x2f4>
 8008dfe:	2301      	movs	r3, #1
 8008e00:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008e04:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008e06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e08:	1ad3      	subs	r3, r2, r3
 8008e0a:	657b      	str	r3, [r7, #84]	; 0x54
 8008e0c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d103      	bne.n	8008e1c <f_open+0x30c>
 8008e14:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008e16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e18:	429a      	cmp	r2, r3
 8008e1a:	d8e0      	bhi.n	8008dde <f_open+0x2ce>
				}
				fp->clust = clst;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008e20:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008e22:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d131      	bne.n	8008e8e <f_open+0x37e>
 8008e2a:	693b      	ldr	r3, [r7, #16]
 8008e2c:	899b      	ldrh	r3, [r3, #12]
 8008e2e:	461a      	mov	r2, r3
 8008e30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e32:	fbb3 f1f2 	udiv	r1, r3, r2
 8008e36:	fb02 f201 	mul.w	r2, r2, r1
 8008e3a:	1a9b      	subs	r3, r3, r2
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d026      	beq.n	8008e8e <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008e40:	693b      	ldr	r3, [r7, #16]
 8008e42:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008e44:	4618      	mov	r0, r3
 8008e46:	f7fe fc17 	bl	8007678 <clust2sect>
 8008e4a:	6478      	str	r0, [r7, #68]	; 0x44
 8008e4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d103      	bne.n	8008e5a <f_open+0x34a>
						res = FR_INT_ERR;
 8008e52:	2302      	movs	r3, #2
 8008e54:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008e58:	e019      	b.n	8008e8e <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8008e5a:	693b      	ldr	r3, [r7, #16]
 8008e5c:	899b      	ldrh	r3, [r3, #12]
 8008e5e:	461a      	mov	r2, r3
 8008e60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e62:	fbb3 f2f2 	udiv	r2, r3, r2
 8008e66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e68:	441a      	add	r2, r3
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8008e6e:	693b      	ldr	r3, [r7, #16]
 8008e70:	7858      	ldrb	r0, [r3, #1]
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	6a1a      	ldr	r2, [r3, #32]
 8008e7c:	2301      	movs	r3, #1
 8008e7e:	f7fe f84f 	bl	8006f20 <disk_read>
 8008e82:	4603      	mov	r3, r0
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d002      	beq.n	8008e8e <f_open+0x37e>
 8008e88:	2301      	movs	r3, #1
 8008e8a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008e8e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d002      	beq.n	8008e9c <f_open+0x38c>
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	2200      	movs	r2, #0
 8008e9a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008e9c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	3760      	adds	r7, #96	; 0x60
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	bd80      	pop	{r7, pc}

08008ea8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b08c      	sub	sp, #48	; 0x30
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	60f8      	str	r0, [r7, #12]
 8008eb0:	60b9      	str	r1, [r7, #8]
 8008eb2:	607a      	str	r2, [r7, #4]
 8008eb4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8008eb6:	68bb      	ldr	r3, [r7, #8]
 8008eb8:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	f107 0210 	add.w	r2, r7, #16
 8008ec6:	4611      	mov	r1, r2
 8008ec8:	4618      	mov	r0, r3
 8008eca:	f7ff fda5 	bl	8008a18 <validate>
 8008ece:	4603      	mov	r3, r0
 8008ed0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008ed4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d107      	bne.n	8008eec <f_write+0x44>
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	7d5b      	ldrb	r3, [r3, #21]
 8008ee0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008ee4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d002      	beq.n	8008ef2 <f_write+0x4a>
 8008eec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008ef0:	e16a      	b.n	80091c8 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	7d1b      	ldrb	r3, [r3, #20]
 8008ef6:	f003 0302 	and.w	r3, r3, #2
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d101      	bne.n	8008f02 <f_write+0x5a>
 8008efe:	2307      	movs	r3, #7
 8008f00:	e162      	b.n	80091c8 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	699a      	ldr	r2, [r3, #24]
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	441a      	add	r2, r3
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	699b      	ldr	r3, [r3, #24]
 8008f0e:	429a      	cmp	r2, r3
 8008f10:	f080 814c 	bcs.w	80091ac <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	699b      	ldr	r3, [r3, #24]
 8008f18:	43db      	mvns	r3, r3
 8008f1a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8008f1c:	e146      	b.n	80091ac <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	699b      	ldr	r3, [r3, #24]
 8008f22:	693a      	ldr	r2, [r7, #16]
 8008f24:	8992      	ldrh	r2, [r2, #12]
 8008f26:	fbb3 f1f2 	udiv	r1, r3, r2
 8008f2a:	fb02 f201 	mul.w	r2, r2, r1
 8008f2e:	1a9b      	subs	r3, r3, r2
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	f040 80f1 	bne.w	8009118 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	699b      	ldr	r3, [r3, #24]
 8008f3a:	693a      	ldr	r2, [r7, #16]
 8008f3c:	8992      	ldrh	r2, [r2, #12]
 8008f3e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008f42:	693a      	ldr	r2, [r7, #16]
 8008f44:	8952      	ldrh	r2, [r2, #10]
 8008f46:	3a01      	subs	r2, #1
 8008f48:	4013      	ands	r3, r2
 8008f4a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8008f4c:	69bb      	ldr	r3, [r7, #24]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d143      	bne.n	8008fda <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	699b      	ldr	r3, [r3, #24]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d10c      	bne.n	8008f74 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	689b      	ldr	r3, [r3, #8]
 8008f5e:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8008f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d11a      	bne.n	8008f9c <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	2100      	movs	r1, #0
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	f7fe fdef 	bl	8007b4e <create_chain>
 8008f70:	62b8      	str	r0, [r7, #40]	; 0x28
 8008f72:	e013      	b.n	8008f9c <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d007      	beq.n	8008f8c <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	699b      	ldr	r3, [r3, #24]
 8008f80:	4619      	mov	r1, r3
 8008f82:	68f8      	ldr	r0, [r7, #12]
 8008f84:	f7fe fe7b 	bl	8007c7e <clmt_clust>
 8008f88:	62b8      	str	r0, [r7, #40]	; 0x28
 8008f8a:	e007      	b.n	8008f9c <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008f8c:	68fa      	ldr	r2, [r7, #12]
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	69db      	ldr	r3, [r3, #28]
 8008f92:	4619      	mov	r1, r3
 8008f94:	4610      	mov	r0, r2
 8008f96:	f7fe fdda 	bl	8007b4e <create_chain>
 8008f9a:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	f000 8109 	beq.w	80091b6 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fa6:	2b01      	cmp	r3, #1
 8008fa8:	d104      	bne.n	8008fb4 <f_write+0x10c>
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	2202      	movs	r2, #2
 8008fae:	755a      	strb	r2, [r3, #21]
 8008fb0:	2302      	movs	r3, #2
 8008fb2:	e109      	b.n	80091c8 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008fba:	d104      	bne.n	8008fc6 <f_write+0x11e>
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	2201      	movs	r2, #1
 8008fc0:	755a      	strb	r2, [r3, #21]
 8008fc2:	2301      	movs	r3, #1
 8008fc4:	e100      	b.n	80091c8 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008fca:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	689b      	ldr	r3, [r3, #8]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d102      	bne.n	8008fda <f_write+0x132>
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008fd8:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	7d1b      	ldrb	r3, [r3, #20]
 8008fde:	b25b      	sxtb	r3, r3
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	da18      	bge.n	8009016 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008fe4:	693b      	ldr	r3, [r7, #16]
 8008fe6:	7858      	ldrb	r0, [r3, #1]
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	6a1a      	ldr	r2, [r3, #32]
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	f7fd ffb4 	bl	8006f60 <disk_write>
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d004      	beq.n	8009008 <f_write+0x160>
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	2201      	movs	r2, #1
 8009002:	755a      	strb	r2, [r3, #21]
 8009004:	2301      	movs	r3, #1
 8009006:	e0df      	b.n	80091c8 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	7d1b      	ldrb	r3, [r3, #20]
 800900c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009010:	b2da      	uxtb	r2, r3
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009016:	693a      	ldr	r2, [r7, #16]
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	69db      	ldr	r3, [r3, #28]
 800901c:	4619      	mov	r1, r3
 800901e:	4610      	mov	r0, r2
 8009020:	f7fe fb2a 	bl	8007678 <clust2sect>
 8009024:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009026:	697b      	ldr	r3, [r7, #20]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d104      	bne.n	8009036 <f_write+0x18e>
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	2202      	movs	r2, #2
 8009030:	755a      	strb	r2, [r3, #21]
 8009032:	2302      	movs	r3, #2
 8009034:	e0c8      	b.n	80091c8 <f_write+0x320>
			sect += csect;
 8009036:	697a      	ldr	r2, [r7, #20]
 8009038:	69bb      	ldr	r3, [r7, #24]
 800903a:	4413      	add	r3, r2
 800903c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800903e:	693b      	ldr	r3, [r7, #16]
 8009040:	899b      	ldrh	r3, [r3, #12]
 8009042:	461a      	mov	r2, r3
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	fbb3 f3f2 	udiv	r3, r3, r2
 800904a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800904c:	6a3b      	ldr	r3, [r7, #32]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d043      	beq.n	80090da <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009052:	69ba      	ldr	r2, [r7, #24]
 8009054:	6a3b      	ldr	r3, [r7, #32]
 8009056:	4413      	add	r3, r2
 8009058:	693a      	ldr	r2, [r7, #16]
 800905a:	8952      	ldrh	r2, [r2, #10]
 800905c:	4293      	cmp	r3, r2
 800905e:	d905      	bls.n	800906c <f_write+0x1c4>
					cc = fs->csize - csect;
 8009060:	693b      	ldr	r3, [r7, #16]
 8009062:	895b      	ldrh	r3, [r3, #10]
 8009064:	461a      	mov	r2, r3
 8009066:	69bb      	ldr	r3, [r7, #24]
 8009068:	1ad3      	subs	r3, r2, r3
 800906a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800906c:	693b      	ldr	r3, [r7, #16]
 800906e:	7858      	ldrb	r0, [r3, #1]
 8009070:	6a3b      	ldr	r3, [r7, #32]
 8009072:	697a      	ldr	r2, [r7, #20]
 8009074:	69f9      	ldr	r1, [r7, #28]
 8009076:	f7fd ff73 	bl	8006f60 <disk_write>
 800907a:	4603      	mov	r3, r0
 800907c:	2b00      	cmp	r3, #0
 800907e:	d004      	beq.n	800908a <f_write+0x1e2>
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	2201      	movs	r2, #1
 8009084:	755a      	strb	r2, [r3, #21]
 8009086:	2301      	movs	r3, #1
 8009088:	e09e      	b.n	80091c8 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	6a1a      	ldr	r2, [r3, #32]
 800908e:	697b      	ldr	r3, [r7, #20]
 8009090:	1ad3      	subs	r3, r2, r3
 8009092:	6a3a      	ldr	r2, [r7, #32]
 8009094:	429a      	cmp	r2, r3
 8009096:	d918      	bls.n	80090ca <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	6a1a      	ldr	r2, [r3, #32]
 80090a2:	697b      	ldr	r3, [r7, #20]
 80090a4:	1ad3      	subs	r3, r2, r3
 80090a6:	693a      	ldr	r2, [r7, #16]
 80090a8:	8992      	ldrh	r2, [r2, #12]
 80090aa:	fb02 f303 	mul.w	r3, r2, r3
 80090ae:	69fa      	ldr	r2, [r7, #28]
 80090b0:	18d1      	adds	r1, r2, r3
 80090b2:	693b      	ldr	r3, [r7, #16]
 80090b4:	899b      	ldrh	r3, [r3, #12]
 80090b6:	461a      	mov	r2, r3
 80090b8:	f7fe f812 	bl	80070e0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	7d1b      	ldrb	r3, [r3, #20]
 80090c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090c4:	b2da      	uxtb	r2, r3
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80090ca:	693b      	ldr	r3, [r7, #16]
 80090cc:	899b      	ldrh	r3, [r3, #12]
 80090ce:	461a      	mov	r2, r3
 80090d0:	6a3b      	ldr	r3, [r7, #32]
 80090d2:	fb02 f303 	mul.w	r3, r2, r3
 80090d6:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80090d8:	e04b      	b.n	8009172 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	6a1b      	ldr	r3, [r3, #32]
 80090de:	697a      	ldr	r2, [r7, #20]
 80090e0:	429a      	cmp	r2, r3
 80090e2:	d016      	beq.n	8009112 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	699a      	ldr	r2, [r3, #24]
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80090ec:	429a      	cmp	r2, r3
 80090ee:	d210      	bcs.n	8009112 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80090f0:	693b      	ldr	r3, [r7, #16]
 80090f2:	7858      	ldrb	r0, [r3, #1]
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80090fa:	2301      	movs	r3, #1
 80090fc:	697a      	ldr	r2, [r7, #20]
 80090fe:	f7fd ff0f 	bl	8006f20 <disk_read>
 8009102:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8009104:	2b00      	cmp	r3, #0
 8009106:	d004      	beq.n	8009112 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	2201      	movs	r2, #1
 800910c:	755a      	strb	r2, [r3, #21]
 800910e:	2301      	movs	r3, #1
 8009110:	e05a      	b.n	80091c8 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	697a      	ldr	r2, [r7, #20]
 8009116:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009118:	693b      	ldr	r3, [r7, #16]
 800911a:	899b      	ldrh	r3, [r3, #12]
 800911c:	4618      	mov	r0, r3
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	699b      	ldr	r3, [r3, #24]
 8009122:	693a      	ldr	r2, [r7, #16]
 8009124:	8992      	ldrh	r2, [r2, #12]
 8009126:	fbb3 f1f2 	udiv	r1, r3, r2
 800912a:	fb02 f201 	mul.w	r2, r2, r1
 800912e:	1a9b      	subs	r3, r3, r2
 8009130:	1ac3      	subs	r3, r0, r3
 8009132:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8009134:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	429a      	cmp	r2, r3
 800913a:	d901      	bls.n	8009140 <f_write+0x298>
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	699b      	ldr	r3, [r3, #24]
 800914a:	693a      	ldr	r2, [r7, #16]
 800914c:	8992      	ldrh	r2, [r2, #12]
 800914e:	fbb3 f0f2 	udiv	r0, r3, r2
 8009152:	fb02 f200 	mul.w	r2, r2, r0
 8009156:	1a9b      	subs	r3, r3, r2
 8009158:	440b      	add	r3, r1
 800915a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800915c:	69f9      	ldr	r1, [r7, #28]
 800915e:	4618      	mov	r0, r3
 8009160:	f7fd ffbe 	bl	80070e0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	7d1b      	ldrb	r3, [r3, #20]
 8009168:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800916c:	b2da      	uxtb	r2, r3
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8009172:	69fa      	ldr	r2, [r7, #28]
 8009174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009176:	4413      	add	r3, r2
 8009178:	61fb      	str	r3, [r7, #28]
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	699a      	ldr	r2, [r3, #24]
 800917e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009180:	441a      	add	r2, r3
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	619a      	str	r2, [r3, #24]
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	68da      	ldr	r2, [r3, #12]
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	699b      	ldr	r3, [r3, #24]
 800918e:	429a      	cmp	r2, r3
 8009190:	bf38      	it	cc
 8009192:	461a      	movcc	r2, r3
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	60da      	str	r2, [r3, #12]
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	681a      	ldr	r2, [r3, #0]
 800919c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800919e:	441a      	add	r2, r3
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	601a      	str	r2, [r3, #0]
 80091a4:	687a      	ldr	r2, [r7, #4]
 80091a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091a8:	1ad3      	subs	r3, r2, r3
 80091aa:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	f47f aeb5 	bne.w	8008f1e <f_write+0x76>
 80091b4:	e000      	b.n	80091b8 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80091b6:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	7d1b      	ldrb	r3, [r3, #20]
 80091bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091c0:	b2da      	uxtb	r2, r3
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80091c6:	2300      	movs	r3, #0
}
 80091c8:	4618      	mov	r0, r3
 80091ca:	3730      	adds	r7, #48	; 0x30
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bd80      	pop	{r7, pc}

080091d0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b086      	sub	sp, #24
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	f107 0208 	add.w	r2, r7, #8
 80091de:	4611      	mov	r1, r2
 80091e0:	4618      	mov	r0, r3
 80091e2:	f7ff fc19 	bl	8008a18 <validate>
 80091e6:	4603      	mov	r3, r0
 80091e8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80091ea:	7dfb      	ldrb	r3, [r7, #23]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d168      	bne.n	80092c2 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	7d1b      	ldrb	r3, [r3, #20]
 80091f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d062      	beq.n	80092c2 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	7d1b      	ldrb	r3, [r3, #20]
 8009200:	b25b      	sxtb	r3, r3
 8009202:	2b00      	cmp	r3, #0
 8009204:	da15      	bge.n	8009232 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009206:	68bb      	ldr	r3, [r7, #8]
 8009208:	7858      	ldrb	r0, [r3, #1]
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	6a1a      	ldr	r2, [r3, #32]
 8009214:	2301      	movs	r3, #1
 8009216:	f7fd fea3 	bl	8006f60 <disk_write>
 800921a:	4603      	mov	r3, r0
 800921c:	2b00      	cmp	r3, #0
 800921e:	d001      	beq.n	8009224 <f_sync+0x54>
 8009220:	2301      	movs	r3, #1
 8009222:	e04f      	b.n	80092c4 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	7d1b      	ldrb	r3, [r3, #20]
 8009228:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800922c:	b2da      	uxtb	r2, r3
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8009232:	f7fd fbf3 	bl	8006a1c <get_fattime>
 8009236:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8009238:	68ba      	ldr	r2, [r7, #8]
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800923e:	4619      	mov	r1, r3
 8009240:	4610      	mov	r0, r2
 8009242:	f7fe f97b 	bl	800753c <move_window>
 8009246:	4603      	mov	r3, r0
 8009248:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800924a:	7dfb      	ldrb	r3, [r7, #23]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d138      	bne.n	80092c2 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009254:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	330b      	adds	r3, #11
 800925a:	781a      	ldrb	r2, [r3, #0]
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	330b      	adds	r3, #11
 8009260:	f042 0220 	orr.w	r2, r2, #32
 8009264:	b2d2      	uxtb	r2, r2
 8009266:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6818      	ldr	r0, [r3, #0]
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	689b      	ldr	r3, [r3, #8]
 8009270:	461a      	mov	r2, r3
 8009272:	68f9      	ldr	r1, [r7, #12]
 8009274:	f7fe ff00 	bl	8008078 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	f103 021c 	add.w	r2, r3, #28
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	68db      	ldr	r3, [r3, #12]
 8009282:	4619      	mov	r1, r3
 8009284:	4610      	mov	r0, r2
 8009286:	f7fd feff 	bl	8007088 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	3316      	adds	r3, #22
 800928e:	6939      	ldr	r1, [r7, #16]
 8009290:	4618      	mov	r0, r3
 8009292:	f7fd fef9 	bl	8007088 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	3312      	adds	r3, #18
 800929a:	2100      	movs	r1, #0
 800929c:	4618      	mov	r0, r3
 800929e:	f7fd fed8 	bl	8007052 <st_word>
					fs->wflag = 1;
 80092a2:	68bb      	ldr	r3, [r7, #8]
 80092a4:	2201      	movs	r2, #1
 80092a6:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80092a8:	68bb      	ldr	r3, [r7, #8]
 80092aa:	4618      	mov	r0, r3
 80092ac:	f7fe f974 	bl	8007598 <sync_fs>
 80092b0:	4603      	mov	r3, r0
 80092b2:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	7d1b      	ldrb	r3, [r3, #20]
 80092b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80092bc:	b2da      	uxtb	r2, r3
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80092c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80092c4:	4618      	mov	r0, r3
 80092c6:	3718      	adds	r7, #24
 80092c8:	46bd      	mov	sp, r7
 80092ca:	bd80      	pop	{r7, pc}

080092cc <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b084      	sub	sp, #16
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80092d4:	6878      	ldr	r0, [r7, #4]
 80092d6:	f7ff ff7b 	bl	80091d0 <f_sync>
 80092da:	4603      	mov	r3, r0
 80092dc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80092de:	7bfb      	ldrb	r3, [r7, #15]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d118      	bne.n	8009316 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f107 0208 	add.w	r2, r7, #8
 80092ea:	4611      	mov	r1, r2
 80092ec:	4618      	mov	r0, r3
 80092ee:	f7ff fb93 	bl	8008a18 <validate>
 80092f2:	4603      	mov	r3, r0
 80092f4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80092f6:	7bfb      	ldrb	r3, [r7, #15]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d10c      	bne.n	8009316 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	691b      	ldr	r3, [r3, #16]
 8009300:	4618      	mov	r0, r3
 8009302:	f7fe f877 	bl	80073f4 <dec_lock>
 8009306:	4603      	mov	r3, r0
 8009308:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800930a:	7bfb      	ldrb	r3, [r7, #15]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d102      	bne.n	8009316 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2200      	movs	r2, #0
 8009314:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8009316:	7bfb      	ldrb	r3, [r7, #15]
}
 8009318:	4618      	mov	r0, r3
 800931a:	3710      	adds	r7, #16
 800931c:	46bd      	mov	sp, r7
 800931e:	bd80      	pop	{r7, pc}

08009320 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009320:	b480      	push	{r7}
 8009322:	b087      	sub	sp, #28
 8009324:	af00      	add	r7, sp, #0
 8009326:	60f8      	str	r0, [r7, #12]
 8009328:	60b9      	str	r1, [r7, #8]
 800932a:	4613      	mov	r3, r2
 800932c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800932e:	2301      	movs	r3, #1
 8009330:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009332:	2300      	movs	r3, #0
 8009334:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009336:	4b1f      	ldr	r3, [pc, #124]	; (80093b4 <FATFS_LinkDriverEx+0x94>)
 8009338:	7a5b      	ldrb	r3, [r3, #9]
 800933a:	b2db      	uxtb	r3, r3
 800933c:	2b00      	cmp	r3, #0
 800933e:	d131      	bne.n	80093a4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009340:	4b1c      	ldr	r3, [pc, #112]	; (80093b4 <FATFS_LinkDriverEx+0x94>)
 8009342:	7a5b      	ldrb	r3, [r3, #9]
 8009344:	b2db      	uxtb	r3, r3
 8009346:	461a      	mov	r2, r3
 8009348:	4b1a      	ldr	r3, [pc, #104]	; (80093b4 <FATFS_LinkDriverEx+0x94>)
 800934a:	2100      	movs	r1, #0
 800934c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800934e:	4b19      	ldr	r3, [pc, #100]	; (80093b4 <FATFS_LinkDriverEx+0x94>)
 8009350:	7a5b      	ldrb	r3, [r3, #9]
 8009352:	b2db      	uxtb	r3, r3
 8009354:	4a17      	ldr	r2, [pc, #92]	; (80093b4 <FATFS_LinkDriverEx+0x94>)
 8009356:	009b      	lsls	r3, r3, #2
 8009358:	4413      	add	r3, r2
 800935a:	68fa      	ldr	r2, [r7, #12]
 800935c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800935e:	4b15      	ldr	r3, [pc, #84]	; (80093b4 <FATFS_LinkDriverEx+0x94>)
 8009360:	7a5b      	ldrb	r3, [r3, #9]
 8009362:	b2db      	uxtb	r3, r3
 8009364:	461a      	mov	r2, r3
 8009366:	4b13      	ldr	r3, [pc, #76]	; (80093b4 <FATFS_LinkDriverEx+0x94>)
 8009368:	4413      	add	r3, r2
 800936a:	79fa      	ldrb	r2, [r7, #7]
 800936c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800936e:	4b11      	ldr	r3, [pc, #68]	; (80093b4 <FATFS_LinkDriverEx+0x94>)
 8009370:	7a5b      	ldrb	r3, [r3, #9]
 8009372:	b2db      	uxtb	r3, r3
 8009374:	1c5a      	adds	r2, r3, #1
 8009376:	b2d1      	uxtb	r1, r2
 8009378:	4a0e      	ldr	r2, [pc, #56]	; (80093b4 <FATFS_LinkDriverEx+0x94>)
 800937a:	7251      	strb	r1, [r2, #9]
 800937c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800937e:	7dbb      	ldrb	r3, [r7, #22]
 8009380:	3330      	adds	r3, #48	; 0x30
 8009382:	b2da      	uxtb	r2, r3
 8009384:	68bb      	ldr	r3, [r7, #8]
 8009386:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009388:	68bb      	ldr	r3, [r7, #8]
 800938a:	3301      	adds	r3, #1
 800938c:	223a      	movs	r2, #58	; 0x3a
 800938e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009390:	68bb      	ldr	r3, [r7, #8]
 8009392:	3302      	adds	r3, #2
 8009394:	222f      	movs	r2, #47	; 0x2f
 8009396:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009398:	68bb      	ldr	r3, [r7, #8]
 800939a:	3303      	adds	r3, #3
 800939c:	2200      	movs	r2, #0
 800939e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80093a0:	2300      	movs	r3, #0
 80093a2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80093a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80093a6:	4618      	mov	r0, r3
 80093a8:	371c      	adds	r7, #28
 80093aa:	46bd      	mov	sp, r7
 80093ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b0:	4770      	bx	lr
 80093b2:	bf00      	nop
 80093b4:	200019d0 	.word	0x200019d0

080093b8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b082      	sub	sp, #8
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
 80093c0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80093c2:	2200      	movs	r2, #0
 80093c4:	6839      	ldr	r1, [r7, #0]
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f7ff ffaa 	bl	8009320 <FATFS_LinkDriverEx>
 80093cc:	4603      	mov	r3, r0
}
 80093ce:	4618      	mov	r0, r3
 80093d0:	3708      	adds	r7, #8
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bd80      	pop	{r7, pc}
	...

080093d8 <__errno>:
 80093d8:	4b01      	ldr	r3, [pc, #4]	; (80093e0 <__errno+0x8>)
 80093da:	6818      	ldr	r0, [r3, #0]
 80093dc:	4770      	bx	lr
 80093de:	bf00      	nop
 80093e0:	20000014 	.word	0x20000014

080093e4 <__libc_init_array>:
 80093e4:	b570      	push	{r4, r5, r6, lr}
 80093e6:	4e0d      	ldr	r6, [pc, #52]	; (800941c <__libc_init_array+0x38>)
 80093e8:	4c0d      	ldr	r4, [pc, #52]	; (8009420 <__libc_init_array+0x3c>)
 80093ea:	1ba4      	subs	r4, r4, r6
 80093ec:	10a4      	asrs	r4, r4, #2
 80093ee:	2500      	movs	r5, #0
 80093f0:	42a5      	cmp	r5, r4
 80093f2:	d109      	bne.n	8009408 <__libc_init_array+0x24>
 80093f4:	4e0b      	ldr	r6, [pc, #44]	; (8009424 <__libc_init_array+0x40>)
 80093f6:	4c0c      	ldr	r4, [pc, #48]	; (8009428 <__libc_init_array+0x44>)
 80093f8:	f001 f95c 	bl	800a6b4 <_init>
 80093fc:	1ba4      	subs	r4, r4, r6
 80093fe:	10a4      	asrs	r4, r4, #2
 8009400:	2500      	movs	r5, #0
 8009402:	42a5      	cmp	r5, r4
 8009404:	d105      	bne.n	8009412 <__libc_init_array+0x2e>
 8009406:	bd70      	pop	{r4, r5, r6, pc}
 8009408:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800940c:	4798      	blx	r3
 800940e:	3501      	adds	r5, #1
 8009410:	e7ee      	b.n	80093f0 <__libc_init_array+0xc>
 8009412:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009416:	4798      	blx	r3
 8009418:	3501      	adds	r5, #1
 800941a:	e7f2      	b.n	8009402 <__libc_init_array+0x1e>
 800941c:	0800a8b0 	.word	0x0800a8b0
 8009420:	0800a8b0 	.word	0x0800a8b0
 8009424:	0800a8b0 	.word	0x0800a8b0
 8009428:	0800a8b4 	.word	0x0800a8b4

0800942c <__itoa>:
 800942c:	1e93      	subs	r3, r2, #2
 800942e:	2b22      	cmp	r3, #34	; 0x22
 8009430:	b510      	push	{r4, lr}
 8009432:	460c      	mov	r4, r1
 8009434:	d904      	bls.n	8009440 <__itoa+0x14>
 8009436:	2300      	movs	r3, #0
 8009438:	700b      	strb	r3, [r1, #0]
 800943a:	461c      	mov	r4, r3
 800943c:	4620      	mov	r0, r4
 800943e:	bd10      	pop	{r4, pc}
 8009440:	2a0a      	cmp	r2, #10
 8009442:	d109      	bne.n	8009458 <__itoa+0x2c>
 8009444:	2800      	cmp	r0, #0
 8009446:	da07      	bge.n	8009458 <__itoa+0x2c>
 8009448:	232d      	movs	r3, #45	; 0x2d
 800944a:	700b      	strb	r3, [r1, #0]
 800944c:	4240      	negs	r0, r0
 800944e:	2101      	movs	r1, #1
 8009450:	4421      	add	r1, r4
 8009452:	f000 f897 	bl	8009584 <__utoa>
 8009456:	e7f1      	b.n	800943c <__itoa+0x10>
 8009458:	2100      	movs	r1, #0
 800945a:	e7f9      	b.n	8009450 <__itoa+0x24>

0800945c <itoa>:
 800945c:	f7ff bfe6 	b.w	800942c <__itoa>

08009460 <malloc>:
 8009460:	4b02      	ldr	r3, [pc, #8]	; (800946c <malloc+0xc>)
 8009462:	4601      	mov	r1, r0
 8009464:	6818      	ldr	r0, [r3, #0]
 8009466:	f000 b80b 	b.w	8009480 <_malloc_r>
 800946a:	bf00      	nop
 800946c:	20000014 	.word	0x20000014

08009470 <memset>:
 8009470:	4402      	add	r2, r0
 8009472:	4603      	mov	r3, r0
 8009474:	4293      	cmp	r3, r2
 8009476:	d100      	bne.n	800947a <memset+0xa>
 8009478:	4770      	bx	lr
 800947a:	f803 1b01 	strb.w	r1, [r3], #1
 800947e:	e7f9      	b.n	8009474 <memset+0x4>

08009480 <_malloc_r>:
 8009480:	b570      	push	{r4, r5, r6, lr}
 8009482:	1ccd      	adds	r5, r1, #3
 8009484:	f025 0503 	bic.w	r5, r5, #3
 8009488:	3508      	adds	r5, #8
 800948a:	2d0c      	cmp	r5, #12
 800948c:	bf38      	it	cc
 800948e:	250c      	movcc	r5, #12
 8009490:	2d00      	cmp	r5, #0
 8009492:	4606      	mov	r6, r0
 8009494:	db01      	blt.n	800949a <_malloc_r+0x1a>
 8009496:	42a9      	cmp	r1, r5
 8009498:	d903      	bls.n	80094a2 <_malloc_r+0x22>
 800949a:	230c      	movs	r3, #12
 800949c:	6033      	str	r3, [r6, #0]
 800949e:	2000      	movs	r0, #0
 80094a0:	bd70      	pop	{r4, r5, r6, pc}
 80094a2:	f000 f8ad 	bl	8009600 <__malloc_lock>
 80094a6:	4a21      	ldr	r2, [pc, #132]	; (800952c <_malloc_r+0xac>)
 80094a8:	6814      	ldr	r4, [r2, #0]
 80094aa:	4621      	mov	r1, r4
 80094ac:	b991      	cbnz	r1, 80094d4 <_malloc_r+0x54>
 80094ae:	4c20      	ldr	r4, [pc, #128]	; (8009530 <_malloc_r+0xb0>)
 80094b0:	6823      	ldr	r3, [r4, #0]
 80094b2:	b91b      	cbnz	r3, 80094bc <_malloc_r+0x3c>
 80094b4:	4630      	mov	r0, r6
 80094b6:	f000 f83d 	bl	8009534 <_sbrk_r>
 80094ba:	6020      	str	r0, [r4, #0]
 80094bc:	4629      	mov	r1, r5
 80094be:	4630      	mov	r0, r6
 80094c0:	f000 f838 	bl	8009534 <_sbrk_r>
 80094c4:	1c43      	adds	r3, r0, #1
 80094c6:	d124      	bne.n	8009512 <_malloc_r+0x92>
 80094c8:	230c      	movs	r3, #12
 80094ca:	6033      	str	r3, [r6, #0]
 80094cc:	4630      	mov	r0, r6
 80094ce:	f000 f898 	bl	8009602 <__malloc_unlock>
 80094d2:	e7e4      	b.n	800949e <_malloc_r+0x1e>
 80094d4:	680b      	ldr	r3, [r1, #0]
 80094d6:	1b5b      	subs	r3, r3, r5
 80094d8:	d418      	bmi.n	800950c <_malloc_r+0x8c>
 80094da:	2b0b      	cmp	r3, #11
 80094dc:	d90f      	bls.n	80094fe <_malloc_r+0x7e>
 80094de:	600b      	str	r3, [r1, #0]
 80094e0:	50cd      	str	r5, [r1, r3]
 80094e2:	18cc      	adds	r4, r1, r3
 80094e4:	4630      	mov	r0, r6
 80094e6:	f000 f88c 	bl	8009602 <__malloc_unlock>
 80094ea:	f104 000b 	add.w	r0, r4, #11
 80094ee:	1d23      	adds	r3, r4, #4
 80094f0:	f020 0007 	bic.w	r0, r0, #7
 80094f4:	1ac3      	subs	r3, r0, r3
 80094f6:	d0d3      	beq.n	80094a0 <_malloc_r+0x20>
 80094f8:	425a      	negs	r2, r3
 80094fa:	50e2      	str	r2, [r4, r3]
 80094fc:	e7d0      	b.n	80094a0 <_malloc_r+0x20>
 80094fe:	428c      	cmp	r4, r1
 8009500:	684b      	ldr	r3, [r1, #4]
 8009502:	bf16      	itet	ne
 8009504:	6063      	strne	r3, [r4, #4]
 8009506:	6013      	streq	r3, [r2, #0]
 8009508:	460c      	movne	r4, r1
 800950a:	e7eb      	b.n	80094e4 <_malloc_r+0x64>
 800950c:	460c      	mov	r4, r1
 800950e:	6849      	ldr	r1, [r1, #4]
 8009510:	e7cc      	b.n	80094ac <_malloc_r+0x2c>
 8009512:	1cc4      	adds	r4, r0, #3
 8009514:	f024 0403 	bic.w	r4, r4, #3
 8009518:	42a0      	cmp	r0, r4
 800951a:	d005      	beq.n	8009528 <_malloc_r+0xa8>
 800951c:	1a21      	subs	r1, r4, r0
 800951e:	4630      	mov	r0, r6
 8009520:	f000 f808 	bl	8009534 <_sbrk_r>
 8009524:	3001      	adds	r0, #1
 8009526:	d0cf      	beq.n	80094c8 <_malloc_r+0x48>
 8009528:	6025      	str	r5, [r4, #0]
 800952a:	e7db      	b.n	80094e4 <_malloc_r+0x64>
 800952c:	200019dc 	.word	0x200019dc
 8009530:	200019e0 	.word	0x200019e0

08009534 <_sbrk_r>:
 8009534:	b538      	push	{r3, r4, r5, lr}
 8009536:	4c06      	ldr	r4, [pc, #24]	; (8009550 <_sbrk_r+0x1c>)
 8009538:	2300      	movs	r3, #0
 800953a:	4605      	mov	r5, r0
 800953c:	4608      	mov	r0, r1
 800953e:	6023      	str	r3, [r4, #0]
 8009540:	f7f8 fdae 	bl	80020a0 <_sbrk>
 8009544:	1c43      	adds	r3, r0, #1
 8009546:	d102      	bne.n	800954e <_sbrk_r+0x1a>
 8009548:	6823      	ldr	r3, [r4, #0]
 800954a:	b103      	cbz	r3, 800954e <_sbrk_r+0x1a>
 800954c:	602b      	str	r3, [r5, #0]
 800954e:	bd38      	pop	{r3, r4, r5, pc}
 8009550:	20003c9c 	.word	0x20003c9c

08009554 <strcat>:
 8009554:	b510      	push	{r4, lr}
 8009556:	4603      	mov	r3, r0
 8009558:	781a      	ldrb	r2, [r3, #0]
 800955a:	1c5c      	adds	r4, r3, #1
 800955c:	b93a      	cbnz	r2, 800956e <strcat+0x1a>
 800955e:	3b01      	subs	r3, #1
 8009560:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009564:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009568:	2a00      	cmp	r2, #0
 800956a:	d1f9      	bne.n	8009560 <strcat+0xc>
 800956c:	bd10      	pop	{r4, pc}
 800956e:	4623      	mov	r3, r4
 8009570:	e7f2      	b.n	8009558 <strcat+0x4>

08009572 <strcpy>:
 8009572:	4603      	mov	r3, r0
 8009574:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009578:	f803 2b01 	strb.w	r2, [r3], #1
 800957c:	2a00      	cmp	r2, #0
 800957e:	d1f9      	bne.n	8009574 <strcpy+0x2>
 8009580:	4770      	bx	lr
	...

08009584 <__utoa>:
 8009584:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009586:	4b1d      	ldr	r3, [pc, #116]	; (80095fc <__utoa+0x78>)
 8009588:	b08b      	sub	sp, #44	; 0x2c
 800958a:	4605      	mov	r5, r0
 800958c:	460c      	mov	r4, r1
 800958e:	466e      	mov	r6, sp
 8009590:	f103 0c20 	add.w	ip, r3, #32
 8009594:	6818      	ldr	r0, [r3, #0]
 8009596:	6859      	ldr	r1, [r3, #4]
 8009598:	4637      	mov	r7, r6
 800959a:	c703      	stmia	r7!, {r0, r1}
 800959c:	3308      	adds	r3, #8
 800959e:	4563      	cmp	r3, ip
 80095a0:	463e      	mov	r6, r7
 80095a2:	d1f7      	bne.n	8009594 <__utoa+0x10>
 80095a4:	6818      	ldr	r0, [r3, #0]
 80095a6:	791b      	ldrb	r3, [r3, #4]
 80095a8:	713b      	strb	r3, [r7, #4]
 80095aa:	1e93      	subs	r3, r2, #2
 80095ac:	2b22      	cmp	r3, #34	; 0x22
 80095ae:	6038      	str	r0, [r7, #0]
 80095b0:	f04f 0300 	mov.w	r3, #0
 80095b4:	d904      	bls.n	80095c0 <__utoa+0x3c>
 80095b6:	7023      	strb	r3, [r4, #0]
 80095b8:	461c      	mov	r4, r3
 80095ba:	4620      	mov	r0, r4
 80095bc:	b00b      	add	sp, #44	; 0x2c
 80095be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095c0:	1e66      	subs	r6, r4, #1
 80095c2:	fbb5 f0f2 	udiv	r0, r5, r2
 80095c6:	af0a      	add	r7, sp, #40	; 0x28
 80095c8:	fb02 5510 	mls	r5, r2, r0, r5
 80095cc:	443d      	add	r5, r7
 80095ce:	1c59      	adds	r1, r3, #1
 80095d0:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 80095d4:	f806 5f01 	strb.w	r5, [r6, #1]!
 80095d8:	4605      	mov	r5, r0
 80095da:	b968      	cbnz	r0, 80095f8 <__utoa+0x74>
 80095dc:	5460      	strb	r0, [r4, r1]
 80095de:	4423      	add	r3, r4
 80095e0:	4622      	mov	r2, r4
 80095e2:	1b19      	subs	r1, r3, r4
 80095e4:	1b10      	subs	r0, r2, r4
 80095e6:	4281      	cmp	r1, r0
 80095e8:	dde7      	ble.n	80095ba <__utoa+0x36>
 80095ea:	7811      	ldrb	r1, [r2, #0]
 80095ec:	7818      	ldrb	r0, [r3, #0]
 80095ee:	f802 0b01 	strb.w	r0, [r2], #1
 80095f2:	f803 1901 	strb.w	r1, [r3], #-1
 80095f6:	e7f4      	b.n	80095e2 <__utoa+0x5e>
 80095f8:	460b      	mov	r3, r1
 80095fa:	e7e2      	b.n	80095c2 <__utoa+0x3e>
 80095fc:	0800a838 	.word	0x0800a838

08009600 <__malloc_lock>:
 8009600:	4770      	bx	lr

08009602 <__malloc_unlock>:
 8009602:	4770      	bx	lr

08009604 <pow>:
 8009604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009608:	ed2d 8b04 	vpush	{d8-d9}
 800960c:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 80098e0 <pow+0x2dc>
 8009610:	b08d      	sub	sp, #52	; 0x34
 8009612:	ec57 6b10 	vmov	r6, r7, d0
 8009616:	ec55 4b11 	vmov	r4, r5, d1
 800961a:	f000 f965 	bl	80098e8 <__ieee754_pow>
 800961e:	f999 3000 	ldrsb.w	r3, [r9]
 8009622:	9300      	str	r3, [sp, #0]
 8009624:	3301      	adds	r3, #1
 8009626:	eeb0 8a40 	vmov.f32	s16, s0
 800962a:	eef0 8a60 	vmov.f32	s17, s1
 800962e:	46c8      	mov	r8, r9
 8009630:	d05f      	beq.n	80096f2 <pow+0xee>
 8009632:	4622      	mov	r2, r4
 8009634:	462b      	mov	r3, r5
 8009636:	4620      	mov	r0, r4
 8009638:	4629      	mov	r1, r5
 800963a:	f7f7 fa2b 	bl	8000a94 <__aeabi_dcmpun>
 800963e:	4683      	mov	fp, r0
 8009640:	2800      	cmp	r0, #0
 8009642:	d156      	bne.n	80096f2 <pow+0xee>
 8009644:	4632      	mov	r2, r6
 8009646:	463b      	mov	r3, r7
 8009648:	4630      	mov	r0, r6
 800964a:	4639      	mov	r1, r7
 800964c:	f7f7 fa22 	bl	8000a94 <__aeabi_dcmpun>
 8009650:	9001      	str	r0, [sp, #4]
 8009652:	b1e8      	cbz	r0, 8009690 <pow+0x8c>
 8009654:	2200      	movs	r2, #0
 8009656:	2300      	movs	r3, #0
 8009658:	4620      	mov	r0, r4
 800965a:	4629      	mov	r1, r5
 800965c:	f7f7 f9e8 	bl	8000a30 <__aeabi_dcmpeq>
 8009660:	2800      	cmp	r0, #0
 8009662:	d046      	beq.n	80096f2 <pow+0xee>
 8009664:	2301      	movs	r3, #1
 8009666:	9302      	str	r3, [sp, #8]
 8009668:	4b96      	ldr	r3, [pc, #600]	; (80098c4 <pow+0x2c0>)
 800966a:	9303      	str	r3, [sp, #12]
 800966c:	4b96      	ldr	r3, [pc, #600]	; (80098c8 <pow+0x2c4>)
 800966e:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8009672:	2200      	movs	r2, #0
 8009674:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009678:	9b00      	ldr	r3, [sp, #0]
 800967a:	2b02      	cmp	r3, #2
 800967c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009680:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009684:	d033      	beq.n	80096ee <pow+0xea>
 8009686:	a802      	add	r0, sp, #8
 8009688:	f000 fefd 	bl	800a486 <matherr>
 800968c:	bb48      	cbnz	r0, 80096e2 <pow+0xde>
 800968e:	e05d      	b.n	800974c <pow+0x148>
 8009690:	f04f 0a00 	mov.w	sl, #0
 8009694:	f04f 0b00 	mov.w	fp, #0
 8009698:	4652      	mov	r2, sl
 800969a:	465b      	mov	r3, fp
 800969c:	4630      	mov	r0, r6
 800969e:	4639      	mov	r1, r7
 80096a0:	f7f7 f9c6 	bl	8000a30 <__aeabi_dcmpeq>
 80096a4:	ec4b ab19 	vmov	d9, sl, fp
 80096a8:	2800      	cmp	r0, #0
 80096aa:	d054      	beq.n	8009756 <pow+0x152>
 80096ac:	4652      	mov	r2, sl
 80096ae:	465b      	mov	r3, fp
 80096b0:	4620      	mov	r0, r4
 80096b2:	4629      	mov	r1, r5
 80096b4:	f7f7 f9bc 	bl	8000a30 <__aeabi_dcmpeq>
 80096b8:	4680      	mov	r8, r0
 80096ba:	b318      	cbz	r0, 8009704 <pow+0x100>
 80096bc:	2301      	movs	r3, #1
 80096be:	9302      	str	r3, [sp, #8]
 80096c0:	4b80      	ldr	r3, [pc, #512]	; (80098c4 <pow+0x2c0>)
 80096c2:	9303      	str	r3, [sp, #12]
 80096c4:	9b01      	ldr	r3, [sp, #4]
 80096c6:	930a      	str	r3, [sp, #40]	; 0x28
 80096c8:	9b00      	ldr	r3, [sp, #0]
 80096ca:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80096ce:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80096d2:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d0d5      	beq.n	8009686 <pow+0x82>
 80096da:	4b7b      	ldr	r3, [pc, #492]	; (80098c8 <pow+0x2c4>)
 80096dc:	2200      	movs	r2, #0
 80096de:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80096e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096e4:	b11b      	cbz	r3, 80096ee <pow+0xea>
 80096e6:	f7ff fe77 	bl	80093d8 <__errno>
 80096ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096ec:	6003      	str	r3, [r0, #0]
 80096ee:	ed9d 8b08 	vldr	d8, [sp, #32]
 80096f2:	eeb0 0a48 	vmov.f32	s0, s16
 80096f6:	eef0 0a68 	vmov.f32	s1, s17
 80096fa:	b00d      	add	sp, #52	; 0x34
 80096fc:	ecbd 8b04 	vpop	{d8-d9}
 8009700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009704:	ec45 4b10 	vmov	d0, r4, r5
 8009708:	f000 feb5 	bl	800a476 <finite>
 800970c:	2800      	cmp	r0, #0
 800970e:	d0f0      	beq.n	80096f2 <pow+0xee>
 8009710:	4652      	mov	r2, sl
 8009712:	465b      	mov	r3, fp
 8009714:	4620      	mov	r0, r4
 8009716:	4629      	mov	r1, r5
 8009718:	f7f7 f994 	bl	8000a44 <__aeabi_dcmplt>
 800971c:	2800      	cmp	r0, #0
 800971e:	d0e8      	beq.n	80096f2 <pow+0xee>
 8009720:	2301      	movs	r3, #1
 8009722:	9302      	str	r3, [sp, #8]
 8009724:	4b67      	ldr	r3, [pc, #412]	; (80098c4 <pow+0x2c0>)
 8009726:	9303      	str	r3, [sp, #12]
 8009728:	f999 3000 	ldrsb.w	r3, [r9]
 800972c:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8009730:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009734:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009738:	b913      	cbnz	r3, 8009740 <pow+0x13c>
 800973a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800973e:	e7a2      	b.n	8009686 <pow+0x82>
 8009740:	4962      	ldr	r1, [pc, #392]	; (80098cc <pow+0x2c8>)
 8009742:	2000      	movs	r0, #0
 8009744:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009748:	2b02      	cmp	r3, #2
 800974a:	d19c      	bne.n	8009686 <pow+0x82>
 800974c:	f7ff fe44 	bl	80093d8 <__errno>
 8009750:	2321      	movs	r3, #33	; 0x21
 8009752:	6003      	str	r3, [r0, #0]
 8009754:	e7c5      	b.n	80096e2 <pow+0xde>
 8009756:	eeb0 0a48 	vmov.f32	s0, s16
 800975a:	eef0 0a68 	vmov.f32	s1, s17
 800975e:	f000 fe8a 	bl	800a476 <finite>
 8009762:	9000      	str	r0, [sp, #0]
 8009764:	2800      	cmp	r0, #0
 8009766:	f040 8081 	bne.w	800986c <pow+0x268>
 800976a:	ec47 6b10 	vmov	d0, r6, r7
 800976e:	f000 fe82 	bl	800a476 <finite>
 8009772:	2800      	cmp	r0, #0
 8009774:	d07a      	beq.n	800986c <pow+0x268>
 8009776:	ec45 4b10 	vmov	d0, r4, r5
 800977a:	f000 fe7c 	bl	800a476 <finite>
 800977e:	2800      	cmp	r0, #0
 8009780:	d074      	beq.n	800986c <pow+0x268>
 8009782:	ec53 2b18 	vmov	r2, r3, d8
 8009786:	ee18 0a10 	vmov	r0, s16
 800978a:	4619      	mov	r1, r3
 800978c:	f7f7 f982 	bl	8000a94 <__aeabi_dcmpun>
 8009790:	f999 9000 	ldrsb.w	r9, [r9]
 8009794:	4b4b      	ldr	r3, [pc, #300]	; (80098c4 <pow+0x2c0>)
 8009796:	b1b0      	cbz	r0, 80097c6 <pow+0x1c2>
 8009798:	2201      	movs	r2, #1
 800979a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800979e:	9b00      	ldr	r3, [sp, #0]
 80097a0:	930a      	str	r3, [sp, #40]	; 0x28
 80097a2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80097a6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80097aa:	f1b9 0f00 	cmp.w	r9, #0
 80097ae:	d0c4      	beq.n	800973a <pow+0x136>
 80097b0:	4652      	mov	r2, sl
 80097b2:	465b      	mov	r3, fp
 80097b4:	4650      	mov	r0, sl
 80097b6:	4659      	mov	r1, fp
 80097b8:	f7f6 fffc 	bl	80007b4 <__aeabi_ddiv>
 80097bc:	f1b9 0f02 	cmp.w	r9, #2
 80097c0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80097c4:	e7c1      	b.n	800974a <pow+0x146>
 80097c6:	2203      	movs	r2, #3
 80097c8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80097cc:	900a      	str	r0, [sp, #40]	; 0x28
 80097ce:	4629      	mov	r1, r5
 80097d0:	4620      	mov	r0, r4
 80097d2:	2200      	movs	r2, #0
 80097d4:	4b3e      	ldr	r3, [pc, #248]	; (80098d0 <pow+0x2cc>)
 80097d6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80097da:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80097de:	f7f6 febf 	bl	8000560 <__aeabi_dmul>
 80097e2:	4604      	mov	r4, r0
 80097e4:	460d      	mov	r5, r1
 80097e6:	f1b9 0f00 	cmp.w	r9, #0
 80097ea:	d124      	bne.n	8009836 <pow+0x232>
 80097ec:	4b39      	ldr	r3, [pc, #228]	; (80098d4 <pow+0x2d0>)
 80097ee:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80097f2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80097f6:	4630      	mov	r0, r6
 80097f8:	4652      	mov	r2, sl
 80097fa:	465b      	mov	r3, fp
 80097fc:	4639      	mov	r1, r7
 80097fe:	f7f7 f921 	bl	8000a44 <__aeabi_dcmplt>
 8009802:	2800      	cmp	r0, #0
 8009804:	d056      	beq.n	80098b4 <pow+0x2b0>
 8009806:	ec45 4b10 	vmov	d0, r4, r5
 800980a:	f000 fe49 	bl	800a4a0 <rint>
 800980e:	4622      	mov	r2, r4
 8009810:	462b      	mov	r3, r5
 8009812:	ec51 0b10 	vmov	r0, r1, d0
 8009816:	f7f7 f90b 	bl	8000a30 <__aeabi_dcmpeq>
 800981a:	b920      	cbnz	r0, 8009826 <pow+0x222>
 800981c:	4b2e      	ldr	r3, [pc, #184]	; (80098d8 <pow+0x2d4>)
 800981e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8009822:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009826:	f998 3000 	ldrsb.w	r3, [r8]
 800982a:	2b02      	cmp	r3, #2
 800982c:	d142      	bne.n	80098b4 <pow+0x2b0>
 800982e:	f7ff fdd3 	bl	80093d8 <__errno>
 8009832:	2322      	movs	r3, #34	; 0x22
 8009834:	e78d      	b.n	8009752 <pow+0x14e>
 8009836:	4b29      	ldr	r3, [pc, #164]	; (80098dc <pow+0x2d8>)
 8009838:	2200      	movs	r2, #0
 800983a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800983e:	4630      	mov	r0, r6
 8009840:	4652      	mov	r2, sl
 8009842:	465b      	mov	r3, fp
 8009844:	4639      	mov	r1, r7
 8009846:	f7f7 f8fd 	bl	8000a44 <__aeabi_dcmplt>
 800984a:	2800      	cmp	r0, #0
 800984c:	d0eb      	beq.n	8009826 <pow+0x222>
 800984e:	ec45 4b10 	vmov	d0, r4, r5
 8009852:	f000 fe25 	bl	800a4a0 <rint>
 8009856:	4622      	mov	r2, r4
 8009858:	462b      	mov	r3, r5
 800985a:	ec51 0b10 	vmov	r0, r1, d0
 800985e:	f7f7 f8e7 	bl	8000a30 <__aeabi_dcmpeq>
 8009862:	2800      	cmp	r0, #0
 8009864:	d1df      	bne.n	8009826 <pow+0x222>
 8009866:	2200      	movs	r2, #0
 8009868:	4b18      	ldr	r3, [pc, #96]	; (80098cc <pow+0x2c8>)
 800986a:	e7da      	b.n	8009822 <pow+0x21e>
 800986c:	2200      	movs	r2, #0
 800986e:	2300      	movs	r3, #0
 8009870:	ec51 0b18 	vmov	r0, r1, d8
 8009874:	f7f7 f8dc 	bl	8000a30 <__aeabi_dcmpeq>
 8009878:	2800      	cmp	r0, #0
 800987a:	f43f af3a 	beq.w	80096f2 <pow+0xee>
 800987e:	ec47 6b10 	vmov	d0, r6, r7
 8009882:	f000 fdf8 	bl	800a476 <finite>
 8009886:	2800      	cmp	r0, #0
 8009888:	f43f af33 	beq.w	80096f2 <pow+0xee>
 800988c:	ec45 4b10 	vmov	d0, r4, r5
 8009890:	f000 fdf1 	bl	800a476 <finite>
 8009894:	2800      	cmp	r0, #0
 8009896:	f43f af2c 	beq.w	80096f2 <pow+0xee>
 800989a:	2304      	movs	r3, #4
 800989c:	9302      	str	r3, [sp, #8]
 800989e:	4b09      	ldr	r3, [pc, #36]	; (80098c4 <pow+0x2c0>)
 80098a0:	9303      	str	r3, [sp, #12]
 80098a2:	2300      	movs	r3, #0
 80098a4:	930a      	str	r3, [sp, #40]	; 0x28
 80098a6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80098aa:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80098ae:	ed8d 9b08 	vstr	d9, [sp, #32]
 80098b2:	e7b8      	b.n	8009826 <pow+0x222>
 80098b4:	a802      	add	r0, sp, #8
 80098b6:	f000 fde6 	bl	800a486 <matherr>
 80098ba:	2800      	cmp	r0, #0
 80098bc:	f47f af11 	bne.w	80096e2 <pow+0xde>
 80098c0:	e7b5      	b.n	800982e <pow+0x22a>
 80098c2:	bf00      	nop
 80098c4:	0800a85d 	.word	0x0800a85d
 80098c8:	3ff00000 	.word	0x3ff00000
 80098cc:	fff00000 	.word	0xfff00000
 80098d0:	3fe00000 	.word	0x3fe00000
 80098d4:	47efffff 	.word	0x47efffff
 80098d8:	c7efffff 	.word	0xc7efffff
 80098dc:	7ff00000 	.word	0x7ff00000
 80098e0:	20000078 	.word	0x20000078
 80098e4:	00000000 	.word	0x00000000

080098e8 <__ieee754_pow>:
 80098e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098ec:	b091      	sub	sp, #68	; 0x44
 80098ee:	ed8d 1b00 	vstr	d1, [sp]
 80098f2:	e9dd 2900 	ldrd	r2, r9, [sp]
 80098f6:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80098fa:	ea58 0302 	orrs.w	r3, r8, r2
 80098fe:	ec57 6b10 	vmov	r6, r7, d0
 8009902:	f000 84be 	beq.w	800a282 <__ieee754_pow+0x99a>
 8009906:	4b7a      	ldr	r3, [pc, #488]	; (8009af0 <__ieee754_pow+0x208>)
 8009908:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800990c:	429c      	cmp	r4, r3
 800990e:	463d      	mov	r5, r7
 8009910:	ee10 aa10 	vmov	sl, s0
 8009914:	dc09      	bgt.n	800992a <__ieee754_pow+0x42>
 8009916:	d103      	bne.n	8009920 <__ieee754_pow+0x38>
 8009918:	b93e      	cbnz	r6, 800992a <__ieee754_pow+0x42>
 800991a:	45a0      	cmp	r8, r4
 800991c:	dc0d      	bgt.n	800993a <__ieee754_pow+0x52>
 800991e:	e001      	b.n	8009924 <__ieee754_pow+0x3c>
 8009920:	4598      	cmp	r8, r3
 8009922:	dc02      	bgt.n	800992a <__ieee754_pow+0x42>
 8009924:	4598      	cmp	r8, r3
 8009926:	d10e      	bne.n	8009946 <__ieee754_pow+0x5e>
 8009928:	b16a      	cbz	r2, 8009946 <__ieee754_pow+0x5e>
 800992a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800992e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009932:	ea54 030a 	orrs.w	r3, r4, sl
 8009936:	f000 84a4 	beq.w	800a282 <__ieee754_pow+0x99a>
 800993a:	486e      	ldr	r0, [pc, #440]	; (8009af4 <__ieee754_pow+0x20c>)
 800993c:	b011      	add	sp, #68	; 0x44
 800993e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009942:	f000 bda5 	b.w	800a490 <nan>
 8009946:	2d00      	cmp	r5, #0
 8009948:	da53      	bge.n	80099f2 <__ieee754_pow+0x10a>
 800994a:	4b6b      	ldr	r3, [pc, #428]	; (8009af8 <__ieee754_pow+0x210>)
 800994c:	4598      	cmp	r8, r3
 800994e:	dc4d      	bgt.n	80099ec <__ieee754_pow+0x104>
 8009950:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8009954:	4598      	cmp	r8, r3
 8009956:	dd4c      	ble.n	80099f2 <__ieee754_pow+0x10a>
 8009958:	ea4f 5328 	mov.w	r3, r8, asr #20
 800995c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009960:	2b14      	cmp	r3, #20
 8009962:	dd26      	ble.n	80099b2 <__ieee754_pow+0xca>
 8009964:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8009968:	fa22 f103 	lsr.w	r1, r2, r3
 800996c:	fa01 f303 	lsl.w	r3, r1, r3
 8009970:	4293      	cmp	r3, r2
 8009972:	d13e      	bne.n	80099f2 <__ieee754_pow+0x10a>
 8009974:	f001 0101 	and.w	r1, r1, #1
 8009978:	f1c1 0b02 	rsb	fp, r1, #2
 800997c:	2a00      	cmp	r2, #0
 800997e:	d15b      	bne.n	8009a38 <__ieee754_pow+0x150>
 8009980:	4b5b      	ldr	r3, [pc, #364]	; (8009af0 <__ieee754_pow+0x208>)
 8009982:	4598      	cmp	r8, r3
 8009984:	d124      	bne.n	80099d0 <__ieee754_pow+0xe8>
 8009986:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800998a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800998e:	ea53 030a 	orrs.w	r3, r3, sl
 8009992:	f000 8476 	beq.w	800a282 <__ieee754_pow+0x99a>
 8009996:	4b59      	ldr	r3, [pc, #356]	; (8009afc <__ieee754_pow+0x214>)
 8009998:	429c      	cmp	r4, r3
 800999a:	dd2d      	ble.n	80099f8 <__ieee754_pow+0x110>
 800999c:	f1b9 0f00 	cmp.w	r9, #0
 80099a0:	f280 8473 	bge.w	800a28a <__ieee754_pow+0x9a2>
 80099a4:	2000      	movs	r0, #0
 80099a6:	2100      	movs	r1, #0
 80099a8:	ec41 0b10 	vmov	d0, r0, r1
 80099ac:	b011      	add	sp, #68	; 0x44
 80099ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099b2:	2a00      	cmp	r2, #0
 80099b4:	d13e      	bne.n	8009a34 <__ieee754_pow+0x14c>
 80099b6:	f1c3 0314 	rsb	r3, r3, #20
 80099ba:	fa48 f103 	asr.w	r1, r8, r3
 80099be:	fa01 f303 	lsl.w	r3, r1, r3
 80099c2:	4543      	cmp	r3, r8
 80099c4:	f040 8469 	bne.w	800a29a <__ieee754_pow+0x9b2>
 80099c8:	f001 0101 	and.w	r1, r1, #1
 80099cc:	f1c1 0b02 	rsb	fp, r1, #2
 80099d0:	4b4b      	ldr	r3, [pc, #300]	; (8009b00 <__ieee754_pow+0x218>)
 80099d2:	4598      	cmp	r8, r3
 80099d4:	d118      	bne.n	8009a08 <__ieee754_pow+0x120>
 80099d6:	f1b9 0f00 	cmp.w	r9, #0
 80099da:	f280 845a 	bge.w	800a292 <__ieee754_pow+0x9aa>
 80099de:	4948      	ldr	r1, [pc, #288]	; (8009b00 <__ieee754_pow+0x218>)
 80099e0:	4632      	mov	r2, r6
 80099e2:	463b      	mov	r3, r7
 80099e4:	2000      	movs	r0, #0
 80099e6:	f7f6 fee5 	bl	80007b4 <__aeabi_ddiv>
 80099ea:	e7dd      	b.n	80099a8 <__ieee754_pow+0xc0>
 80099ec:	f04f 0b02 	mov.w	fp, #2
 80099f0:	e7c4      	b.n	800997c <__ieee754_pow+0x94>
 80099f2:	f04f 0b00 	mov.w	fp, #0
 80099f6:	e7c1      	b.n	800997c <__ieee754_pow+0x94>
 80099f8:	f1b9 0f00 	cmp.w	r9, #0
 80099fc:	dad2      	bge.n	80099a4 <__ieee754_pow+0xbc>
 80099fe:	e9dd 0300 	ldrd	r0, r3, [sp]
 8009a02:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009a06:	e7cf      	b.n	80099a8 <__ieee754_pow+0xc0>
 8009a08:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8009a0c:	d106      	bne.n	8009a1c <__ieee754_pow+0x134>
 8009a0e:	4632      	mov	r2, r6
 8009a10:	463b      	mov	r3, r7
 8009a12:	4610      	mov	r0, r2
 8009a14:	4619      	mov	r1, r3
 8009a16:	f7f6 fda3 	bl	8000560 <__aeabi_dmul>
 8009a1a:	e7c5      	b.n	80099a8 <__ieee754_pow+0xc0>
 8009a1c:	4b39      	ldr	r3, [pc, #228]	; (8009b04 <__ieee754_pow+0x21c>)
 8009a1e:	4599      	cmp	r9, r3
 8009a20:	d10a      	bne.n	8009a38 <__ieee754_pow+0x150>
 8009a22:	2d00      	cmp	r5, #0
 8009a24:	db08      	blt.n	8009a38 <__ieee754_pow+0x150>
 8009a26:	ec47 6b10 	vmov	d0, r6, r7
 8009a2a:	b011      	add	sp, #68	; 0x44
 8009a2c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a30:	f000 bc68 	b.w	800a304 <__ieee754_sqrt>
 8009a34:	f04f 0b00 	mov.w	fp, #0
 8009a38:	ec47 6b10 	vmov	d0, r6, r7
 8009a3c:	f000 fd12 	bl	800a464 <fabs>
 8009a40:	ec51 0b10 	vmov	r0, r1, d0
 8009a44:	f1ba 0f00 	cmp.w	sl, #0
 8009a48:	d127      	bne.n	8009a9a <__ieee754_pow+0x1b2>
 8009a4a:	b124      	cbz	r4, 8009a56 <__ieee754_pow+0x16e>
 8009a4c:	4b2c      	ldr	r3, [pc, #176]	; (8009b00 <__ieee754_pow+0x218>)
 8009a4e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8009a52:	429a      	cmp	r2, r3
 8009a54:	d121      	bne.n	8009a9a <__ieee754_pow+0x1b2>
 8009a56:	f1b9 0f00 	cmp.w	r9, #0
 8009a5a:	da05      	bge.n	8009a68 <__ieee754_pow+0x180>
 8009a5c:	4602      	mov	r2, r0
 8009a5e:	460b      	mov	r3, r1
 8009a60:	2000      	movs	r0, #0
 8009a62:	4927      	ldr	r1, [pc, #156]	; (8009b00 <__ieee754_pow+0x218>)
 8009a64:	f7f6 fea6 	bl	80007b4 <__aeabi_ddiv>
 8009a68:	2d00      	cmp	r5, #0
 8009a6a:	da9d      	bge.n	80099a8 <__ieee754_pow+0xc0>
 8009a6c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009a70:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009a74:	ea54 030b 	orrs.w	r3, r4, fp
 8009a78:	d108      	bne.n	8009a8c <__ieee754_pow+0x1a4>
 8009a7a:	4602      	mov	r2, r0
 8009a7c:	460b      	mov	r3, r1
 8009a7e:	4610      	mov	r0, r2
 8009a80:	4619      	mov	r1, r3
 8009a82:	f7f6 fbb5 	bl	80001f0 <__aeabi_dsub>
 8009a86:	4602      	mov	r2, r0
 8009a88:	460b      	mov	r3, r1
 8009a8a:	e7ac      	b.n	80099e6 <__ieee754_pow+0xfe>
 8009a8c:	f1bb 0f01 	cmp.w	fp, #1
 8009a90:	d18a      	bne.n	80099a8 <__ieee754_pow+0xc0>
 8009a92:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009a96:	4619      	mov	r1, r3
 8009a98:	e786      	b.n	80099a8 <__ieee754_pow+0xc0>
 8009a9a:	0fed      	lsrs	r5, r5, #31
 8009a9c:	1e6b      	subs	r3, r5, #1
 8009a9e:	930d      	str	r3, [sp, #52]	; 0x34
 8009aa0:	ea5b 0303 	orrs.w	r3, fp, r3
 8009aa4:	d102      	bne.n	8009aac <__ieee754_pow+0x1c4>
 8009aa6:	4632      	mov	r2, r6
 8009aa8:	463b      	mov	r3, r7
 8009aaa:	e7e8      	b.n	8009a7e <__ieee754_pow+0x196>
 8009aac:	4b16      	ldr	r3, [pc, #88]	; (8009b08 <__ieee754_pow+0x220>)
 8009aae:	4598      	cmp	r8, r3
 8009ab0:	f340 80fe 	ble.w	8009cb0 <__ieee754_pow+0x3c8>
 8009ab4:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8009ab8:	4598      	cmp	r8, r3
 8009aba:	dd0a      	ble.n	8009ad2 <__ieee754_pow+0x1ea>
 8009abc:	4b0f      	ldr	r3, [pc, #60]	; (8009afc <__ieee754_pow+0x214>)
 8009abe:	429c      	cmp	r4, r3
 8009ac0:	dc0d      	bgt.n	8009ade <__ieee754_pow+0x1f6>
 8009ac2:	f1b9 0f00 	cmp.w	r9, #0
 8009ac6:	f6bf af6d 	bge.w	80099a4 <__ieee754_pow+0xbc>
 8009aca:	a307      	add	r3, pc, #28	; (adr r3, 8009ae8 <__ieee754_pow+0x200>)
 8009acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ad0:	e79f      	b.n	8009a12 <__ieee754_pow+0x12a>
 8009ad2:	4b0e      	ldr	r3, [pc, #56]	; (8009b0c <__ieee754_pow+0x224>)
 8009ad4:	429c      	cmp	r4, r3
 8009ad6:	ddf4      	ble.n	8009ac2 <__ieee754_pow+0x1da>
 8009ad8:	4b09      	ldr	r3, [pc, #36]	; (8009b00 <__ieee754_pow+0x218>)
 8009ada:	429c      	cmp	r4, r3
 8009adc:	dd18      	ble.n	8009b10 <__ieee754_pow+0x228>
 8009ade:	f1b9 0f00 	cmp.w	r9, #0
 8009ae2:	dcf2      	bgt.n	8009aca <__ieee754_pow+0x1e2>
 8009ae4:	e75e      	b.n	80099a4 <__ieee754_pow+0xbc>
 8009ae6:	bf00      	nop
 8009ae8:	8800759c 	.word	0x8800759c
 8009aec:	7e37e43c 	.word	0x7e37e43c
 8009af0:	7ff00000 	.word	0x7ff00000
 8009af4:	0800a860 	.word	0x0800a860
 8009af8:	433fffff 	.word	0x433fffff
 8009afc:	3fefffff 	.word	0x3fefffff
 8009b00:	3ff00000 	.word	0x3ff00000
 8009b04:	3fe00000 	.word	0x3fe00000
 8009b08:	41e00000 	.word	0x41e00000
 8009b0c:	3feffffe 	.word	0x3feffffe
 8009b10:	2200      	movs	r2, #0
 8009b12:	4b63      	ldr	r3, [pc, #396]	; (8009ca0 <__ieee754_pow+0x3b8>)
 8009b14:	f7f6 fb6c 	bl	80001f0 <__aeabi_dsub>
 8009b18:	a355      	add	r3, pc, #340	; (adr r3, 8009c70 <__ieee754_pow+0x388>)
 8009b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b1e:	4604      	mov	r4, r0
 8009b20:	460d      	mov	r5, r1
 8009b22:	f7f6 fd1d 	bl	8000560 <__aeabi_dmul>
 8009b26:	a354      	add	r3, pc, #336	; (adr r3, 8009c78 <__ieee754_pow+0x390>)
 8009b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b2c:	4606      	mov	r6, r0
 8009b2e:	460f      	mov	r7, r1
 8009b30:	4620      	mov	r0, r4
 8009b32:	4629      	mov	r1, r5
 8009b34:	f7f6 fd14 	bl	8000560 <__aeabi_dmul>
 8009b38:	2200      	movs	r2, #0
 8009b3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009b3e:	4b59      	ldr	r3, [pc, #356]	; (8009ca4 <__ieee754_pow+0x3bc>)
 8009b40:	4620      	mov	r0, r4
 8009b42:	4629      	mov	r1, r5
 8009b44:	f7f6 fd0c 	bl	8000560 <__aeabi_dmul>
 8009b48:	4602      	mov	r2, r0
 8009b4a:	460b      	mov	r3, r1
 8009b4c:	a14c      	add	r1, pc, #304	; (adr r1, 8009c80 <__ieee754_pow+0x398>)
 8009b4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b52:	f7f6 fb4d 	bl	80001f0 <__aeabi_dsub>
 8009b56:	4622      	mov	r2, r4
 8009b58:	462b      	mov	r3, r5
 8009b5a:	f7f6 fd01 	bl	8000560 <__aeabi_dmul>
 8009b5e:	4602      	mov	r2, r0
 8009b60:	460b      	mov	r3, r1
 8009b62:	2000      	movs	r0, #0
 8009b64:	4950      	ldr	r1, [pc, #320]	; (8009ca8 <__ieee754_pow+0x3c0>)
 8009b66:	f7f6 fb43 	bl	80001f0 <__aeabi_dsub>
 8009b6a:	4622      	mov	r2, r4
 8009b6c:	462b      	mov	r3, r5
 8009b6e:	4680      	mov	r8, r0
 8009b70:	4689      	mov	r9, r1
 8009b72:	4620      	mov	r0, r4
 8009b74:	4629      	mov	r1, r5
 8009b76:	f7f6 fcf3 	bl	8000560 <__aeabi_dmul>
 8009b7a:	4602      	mov	r2, r0
 8009b7c:	460b      	mov	r3, r1
 8009b7e:	4640      	mov	r0, r8
 8009b80:	4649      	mov	r1, r9
 8009b82:	f7f6 fced 	bl	8000560 <__aeabi_dmul>
 8009b86:	a340      	add	r3, pc, #256	; (adr r3, 8009c88 <__ieee754_pow+0x3a0>)
 8009b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b8c:	f7f6 fce8 	bl	8000560 <__aeabi_dmul>
 8009b90:	4602      	mov	r2, r0
 8009b92:	460b      	mov	r3, r1
 8009b94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b98:	f7f6 fb2a 	bl	80001f0 <__aeabi_dsub>
 8009b9c:	4602      	mov	r2, r0
 8009b9e:	460b      	mov	r3, r1
 8009ba0:	4604      	mov	r4, r0
 8009ba2:	460d      	mov	r5, r1
 8009ba4:	4630      	mov	r0, r6
 8009ba6:	4639      	mov	r1, r7
 8009ba8:	f7f6 fb24 	bl	80001f4 <__adddf3>
 8009bac:	2000      	movs	r0, #0
 8009bae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009bb2:	4632      	mov	r2, r6
 8009bb4:	463b      	mov	r3, r7
 8009bb6:	f7f6 fb1b 	bl	80001f0 <__aeabi_dsub>
 8009bba:	4602      	mov	r2, r0
 8009bbc:	460b      	mov	r3, r1
 8009bbe:	4620      	mov	r0, r4
 8009bc0:	4629      	mov	r1, r5
 8009bc2:	f7f6 fb15 	bl	80001f0 <__aeabi_dsub>
 8009bc6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009bc8:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8009bcc:	4313      	orrs	r3, r2
 8009bce:	4606      	mov	r6, r0
 8009bd0:	460f      	mov	r7, r1
 8009bd2:	f040 81eb 	bne.w	8009fac <__ieee754_pow+0x6c4>
 8009bd6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8009c90 <__ieee754_pow+0x3a8>
 8009bda:	e9dd 4500 	ldrd	r4, r5, [sp]
 8009bde:	2400      	movs	r4, #0
 8009be0:	4622      	mov	r2, r4
 8009be2:	462b      	mov	r3, r5
 8009be4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009be8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009bec:	f7f6 fb00 	bl	80001f0 <__aeabi_dsub>
 8009bf0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009bf4:	f7f6 fcb4 	bl	8000560 <__aeabi_dmul>
 8009bf8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009bfc:	4680      	mov	r8, r0
 8009bfe:	4689      	mov	r9, r1
 8009c00:	4630      	mov	r0, r6
 8009c02:	4639      	mov	r1, r7
 8009c04:	f7f6 fcac 	bl	8000560 <__aeabi_dmul>
 8009c08:	4602      	mov	r2, r0
 8009c0a:	460b      	mov	r3, r1
 8009c0c:	4640      	mov	r0, r8
 8009c0e:	4649      	mov	r1, r9
 8009c10:	f7f6 faf0 	bl	80001f4 <__adddf3>
 8009c14:	4622      	mov	r2, r4
 8009c16:	462b      	mov	r3, r5
 8009c18:	4680      	mov	r8, r0
 8009c1a:	4689      	mov	r9, r1
 8009c1c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009c20:	f7f6 fc9e 	bl	8000560 <__aeabi_dmul>
 8009c24:	460b      	mov	r3, r1
 8009c26:	4604      	mov	r4, r0
 8009c28:	460d      	mov	r5, r1
 8009c2a:	4602      	mov	r2, r0
 8009c2c:	4649      	mov	r1, r9
 8009c2e:	4640      	mov	r0, r8
 8009c30:	e9cd 4500 	strd	r4, r5, [sp]
 8009c34:	f7f6 fade 	bl	80001f4 <__adddf3>
 8009c38:	4b1c      	ldr	r3, [pc, #112]	; (8009cac <__ieee754_pow+0x3c4>)
 8009c3a:	4299      	cmp	r1, r3
 8009c3c:	4606      	mov	r6, r0
 8009c3e:	460f      	mov	r7, r1
 8009c40:	468b      	mov	fp, r1
 8009c42:	f340 82f7 	ble.w	800a234 <__ieee754_pow+0x94c>
 8009c46:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8009c4a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8009c4e:	4303      	orrs	r3, r0
 8009c50:	f000 81ea 	beq.w	800a028 <__ieee754_pow+0x740>
 8009c54:	a310      	add	r3, pc, #64	; (adr r3, 8009c98 <__ieee754_pow+0x3b0>)
 8009c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c5e:	f7f6 fc7f 	bl	8000560 <__aeabi_dmul>
 8009c62:	a30d      	add	r3, pc, #52	; (adr r3, 8009c98 <__ieee754_pow+0x3b0>)
 8009c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c68:	e6d5      	b.n	8009a16 <__ieee754_pow+0x12e>
 8009c6a:	bf00      	nop
 8009c6c:	f3af 8000 	nop.w
 8009c70:	60000000 	.word	0x60000000
 8009c74:	3ff71547 	.word	0x3ff71547
 8009c78:	f85ddf44 	.word	0xf85ddf44
 8009c7c:	3e54ae0b 	.word	0x3e54ae0b
 8009c80:	55555555 	.word	0x55555555
 8009c84:	3fd55555 	.word	0x3fd55555
 8009c88:	652b82fe 	.word	0x652b82fe
 8009c8c:	3ff71547 	.word	0x3ff71547
 8009c90:	00000000 	.word	0x00000000
 8009c94:	bff00000 	.word	0xbff00000
 8009c98:	8800759c 	.word	0x8800759c
 8009c9c:	7e37e43c 	.word	0x7e37e43c
 8009ca0:	3ff00000 	.word	0x3ff00000
 8009ca4:	3fd00000 	.word	0x3fd00000
 8009ca8:	3fe00000 	.word	0x3fe00000
 8009cac:	408fffff 	.word	0x408fffff
 8009cb0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8009cb4:	f04f 0200 	mov.w	r2, #0
 8009cb8:	da05      	bge.n	8009cc6 <__ieee754_pow+0x3de>
 8009cba:	4bd3      	ldr	r3, [pc, #844]	; (800a008 <__ieee754_pow+0x720>)
 8009cbc:	f7f6 fc50 	bl	8000560 <__aeabi_dmul>
 8009cc0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8009cc4:	460c      	mov	r4, r1
 8009cc6:	1523      	asrs	r3, r4, #20
 8009cc8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009ccc:	4413      	add	r3, r2
 8009cce:	9309      	str	r3, [sp, #36]	; 0x24
 8009cd0:	4bce      	ldr	r3, [pc, #824]	; (800a00c <__ieee754_pow+0x724>)
 8009cd2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009cd6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8009cda:	429c      	cmp	r4, r3
 8009cdc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009ce0:	dd08      	ble.n	8009cf4 <__ieee754_pow+0x40c>
 8009ce2:	4bcb      	ldr	r3, [pc, #812]	; (800a010 <__ieee754_pow+0x728>)
 8009ce4:	429c      	cmp	r4, r3
 8009ce6:	f340 815e 	ble.w	8009fa6 <__ieee754_pow+0x6be>
 8009cea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cec:	3301      	adds	r3, #1
 8009cee:	9309      	str	r3, [sp, #36]	; 0x24
 8009cf0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8009cf4:	f04f 0a00 	mov.w	sl, #0
 8009cf8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8009cfc:	930c      	str	r3, [sp, #48]	; 0x30
 8009cfe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009d00:	4bc4      	ldr	r3, [pc, #784]	; (800a014 <__ieee754_pow+0x72c>)
 8009d02:	4413      	add	r3, r2
 8009d04:	ed93 7b00 	vldr	d7, [r3]
 8009d08:	4629      	mov	r1, r5
 8009d0a:	ec53 2b17 	vmov	r2, r3, d7
 8009d0e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009d12:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009d16:	f7f6 fa6b 	bl	80001f0 <__aeabi_dsub>
 8009d1a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009d1e:	4606      	mov	r6, r0
 8009d20:	460f      	mov	r7, r1
 8009d22:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009d26:	f7f6 fa65 	bl	80001f4 <__adddf3>
 8009d2a:	4602      	mov	r2, r0
 8009d2c:	460b      	mov	r3, r1
 8009d2e:	2000      	movs	r0, #0
 8009d30:	49b9      	ldr	r1, [pc, #740]	; (800a018 <__ieee754_pow+0x730>)
 8009d32:	f7f6 fd3f 	bl	80007b4 <__aeabi_ddiv>
 8009d36:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8009d3a:	4602      	mov	r2, r0
 8009d3c:	460b      	mov	r3, r1
 8009d3e:	4630      	mov	r0, r6
 8009d40:	4639      	mov	r1, r7
 8009d42:	f7f6 fc0d 	bl	8000560 <__aeabi_dmul>
 8009d46:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009d4a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009d4e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009d52:	2300      	movs	r3, #0
 8009d54:	9302      	str	r3, [sp, #8]
 8009d56:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009d5a:	106d      	asrs	r5, r5, #1
 8009d5c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8009d60:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8009d64:	2200      	movs	r2, #0
 8009d66:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8009d6a:	4640      	mov	r0, r8
 8009d6c:	4649      	mov	r1, r9
 8009d6e:	4614      	mov	r4, r2
 8009d70:	461d      	mov	r5, r3
 8009d72:	f7f6 fbf5 	bl	8000560 <__aeabi_dmul>
 8009d76:	4602      	mov	r2, r0
 8009d78:	460b      	mov	r3, r1
 8009d7a:	4630      	mov	r0, r6
 8009d7c:	4639      	mov	r1, r7
 8009d7e:	f7f6 fa37 	bl	80001f0 <__aeabi_dsub>
 8009d82:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009d86:	4606      	mov	r6, r0
 8009d88:	460f      	mov	r7, r1
 8009d8a:	4620      	mov	r0, r4
 8009d8c:	4629      	mov	r1, r5
 8009d8e:	f7f6 fa2f 	bl	80001f0 <__aeabi_dsub>
 8009d92:	4602      	mov	r2, r0
 8009d94:	460b      	mov	r3, r1
 8009d96:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009d9a:	f7f6 fa29 	bl	80001f0 <__aeabi_dsub>
 8009d9e:	4642      	mov	r2, r8
 8009da0:	464b      	mov	r3, r9
 8009da2:	f7f6 fbdd 	bl	8000560 <__aeabi_dmul>
 8009da6:	4602      	mov	r2, r0
 8009da8:	460b      	mov	r3, r1
 8009daa:	4630      	mov	r0, r6
 8009dac:	4639      	mov	r1, r7
 8009dae:	f7f6 fa1f 	bl	80001f0 <__aeabi_dsub>
 8009db2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009db6:	f7f6 fbd3 	bl	8000560 <__aeabi_dmul>
 8009dba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009dbe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009dc2:	4610      	mov	r0, r2
 8009dc4:	4619      	mov	r1, r3
 8009dc6:	f7f6 fbcb 	bl	8000560 <__aeabi_dmul>
 8009dca:	a37b      	add	r3, pc, #492	; (adr r3, 8009fb8 <__ieee754_pow+0x6d0>)
 8009dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dd0:	4604      	mov	r4, r0
 8009dd2:	460d      	mov	r5, r1
 8009dd4:	f7f6 fbc4 	bl	8000560 <__aeabi_dmul>
 8009dd8:	a379      	add	r3, pc, #484	; (adr r3, 8009fc0 <__ieee754_pow+0x6d8>)
 8009dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dde:	f7f6 fa09 	bl	80001f4 <__adddf3>
 8009de2:	4622      	mov	r2, r4
 8009de4:	462b      	mov	r3, r5
 8009de6:	f7f6 fbbb 	bl	8000560 <__aeabi_dmul>
 8009dea:	a377      	add	r3, pc, #476	; (adr r3, 8009fc8 <__ieee754_pow+0x6e0>)
 8009dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009df0:	f7f6 fa00 	bl	80001f4 <__adddf3>
 8009df4:	4622      	mov	r2, r4
 8009df6:	462b      	mov	r3, r5
 8009df8:	f7f6 fbb2 	bl	8000560 <__aeabi_dmul>
 8009dfc:	a374      	add	r3, pc, #464	; (adr r3, 8009fd0 <__ieee754_pow+0x6e8>)
 8009dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e02:	f7f6 f9f7 	bl	80001f4 <__adddf3>
 8009e06:	4622      	mov	r2, r4
 8009e08:	462b      	mov	r3, r5
 8009e0a:	f7f6 fba9 	bl	8000560 <__aeabi_dmul>
 8009e0e:	a372      	add	r3, pc, #456	; (adr r3, 8009fd8 <__ieee754_pow+0x6f0>)
 8009e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e14:	f7f6 f9ee 	bl	80001f4 <__adddf3>
 8009e18:	4622      	mov	r2, r4
 8009e1a:	462b      	mov	r3, r5
 8009e1c:	f7f6 fba0 	bl	8000560 <__aeabi_dmul>
 8009e20:	a36f      	add	r3, pc, #444	; (adr r3, 8009fe0 <__ieee754_pow+0x6f8>)
 8009e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e26:	f7f6 f9e5 	bl	80001f4 <__adddf3>
 8009e2a:	4622      	mov	r2, r4
 8009e2c:	4606      	mov	r6, r0
 8009e2e:	460f      	mov	r7, r1
 8009e30:	462b      	mov	r3, r5
 8009e32:	4620      	mov	r0, r4
 8009e34:	4629      	mov	r1, r5
 8009e36:	f7f6 fb93 	bl	8000560 <__aeabi_dmul>
 8009e3a:	4602      	mov	r2, r0
 8009e3c:	460b      	mov	r3, r1
 8009e3e:	4630      	mov	r0, r6
 8009e40:	4639      	mov	r1, r7
 8009e42:	f7f6 fb8d 	bl	8000560 <__aeabi_dmul>
 8009e46:	4642      	mov	r2, r8
 8009e48:	4604      	mov	r4, r0
 8009e4a:	460d      	mov	r5, r1
 8009e4c:	464b      	mov	r3, r9
 8009e4e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009e52:	f7f6 f9cf 	bl	80001f4 <__adddf3>
 8009e56:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009e5a:	f7f6 fb81 	bl	8000560 <__aeabi_dmul>
 8009e5e:	4622      	mov	r2, r4
 8009e60:	462b      	mov	r3, r5
 8009e62:	f7f6 f9c7 	bl	80001f4 <__adddf3>
 8009e66:	4642      	mov	r2, r8
 8009e68:	4606      	mov	r6, r0
 8009e6a:	460f      	mov	r7, r1
 8009e6c:	464b      	mov	r3, r9
 8009e6e:	4640      	mov	r0, r8
 8009e70:	4649      	mov	r1, r9
 8009e72:	f7f6 fb75 	bl	8000560 <__aeabi_dmul>
 8009e76:	2200      	movs	r2, #0
 8009e78:	4b68      	ldr	r3, [pc, #416]	; (800a01c <__ieee754_pow+0x734>)
 8009e7a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009e7e:	f7f6 f9b9 	bl	80001f4 <__adddf3>
 8009e82:	4632      	mov	r2, r6
 8009e84:	463b      	mov	r3, r7
 8009e86:	f7f6 f9b5 	bl	80001f4 <__adddf3>
 8009e8a:	9802      	ldr	r0, [sp, #8]
 8009e8c:	460d      	mov	r5, r1
 8009e8e:	4604      	mov	r4, r0
 8009e90:	4602      	mov	r2, r0
 8009e92:	460b      	mov	r3, r1
 8009e94:	4640      	mov	r0, r8
 8009e96:	4649      	mov	r1, r9
 8009e98:	f7f6 fb62 	bl	8000560 <__aeabi_dmul>
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	4680      	mov	r8, r0
 8009ea0:	4689      	mov	r9, r1
 8009ea2:	4b5e      	ldr	r3, [pc, #376]	; (800a01c <__ieee754_pow+0x734>)
 8009ea4:	4620      	mov	r0, r4
 8009ea6:	4629      	mov	r1, r5
 8009ea8:	f7f6 f9a2 	bl	80001f0 <__aeabi_dsub>
 8009eac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009eb0:	f7f6 f99e 	bl	80001f0 <__aeabi_dsub>
 8009eb4:	4602      	mov	r2, r0
 8009eb6:	460b      	mov	r3, r1
 8009eb8:	4630      	mov	r0, r6
 8009eba:	4639      	mov	r1, r7
 8009ebc:	f7f6 f998 	bl	80001f0 <__aeabi_dsub>
 8009ec0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009ec4:	f7f6 fb4c 	bl	8000560 <__aeabi_dmul>
 8009ec8:	4622      	mov	r2, r4
 8009eca:	4606      	mov	r6, r0
 8009ecc:	460f      	mov	r7, r1
 8009ece:	462b      	mov	r3, r5
 8009ed0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009ed4:	f7f6 fb44 	bl	8000560 <__aeabi_dmul>
 8009ed8:	4602      	mov	r2, r0
 8009eda:	460b      	mov	r3, r1
 8009edc:	4630      	mov	r0, r6
 8009ede:	4639      	mov	r1, r7
 8009ee0:	f7f6 f988 	bl	80001f4 <__adddf3>
 8009ee4:	4606      	mov	r6, r0
 8009ee6:	460f      	mov	r7, r1
 8009ee8:	4602      	mov	r2, r0
 8009eea:	460b      	mov	r3, r1
 8009eec:	4640      	mov	r0, r8
 8009eee:	4649      	mov	r1, r9
 8009ef0:	f7f6 f980 	bl	80001f4 <__adddf3>
 8009ef4:	9802      	ldr	r0, [sp, #8]
 8009ef6:	a33c      	add	r3, pc, #240	; (adr r3, 8009fe8 <__ieee754_pow+0x700>)
 8009ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009efc:	4604      	mov	r4, r0
 8009efe:	460d      	mov	r5, r1
 8009f00:	f7f6 fb2e 	bl	8000560 <__aeabi_dmul>
 8009f04:	4642      	mov	r2, r8
 8009f06:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009f0a:	464b      	mov	r3, r9
 8009f0c:	4620      	mov	r0, r4
 8009f0e:	4629      	mov	r1, r5
 8009f10:	f7f6 f96e 	bl	80001f0 <__aeabi_dsub>
 8009f14:	4602      	mov	r2, r0
 8009f16:	460b      	mov	r3, r1
 8009f18:	4630      	mov	r0, r6
 8009f1a:	4639      	mov	r1, r7
 8009f1c:	f7f6 f968 	bl	80001f0 <__aeabi_dsub>
 8009f20:	a333      	add	r3, pc, #204	; (adr r3, 8009ff0 <__ieee754_pow+0x708>)
 8009f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f26:	f7f6 fb1b 	bl	8000560 <__aeabi_dmul>
 8009f2a:	a333      	add	r3, pc, #204	; (adr r3, 8009ff8 <__ieee754_pow+0x710>)
 8009f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f30:	4606      	mov	r6, r0
 8009f32:	460f      	mov	r7, r1
 8009f34:	4620      	mov	r0, r4
 8009f36:	4629      	mov	r1, r5
 8009f38:	f7f6 fb12 	bl	8000560 <__aeabi_dmul>
 8009f3c:	4602      	mov	r2, r0
 8009f3e:	460b      	mov	r3, r1
 8009f40:	4630      	mov	r0, r6
 8009f42:	4639      	mov	r1, r7
 8009f44:	f7f6 f956 	bl	80001f4 <__adddf3>
 8009f48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009f4a:	4b35      	ldr	r3, [pc, #212]	; (800a020 <__ieee754_pow+0x738>)
 8009f4c:	4413      	add	r3, r2
 8009f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f52:	f7f6 f94f 	bl	80001f4 <__adddf3>
 8009f56:	4604      	mov	r4, r0
 8009f58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009f5a:	460d      	mov	r5, r1
 8009f5c:	f7f6 fa96 	bl	800048c <__aeabi_i2d>
 8009f60:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009f62:	4b30      	ldr	r3, [pc, #192]	; (800a024 <__ieee754_pow+0x73c>)
 8009f64:	4413      	add	r3, r2
 8009f66:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009f6a:	4606      	mov	r6, r0
 8009f6c:	460f      	mov	r7, r1
 8009f6e:	4622      	mov	r2, r4
 8009f70:	462b      	mov	r3, r5
 8009f72:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009f76:	f7f6 f93d 	bl	80001f4 <__adddf3>
 8009f7a:	4642      	mov	r2, r8
 8009f7c:	464b      	mov	r3, r9
 8009f7e:	f7f6 f939 	bl	80001f4 <__adddf3>
 8009f82:	4632      	mov	r2, r6
 8009f84:	463b      	mov	r3, r7
 8009f86:	f7f6 f935 	bl	80001f4 <__adddf3>
 8009f8a:	9802      	ldr	r0, [sp, #8]
 8009f8c:	4632      	mov	r2, r6
 8009f8e:	463b      	mov	r3, r7
 8009f90:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009f94:	f7f6 f92c 	bl	80001f0 <__aeabi_dsub>
 8009f98:	4642      	mov	r2, r8
 8009f9a:	464b      	mov	r3, r9
 8009f9c:	f7f6 f928 	bl	80001f0 <__aeabi_dsub>
 8009fa0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009fa4:	e607      	b.n	8009bb6 <__ieee754_pow+0x2ce>
 8009fa6:	f04f 0a01 	mov.w	sl, #1
 8009faa:	e6a5      	b.n	8009cf8 <__ieee754_pow+0x410>
 8009fac:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800a000 <__ieee754_pow+0x718>
 8009fb0:	e613      	b.n	8009bda <__ieee754_pow+0x2f2>
 8009fb2:	bf00      	nop
 8009fb4:	f3af 8000 	nop.w
 8009fb8:	4a454eef 	.word	0x4a454eef
 8009fbc:	3fca7e28 	.word	0x3fca7e28
 8009fc0:	93c9db65 	.word	0x93c9db65
 8009fc4:	3fcd864a 	.word	0x3fcd864a
 8009fc8:	a91d4101 	.word	0xa91d4101
 8009fcc:	3fd17460 	.word	0x3fd17460
 8009fd0:	518f264d 	.word	0x518f264d
 8009fd4:	3fd55555 	.word	0x3fd55555
 8009fd8:	db6fabff 	.word	0xdb6fabff
 8009fdc:	3fdb6db6 	.word	0x3fdb6db6
 8009fe0:	33333303 	.word	0x33333303
 8009fe4:	3fe33333 	.word	0x3fe33333
 8009fe8:	e0000000 	.word	0xe0000000
 8009fec:	3feec709 	.word	0x3feec709
 8009ff0:	dc3a03fd 	.word	0xdc3a03fd
 8009ff4:	3feec709 	.word	0x3feec709
 8009ff8:	145b01f5 	.word	0x145b01f5
 8009ffc:	be3e2fe0 	.word	0xbe3e2fe0
 800a000:	00000000 	.word	0x00000000
 800a004:	3ff00000 	.word	0x3ff00000
 800a008:	43400000 	.word	0x43400000
 800a00c:	0003988e 	.word	0x0003988e
 800a010:	000bb679 	.word	0x000bb679
 800a014:	0800a868 	.word	0x0800a868
 800a018:	3ff00000 	.word	0x3ff00000
 800a01c:	40080000 	.word	0x40080000
 800a020:	0800a888 	.word	0x0800a888
 800a024:	0800a878 	.word	0x0800a878
 800a028:	a3b4      	add	r3, pc, #720	; (adr r3, 800a2fc <__ieee754_pow+0xa14>)
 800a02a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a02e:	4640      	mov	r0, r8
 800a030:	4649      	mov	r1, r9
 800a032:	f7f6 f8df 	bl	80001f4 <__adddf3>
 800a036:	4622      	mov	r2, r4
 800a038:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a03c:	462b      	mov	r3, r5
 800a03e:	4630      	mov	r0, r6
 800a040:	4639      	mov	r1, r7
 800a042:	f7f6 f8d5 	bl	80001f0 <__aeabi_dsub>
 800a046:	4602      	mov	r2, r0
 800a048:	460b      	mov	r3, r1
 800a04a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a04e:	f7f6 fd17 	bl	8000a80 <__aeabi_dcmpgt>
 800a052:	2800      	cmp	r0, #0
 800a054:	f47f adfe 	bne.w	8009c54 <__ieee754_pow+0x36c>
 800a058:	4aa3      	ldr	r2, [pc, #652]	; (800a2e8 <__ieee754_pow+0xa00>)
 800a05a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a05e:	4293      	cmp	r3, r2
 800a060:	f340 810a 	ble.w	800a278 <__ieee754_pow+0x990>
 800a064:	151b      	asrs	r3, r3, #20
 800a066:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800a06a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800a06e:	fa4a f303 	asr.w	r3, sl, r3
 800a072:	445b      	add	r3, fp
 800a074:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800a078:	4e9c      	ldr	r6, [pc, #624]	; (800a2ec <__ieee754_pow+0xa04>)
 800a07a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800a07e:	4116      	asrs	r6, r2
 800a080:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800a084:	2000      	movs	r0, #0
 800a086:	ea23 0106 	bic.w	r1, r3, r6
 800a08a:	f1c2 0214 	rsb	r2, r2, #20
 800a08e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800a092:	fa4a fa02 	asr.w	sl, sl, r2
 800a096:	f1bb 0f00 	cmp.w	fp, #0
 800a09a:	4602      	mov	r2, r0
 800a09c:	460b      	mov	r3, r1
 800a09e:	4620      	mov	r0, r4
 800a0a0:	4629      	mov	r1, r5
 800a0a2:	bfb8      	it	lt
 800a0a4:	f1ca 0a00 	rsblt	sl, sl, #0
 800a0a8:	f7f6 f8a2 	bl	80001f0 <__aeabi_dsub>
 800a0ac:	e9cd 0100 	strd	r0, r1, [sp]
 800a0b0:	4642      	mov	r2, r8
 800a0b2:	464b      	mov	r3, r9
 800a0b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a0b8:	f7f6 f89c 	bl	80001f4 <__adddf3>
 800a0bc:	2000      	movs	r0, #0
 800a0be:	a378      	add	r3, pc, #480	; (adr r3, 800a2a0 <__ieee754_pow+0x9b8>)
 800a0c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0c4:	4604      	mov	r4, r0
 800a0c6:	460d      	mov	r5, r1
 800a0c8:	f7f6 fa4a 	bl	8000560 <__aeabi_dmul>
 800a0cc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a0d0:	4606      	mov	r6, r0
 800a0d2:	460f      	mov	r7, r1
 800a0d4:	4620      	mov	r0, r4
 800a0d6:	4629      	mov	r1, r5
 800a0d8:	f7f6 f88a 	bl	80001f0 <__aeabi_dsub>
 800a0dc:	4602      	mov	r2, r0
 800a0de:	460b      	mov	r3, r1
 800a0e0:	4640      	mov	r0, r8
 800a0e2:	4649      	mov	r1, r9
 800a0e4:	f7f6 f884 	bl	80001f0 <__aeabi_dsub>
 800a0e8:	a36f      	add	r3, pc, #444	; (adr r3, 800a2a8 <__ieee754_pow+0x9c0>)
 800a0ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ee:	f7f6 fa37 	bl	8000560 <__aeabi_dmul>
 800a0f2:	a36f      	add	r3, pc, #444	; (adr r3, 800a2b0 <__ieee754_pow+0x9c8>)
 800a0f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0f8:	4680      	mov	r8, r0
 800a0fa:	4689      	mov	r9, r1
 800a0fc:	4620      	mov	r0, r4
 800a0fe:	4629      	mov	r1, r5
 800a100:	f7f6 fa2e 	bl	8000560 <__aeabi_dmul>
 800a104:	4602      	mov	r2, r0
 800a106:	460b      	mov	r3, r1
 800a108:	4640      	mov	r0, r8
 800a10a:	4649      	mov	r1, r9
 800a10c:	f7f6 f872 	bl	80001f4 <__adddf3>
 800a110:	4604      	mov	r4, r0
 800a112:	460d      	mov	r5, r1
 800a114:	4602      	mov	r2, r0
 800a116:	460b      	mov	r3, r1
 800a118:	4630      	mov	r0, r6
 800a11a:	4639      	mov	r1, r7
 800a11c:	f7f6 f86a 	bl	80001f4 <__adddf3>
 800a120:	4632      	mov	r2, r6
 800a122:	463b      	mov	r3, r7
 800a124:	4680      	mov	r8, r0
 800a126:	4689      	mov	r9, r1
 800a128:	f7f6 f862 	bl	80001f0 <__aeabi_dsub>
 800a12c:	4602      	mov	r2, r0
 800a12e:	460b      	mov	r3, r1
 800a130:	4620      	mov	r0, r4
 800a132:	4629      	mov	r1, r5
 800a134:	f7f6 f85c 	bl	80001f0 <__aeabi_dsub>
 800a138:	4642      	mov	r2, r8
 800a13a:	4606      	mov	r6, r0
 800a13c:	460f      	mov	r7, r1
 800a13e:	464b      	mov	r3, r9
 800a140:	4640      	mov	r0, r8
 800a142:	4649      	mov	r1, r9
 800a144:	f7f6 fa0c 	bl	8000560 <__aeabi_dmul>
 800a148:	a35b      	add	r3, pc, #364	; (adr r3, 800a2b8 <__ieee754_pow+0x9d0>)
 800a14a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a14e:	4604      	mov	r4, r0
 800a150:	460d      	mov	r5, r1
 800a152:	f7f6 fa05 	bl	8000560 <__aeabi_dmul>
 800a156:	a35a      	add	r3, pc, #360	; (adr r3, 800a2c0 <__ieee754_pow+0x9d8>)
 800a158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a15c:	f7f6 f848 	bl	80001f0 <__aeabi_dsub>
 800a160:	4622      	mov	r2, r4
 800a162:	462b      	mov	r3, r5
 800a164:	f7f6 f9fc 	bl	8000560 <__aeabi_dmul>
 800a168:	a357      	add	r3, pc, #348	; (adr r3, 800a2c8 <__ieee754_pow+0x9e0>)
 800a16a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a16e:	f7f6 f841 	bl	80001f4 <__adddf3>
 800a172:	4622      	mov	r2, r4
 800a174:	462b      	mov	r3, r5
 800a176:	f7f6 f9f3 	bl	8000560 <__aeabi_dmul>
 800a17a:	a355      	add	r3, pc, #340	; (adr r3, 800a2d0 <__ieee754_pow+0x9e8>)
 800a17c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a180:	f7f6 f836 	bl	80001f0 <__aeabi_dsub>
 800a184:	4622      	mov	r2, r4
 800a186:	462b      	mov	r3, r5
 800a188:	f7f6 f9ea 	bl	8000560 <__aeabi_dmul>
 800a18c:	a352      	add	r3, pc, #328	; (adr r3, 800a2d8 <__ieee754_pow+0x9f0>)
 800a18e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a192:	f7f6 f82f 	bl	80001f4 <__adddf3>
 800a196:	4622      	mov	r2, r4
 800a198:	462b      	mov	r3, r5
 800a19a:	f7f6 f9e1 	bl	8000560 <__aeabi_dmul>
 800a19e:	4602      	mov	r2, r0
 800a1a0:	460b      	mov	r3, r1
 800a1a2:	4640      	mov	r0, r8
 800a1a4:	4649      	mov	r1, r9
 800a1a6:	f7f6 f823 	bl	80001f0 <__aeabi_dsub>
 800a1aa:	4604      	mov	r4, r0
 800a1ac:	460d      	mov	r5, r1
 800a1ae:	4602      	mov	r2, r0
 800a1b0:	460b      	mov	r3, r1
 800a1b2:	4640      	mov	r0, r8
 800a1b4:	4649      	mov	r1, r9
 800a1b6:	f7f6 f9d3 	bl	8000560 <__aeabi_dmul>
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	e9cd 0100 	strd	r0, r1, [sp]
 800a1c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a1c4:	4620      	mov	r0, r4
 800a1c6:	4629      	mov	r1, r5
 800a1c8:	f7f6 f812 	bl	80001f0 <__aeabi_dsub>
 800a1cc:	4602      	mov	r2, r0
 800a1ce:	460b      	mov	r3, r1
 800a1d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a1d4:	f7f6 faee 	bl	80007b4 <__aeabi_ddiv>
 800a1d8:	4632      	mov	r2, r6
 800a1da:	4604      	mov	r4, r0
 800a1dc:	460d      	mov	r5, r1
 800a1de:	463b      	mov	r3, r7
 800a1e0:	4640      	mov	r0, r8
 800a1e2:	4649      	mov	r1, r9
 800a1e4:	f7f6 f9bc 	bl	8000560 <__aeabi_dmul>
 800a1e8:	4632      	mov	r2, r6
 800a1ea:	463b      	mov	r3, r7
 800a1ec:	f7f6 f802 	bl	80001f4 <__adddf3>
 800a1f0:	4602      	mov	r2, r0
 800a1f2:	460b      	mov	r3, r1
 800a1f4:	4620      	mov	r0, r4
 800a1f6:	4629      	mov	r1, r5
 800a1f8:	f7f5 fffa 	bl	80001f0 <__aeabi_dsub>
 800a1fc:	4642      	mov	r2, r8
 800a1fe:	464b      	mov	r3, r9
 800a200:	f7f5 fff6 	bl	80001f0 <__aeabi_dsub>
 800a204:	4602      	mov	r2, r0
 800a206:	460b      	mov	r3, r1
 800a208:	2000      	movs	r0, #0
 800a20a:	4939      	ldr	r1, [pc, #228]	; (800a2f0 <__ieee754_pow+0xa08>)
 800a20c:	f7f5 fff0 	bl	80001f0 <__aeabi_dsub>
 800a210:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800a214:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800a218:	4602      	mov	r2, r0
 800a21a:	460b      	mov	r3, r1
 800a21c:	da2f      	bge.n	800a27e <__ieee754_pow+0x996>
 800a21e:	4650      	mov	r0, sl
 800a220:	ec43 2b10 	vmov	d0, r2, r3
 800a224:	f000 f9c0 	bl	800a5a8 <scalbn>
 800a228:	ec51 0b10 	vmov	r0, r1, d0
 800a22c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a230:	f7ff bbf1 	b.w	8009a16 <__ieee754_pow+0x12e>
 800a234:	4b2f      	ldr	r3, [pc, #188]	; (800a2f4 <__ieee754_pow+0xa0c>)
 800a236:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800a23a:	429e      	cmp	r6, r3
 800a23c:	f77f af0c 	ble.w	800a058 <__ieee754_pow+0x770>
 800a240:	4b2d      	ldr	r3, [pc, #180]	; (800a2f8 <__ieee754_pow+0xa10>)
 800a242:	440b      	add	r3, r1
 800a244:	4303      	orrs	r3, r0
 800a246:	d00b      	beq.n	800a260 <__ieee754_pow+0x978>
 800a248:	a325      	add	r3, pc, #148	; (adr r3, 800a2e0 <__ieee754_pow+0x9f8>)
 800a24a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a24e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a252:	f7f6 f985 	bl	8000560 <__aeabi_dmul>
 800a256:	a322      	add	r3, pc, #136	; (adr r3, 800a2e0 <__ieee754_pow+0x9f8>)
 800a258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a25c:	f7ff bbdb 	b.w	8009a16 <__ieee754_pow+0x12e>
 800a260:	4622      	mov	r2, r4
 800a262:	462b      	mov	r3, r5
 800a264:	f7f5 ffc4 	bl	80001f0 <__aeabi_dsub>
 800a268:	4642      	mov	r2, r8
 800a26a:	464b      	mov	r3, r9
 800a26c:	f7f6 fbfe 	bl	8000a6c <__aeabi_dcmpge>
 800a270:	2800      	cmp	r0, #0
 800a272:	f43f aef1 	beq.w	800a058 <__ieee754_pow+0x770>
 800a276:	e7e7      	b.n	800a248 <__ieee754_pow+0x960>
 800a278:	f04f 0a00 	mov.w	sl, #0
 800a27c:	e718      	b.n	800a0b0 <__ieee754_pow+0x7c8>
 800a27e:	4621      	mov	r1, r4
 800a280:	e7d4      	b.n	800a22c <__ieee754_pow+0x944>
 800a282:	2000      	movs	r0, #0
 800a284:	491a      	ldr	r1, [pc, #104]	; (800a2f0 <__ieee754_pow+0xa08>)
 800a286:	f7ff bb8f 	b.w	80099a8 <__ieee754_pow+0xc0>
 800a28a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a28e:	f7ff bb8b 	b.w	80099a8 <__ieee754_pow+0xc0>
 800a292:	4630      	mov	r0, r6
 800a294:	4639      	mov	r1, r7
 800a296:	f7ff bb87 	b.w	80099a8 <__ieee754_pow+0xc0>
 800a29a:	4693      	mov	fp, r2
 800a29c:	f7ff bb98 	b.w	80099d0 <__ieee754_pow+0xe8>
 800a2a0:	00000000 	.word	0x00000000
 800a2a4:	3fe62e43 	.word	0x3fe62e43
 800a2a8:	fefa39ef 	.word	0xfefa39ef
 800a2ac:	3fe62e42 	.word	0x3fe62e42
 800a2b0:	0ca86c39 	.word	0x0ca86c39
 800a2b4:	be205c61 	.word	0xbe205c61
 800a2b8:	72bea4d0 	.word	0x72bea4d0
 800a2bc:	3e663769 	.word	0x3e663769
 800a2c0:	c5d26bf1 	.word	0xc5d26bf1
 800a2c4:	3ebbbd41 	.word	0x3ebbbd41
 800a2c8:	af25de2c 	.word	0xaf25de2c
 800a2cc:	3f11566a 	.word	0x3f11566a
 800a2d0:	16bebd93 	.word	0x16bebd93
 800a2d4:	3f66c16c 	.word	0x3f66c16c
 800a2d8:	5555553e 	.word	0x5555553e
 800a2dc:	3fc55555 	.word	0x3fc55555
 800a2e0:	c2f8f359 	.word	0xc2f8f359
 800a2e4:	01a56e1f 	.word	0x01a56e1f
 800a2e8:	3fe00000 	.word	0x3fe00000
 800a2ec:	000fffff 	.word	0x000fffff
 800a2f0:	3ff00000 	.word	0x3ff00000
 800a2f4:	4090cbff 	.word	0x4090cbff
 800a2f8:	3f6f3400 	.word	0x3f6f3400
 800a2fc:	652b82fe 	.word	0x652b82fe
 800a300:	3c971547 	.word	0x3c971547

0800a304 <__ieee754_sqrt>:
 800a304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a308:	4955      	ldr	r1, [pc, #340]	; (800a460 <__ieee754_sqrt+0x15c>)
 800a30a:	ec55 4b10 	vmov	r4, r5, d0
 800a30e:	43a9      	bics	r1, r5
 800a310:	462b      	mov	r3, r5
 800a312:	462a      	mov	r2, r5
 800a314:	d112      	bne.n	800a33c <__ieee754_sqrt+0x38>
 800a316:	ee10 2a10 	vmov	r2, s0
 800a31a:	ee10 0a10 	vmov	r0, s0
 800a31e:	4629      	mov	r1, r5
 800a320:	f7f6 f91e 	bl	8000560 <__aeabi_dmul>
 800a324:	4602      	mov	r2, r0
 800a326:	460b      	mov	r3, r1
 800a328:	4620      	mov	r0, r4
 800a32a:	4629      	mov	r1, r5
 800a32c:	f7f5 ff62 	bl	80001f4 <__adddf3>
 800a330:	4604      	mov	r4, r0
 800a332:	460d      	mov	r5, r1
 800a334:	ec45 4b10 	vmov	d0, r4, r5
 800a338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a33c:	2d00      	cmp	r5, #0
 800a33e:	ee10 0a10 	vmov	r0, s0
 800a342:	4621      	mov	r1, r4
 800a344:	dc0f      	bgt.n	800a366 <__ieee754_sqrt+0x62>
 800a346:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a34a:	4330      	orrs	r0, r6
 800a34c:	d0f2      	beq.n	800a334 <__ieee754_sqrt+0x30>
 800a34e:	b155      	cbz	r5, 800a366 <__ieee754_sqrt+0x62>
 800a350:	ee10 2a10 	vmov	r2, s0
 800a354:	4620      	mov	r0, r4
 800a356:	4629      	mov	r1, r5
 800a358:	f7f5 ff4a 	bl	80001f0 <__aeabi_dsub>
 800a35c:	4602      	mov	r2, r0
 800a35e:	460b      	mov	r3, r1
 800a360:	f7f6 fa28 	bl	80007b4 <__aeabi_ddiv>
 800a364:	e7e4      	b.n	800a330 <__ieee754_sqrt+0x2c>
 800a366:	151b      	asrs	r3, r3, #20
 800a368:	d073      	beq.n	800a452 <__ieee754_sqrt+0x14e>
 800a36a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a36e:	07dd      	lsls	r5, r3, #31
 800a370:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800a374:	bf48      	it	mi
 800a376:	0fc8      	lsrmi	r0, r1, #31
 800a378:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800a37c:	bf44      	itt	mi
 800a37e:	0049      	lslmi	r1, r1, #1
 800a380:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800a384:	2500      	movs	r5, #0
 800a386:	1058      	asrs	r0, r3, #1
 800a388:	0fcb      	lsrs	r3, r1, #31
 800a38a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800a38e:	0049      	lsls	r1, r1, #1
 800a390:	2316      	movs	r3, #22
 800a392:	462c      	mov	r4, r5
 800a394:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800a398:	19a7      	adds	r7, r4, r6
 800a39a:	4297      	cmp	r7, r2
 800a39c:	bfde      	ittt	le
 800a39e:	19bc      	addle	r4, r7, r6
 800a3a0:	1bd2      	suble	r2, r2, r7
 800a3a2:	19ad      	addle	r5, r5, r6
 800a3a4:	0fcf      	lsrs	r7, r1, #31
 800a3a6:	3b01      	subs	r3, #1
 800a3a8:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800a3ac:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a3b0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a3b4:	d1f0      	bne.n	800a398 <__ieee754_sqrt+0x94>
 800a3b6:	f04f 0c20 	mov.w	ip, #32
 800a3ba:	469e      	mov	lr, r3
 800a3bc:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800a3c0:	42a2      	cmp	r2, r4
 800a3c2:	eb06 070e 	add.w	r7, r6, lr
 800a3c6:	dc02      	bgt.n	800a3ce <__ieee754_sqrt+0xca>
 800a3c8:	d112      	bne.n	800a3f0 <__ieee754_sqrt+0xec>
 800a3ca:	428f      	cmp	r7, r1
 800a3cc:	d810      	bhi.n	800a3f0 <__ieee754_sqrt+0xec>
 800a3ce:	2f00      	cmp	r7, #0
 800a3d0:	eb07 0e06 	add.w	lr, r7, r6
 800a3d4:	da42      	bge.n	800a45c <__ieee754_sqrt+0x158>
 800a3d6:	f1be 0f00 	cmp.w	lr, #0
 800a3da:	db3f      	blt.n	800a45c <__ieee754_sqrt+0x158>
 800a3dc:	f104 0801 	add.w	r8, r4, #1
 800a3e0:	1b12      	subs	r2, r2, r4
 800a3e2:	428f      	cmp	r7, r1
 800a3e4:	bf88      	it	hi
 800a3e6:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 800a3ea:	1bc9      	subs	r1, r1, r7
 800a3ec:	4433      	add	r3, r6
 800a3ee:	4644      	mov	r4, r8
 800a3f0:	0052      	lsls	r2, r2, #1
 800a3f2:	f1bc 0c01 	subs.w	ip, ip, #1
 800a3f6:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800a3fa:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a3fe:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a402:	d1dd      	bne.n	800a3c0 <__ieee754_sqrt+0xbc>
 800a404:	430a      	orrs	r2, r1
 800a406:	d006      	beq.n	800a416 <__ieee754_sqrt+0x112>
 800a408:	1c5c      	adds	r4, r3, #1
 800a40a:	bf13      	iteet	ne
 800a40c:	3301      	addne	r3, #1
 800a40e:	3501      	addeq	r5, #1
 800a410:	4663      	moveq	r3, ip
 800a412:	f023 0301 	bicne.w	r3, r3, #1
 800a416:	106a      	asrs	r2, r5, #1
 800a418:	085b      	lsrs	r3, r3, #1
 800a41a:	07e9      	lsls	r1, r5, #31
 800a41c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800a420:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800a424:	bf48      	it	mi
 800a426:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800a42a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800a42e:	461c      	mov	r4, r3
 800a430:	e780      	b.n	800a334 <__ieee754_sqrt+0x30>
 800a432:	0aca      	lsrs	r2, r1, #11
 800a434:	3815      	subs	r0, #21
 800a436:	0549      	lsls	r1, r1, #21
 800a438:	2a00      	cmp	r2, #0
 800a43a:	d0fa      	beq.n	800a432 <__ieee754_sqrt+0x12e>
 800a43c:	02d6      	lsls	r6, r2, #11
 800a43e:	d50a      	bpl.n	800a456 <__ieee754_sqrt+0x152>
 800a440:	f1c3 0420 	rsb	r4, r3, #32
 800a444:	fa21 f404 	lsr.w	r4, r1, r4
 800a448:	1e5d      	subs	r5, r3, #1
 800a44a:	4099      	lsls	r1, r3
 800a44c:	4322      	orrs	r2, r4
 800a44e:	1b43      	subs	r3, r0, r5
 800a450:	e78b      	b.n	800a36a <__ieee754_sqrt+0x66>
 800a452:	4618      	mov	r0, r3
 800a454:	e7f0      	b.n	800a438 <__ieee754_sqrt+0x134>
 800a456:	0052      	lsls	r2, r2, #1
 800a458:	3301      	adds	r3, #1
 800a45a:	e7ef      	b.n	800a43c <__ieee754_sqrt+0x138>
 800a45c:	46a0      	mov	r8, r4
 800a45e:	e7bf      	b.n	800a3e0 <__ieee754_sqrt+0xdc>
 800a460:	7ff00000 	.word	0x7ff00000

0800a464 <fabs>:
 800a464:	ec51 0b10 	vmov	r0, r1, d0
 800a468:	ee10 2a10 	vmov	r2, s0
 800a46c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a470:	ec43 2b10 	vmov	d0, r2, r3
 800a474:	4770      	bx	lr

0800a476 <finite>:
 800a476:	ee10 3a90 	vmov	r3, s1
 800a47a:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800a47e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800a482:	0fc0      	lsrs	r0, r0, #31
 800a484:	4770      	bx	lr

0800a486 <matherr>:
 800a486:	2000      	movs	r0, #0
 800a488:	4770      	bx	lr
 800a48a:	0000      	movs	r0, r0
 800a48c:	0000      	movs	r0, r0
	...

0800a490 <nan>:
 800a490:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a498 <nan+0x8>
 800a494:	4770      	bx	lr
 800a496:	bf00      	nop
 800a498:	00000000 	.word	0x00000000
 800a49c:	7ff80000 	.word	0x7ff80000

0800a4a0 <rint>:
 800a4a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a4a2:	ec51 0b10 	vmov	r0, r1, d0
 800a4a6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a4aa:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800a4ae:	2e13      	cmp	r6, #19
 800a4b0:	460b      	mov	r3, r1
 800a4b2:	ee10 4a10 	vmov	r4, s0
 800a4b6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800a4ba:	dc56      	bgt.n	800a56a <rint+0xca>
 800a4bc:	2e00      	cmp	r6, #0
 800a4be:	da2b      	bge.n	800a518 <rint+0x78>
 800a4c0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800a4c4:	4302      	orrs	r2, r0
 800a4c6:	d023      	beq.n	800a510 <rint+0x70>
 800a4c8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800a4cc:	4302      	orrs	r2, r0
 800a4ce:	4254      	negs	r4, r2
 800a4d0:	4314      	orrs	r4, r2
 800a4d2:	0c4b      	lsrs	r3, r1, #17
 800a4d4:	0b24      	lsrs	r4, r4, #12
 800a4d6:	045b      	lsls	r3, r3, #17
 800a4d8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800a4dc:	ea44 0103 	orr.w	r1, r4, r3
 800a4e0:	460b      	mov	r3, r1
 800a4e2:	492f      	ldr	r1, [pc, #188]	; (800a5a0 <rint+0x100>)
 800a4e4:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 800a4e8:	e9d1 6700 	ldrd	r6, r7, [r1]
 800a4ec:	4602      	mov	r2, r0
 800a4ee:	4639      	mov	r1, r7
 800a4f0:	4630      	mov	r0, r6
 800a4f2:	f7f5 fe7f 	bl	80001f4 <__adddf3>
 800a4f6:	e9cd 0100 	strd	r0, r1, [sp]
 800a4fa:	463b      	mov	r3, r7
 800a4fc:	4632      	mov	r2, r6
 800a4fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a502:	f7f5 fe75 	bl	80001f0 <__aeabi_dsub>
 800a506:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a50a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800a50e:	4639      	mov	r1, r7
 800a510:	ec41 0b10 	vmov	d0, r0, r1
 800a514:	b003      	add	sp, #12
 800a516:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a518:	4a22      	ldr	r2, [pc, #136]	; (800a5a4 <rint+0x104>)
 800a51a:	4132      	asrs	r2, r6
 800a51c:	ea01 0702 	and.w	r7, r1, r2
 800a520:	4307      	orrs	r7, r0
 800a522:	d0f5      	beq.n	800a510 <rint+0x70>
 800a524:	0852      	lsrs	r2, r2, #1
 800a526:	4011      	ands	r1, r2
 800a528:	430c      	orrs	r4, r1
 800a52a:	d00b      	beq.n	800a544 <rint+0xa4>
 800a52c:	ea23 0202 	bic.w	r2, r3, r2
 800a530:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a534:	2e13      	cmp	r6, #19
 800a536:	fa43 f306 	asr.w	r3, r3, r6
 800a53a:	bf0c      	ite	eq
 800a53c:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800a540:	2400      	movne	r4, #0
 800a542:	4313      	orrs	r3, r2
 800a544:	4916      	ldr	r1, [pc, #88]	; (800a5a0 <rint+0x100>)
 800a546:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800a54a:	4622      	mov	r2, r4
 800a54c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a550:	4620      	mov	r0, r4
 800a552:	4629      	mov	r1, r5
 800a554:	f7f5 fe4e 	bl	80001f4 <__adddf3>
 800a558:	e9cd 0100 	strd	r0, r1, [sp]
 800a55c:	4622      	mov	r2, r4
 800a55e:	462b      	mov	r3, r5
 800a560:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a564:	f7f5 fe44 	bl	80001f0 <__aeabi_dsub>
 800a568:	e7d2      	b.n	800a510 <rint+0x70>
 800a56a:	2e33      	cmp	r6, #51	; 0x33
 800a56c:	dd07      	ble.n	800a57e <rint+0xde>
 800a56e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800a572:	d1cd      	bne.n	800a510 <rint+0x70>
 800a574:	ee10 2a10 	vmov	r2, s0
 800a578:	f7f5 fe3c 	bl	80001f4 <__adddf3>
 800a57c:	e7c8      	b.n	800a510 <rint+0x70>
 800a57e:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 800a582:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a586:	40f2      	lsrs	r2, r6
 800a588:	4210      	tst	r0, r2
 800a58a:	d0c1      	beq.n	800a510 <rint+0x70>
 800a58c:	0852      	lsrs	r2, r2, #1
 800a58e:	4210      	tst	r0, r2
 800a590:	bf1f      	itttt	ne
 800a592:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800a596:	ea20 0202 	bicne.w	r2, r0, r2
 800a59a:	4134      	asrne	r4, r6
 800a59c:	4314      	orrne	r4, r2
 800a59e:	e7d1      	b.n	800a544 <rint+0xa4>
 800a5a0:	0800a898 	.word	0x0800a898
 800a5a4:	000fffff 	.word	0x000fffff

0800a5a8 <scalbn>:
 800a5a8:	b570      	push	{r4, r5, r6, lr}
 800a5aa:	ec55 4b10 	vmov	r4, r5, d0
 800a5ae:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800a5b2:	4606      	mov	r6, r0
 800a5b4:	462b      	mov	r3, r5
 800a5b6:	b9aa      	cbnz	r2, 800a5e4 <scalbn+0x3c>
 800a5b8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a5bc:	4323      	orrs	r3, r4
 800a5be:	d03b      	beq.n	800a638 <scalbn+0x90>
 800a5c0:	4b31      	ldr	r3, [pc, #196]	; (800a688 <scalbn+0xe0>)
 800a5c2:	4629      	mov	r1, r5
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	ee10 0a10 	vmov	r0, s0
 800a5ca:	f7f5 ffc9 	bl	8000560 <__aeabi_dmul>
 800a5ce:	4b2f      	ldr	r3, [pc, #188]	; (800a68c <scalbn+0xe4>)
 800a5d0:	429e      	cmp	r6, r3
 800a5d2:	4604      	mov	r4, r0
 800a5d4:	460d      	mov	r5, r1
 800a5d6:	da12      	bge.n	800a5fe <scalbn+0x56>
 800a5d8:	a327      	add	r3, pc, #156	; (adr r3, 800a678 <scalbn+0xd0>)
 800a5da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5de:	f7f5 ffbf 	bl	8000560 <__aeabi_dmul>
 800a5e2:	e009      	b.n	800a5f8 <scalbn+0x50>
 800a5e4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800a5e8:	428a      	cmp	r2, r1
 800a5ea:	d10c      	bne.n	800a606 <scalbn+0x5e>
 800a5ec:	ee10 2a10 	vmov	r2, s0
 800a5f0:	4620      	mov	r0, r4
 800a5f2:	4629      	mov	r1, r5
 800a5f4:	f7f5 fdfe 	bl	80001f4 <__adddf3>
 800a5f8:	4604      	mov	r4, r0
 800a5fa:	460d      	mov	r5, r1
 800a5fc:	e01c      	b.n	800a638 <scalbn+0x90>
 800a5fe:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a602:	460b      	mov	r3, r1
 800a604:	3a36      	subs	r2, #54	; 0x36
 800a606:	4432      	add	r2, r6
 800a608:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a60c:	428a      	cmp	r2, r1
 800a60e:	dd0b      	ble.n	800a628 <scalbn+0x80>
 800a610:	ec45 4b11 	vmov	d1, r4, r5
 800a614:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800a680 <scalbn+0xd8>
 800a618:	f000 f83c 	bl	800a694 <copysign>
 800a61c:	a318      	add	r3, pc, #96	; (adr r3, 800a680 <scalbn+0xd8>)
 800a61e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a622:	ec51 0b10 	vmov	r0, r1, d0
 800a626:	e7da      	b.n	800a5de <scalbn+0x36>
 800a628:	2a00      	cmp	r2, #0
 800a62a:	dd08      	ble.n	800a63e <scalbn+0x96>
 800a62c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a630:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a634:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a638:	ec45 4b10 	vmov	d0, r4, r5
 800a63c:	bd70      	pop	{r4, r5, r6, pc}
 800a63e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a642:	da0d      	bge.n	800a660 <scalbn+0xb8>
 800a644:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a648:	429e      	cmp	r6, r3
 800a64a:	ec45 4b11 	vmov	d1, r4, r5
 800a64e:	dce1      	bgt.n	800a614 <scalbn+0x6c>
 800a650:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800a678 <scalbn+0xd0>
 800a654:	f000 f81e 	bl	800a694 <copysign>
 800a658:	a307      	add	r3, pc, #28	; (adr r3, 800a678 <scalbn+0xd0>)
 800a65a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a65e:	e7e0      	b.n	800a622 <scalbn+0x7a>
 800a660:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a664:	3236      	adds	r2, #54	; 0x36
 800a666:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a66a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a66e:	4620      	mov	r0, r4
 800a670:	4629      	mov	r1, r5
 800a672:	2200      	movs	r2, #0
 800a674:	4b06      	ldr	r3, [pc, #24]	; (800a690 <scalbn+0xe8>)
 800a676:	e7b2      	b.n	800a5de <scalbn+0x36>
 800a678:	c2f8f359 	.word	0xc2f8f359
 800a67c:	01a56e1f 	.word	0x01a56e1f
 800a680:	8800759c 	.word	0x8800759c
 800a684:	7e37e43c 	.word	0x7e37e43c
 800a688:	43500000 	.word	0x43500000
 800a68c:	ffff3cb0 	.word	0xffff3cb0
 800a690:	3c900000 	.word	0x3c900000

0800a694 <copysign>:
 800a694:	ec51 0b10 	vmov	r0, r1, d0
 800a698:	ee11 0a90 	vmov	r0, s3
 800a69c:	ee10 2a10 	vmov	r2, s0
 800a6a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800a6a4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800a6a8:	ea41 0300 	orr.w	r3, r1, r0
 800a6ac:	ec43 2b10 	vmov	d0, r2, r3
 800a6b0:	4770      	bx	lr
	...

0800a6b4 <_init>:
 800a6b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6b6:	bf00      	nop
 800a6b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6ba:	bc08      	pop	{r3}
 800a6bc:	469e      	mov	lr, r3
 800a6be:	4770      	bx	lr

0800a6c0 <_fini>:
 800a6c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6c2:	bf00      	nop
 800a6c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6c6:	bc08      	pop	{r3}
 800a6c8:	469e      	mov	lr, r3
 800a6ca:	4770      	bx	lr
